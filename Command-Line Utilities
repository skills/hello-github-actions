# Hello GitHub Actions

_Create and run a GitHub Actions workflow._

## Welcome

Automation is key for repetitive tasks like testing, scanning, review, and deployment processes, and [GitHub Actions](https://docs.github.com/actions) is the best way to streamline that workflow.

- **Who is this for**: Developers, DevOps engineers, Security engineers
- **What you'll learn**: How to create GitHub Actions workflows, how to run them, and how to use them to automate tasks.
- **What you'll build**: An Actions workflow that will comment on a pull request when it is created.
- **Prerequisites**: [Introduction to GitHub](https://github.com/skills/introduction-to-github)
- **How long**: This exercise can be finished in less than 30min.

In this exercise, you will:

1. Create a workflow file
1. Add a job
1. Add a run step
1. See the workflow run
1. Merge your pull request

### How to start this exercise

Simply copy the exercise to your account, then give your favorite Octocat (Mona) **about 20 seconds** to prepare the first lesson, then **refresh the page**.

[![](https://img.shields.io/badge/Copy%20Exercise-%E2%86%92-1f883d?style=for-the-badge&logo=github&labelColor=197935)](https://github.com/new?template_owner=skills&template_name=hello-github-actions&owner=%40me&name=skills-hello-github-actions&description=Exercise:+Create+and+run+a+GitHub+Actions+Workflow&visibility=public)

<details>
<summary>Having trouble? ü§∑</summary><br/>

When copying the exercise, we recommend the following settings:

- For owner, choose your personal account or an organization to host the repository.

- We recommend creating a public repository, since private repositories will use Actions minutes.

If the exercise isn't ready in 20 seconds, please check the [Actions](../../actions) tab.

- Check to see if a job is running. Sometimes it simply takes a bit longer.

- If the page shows a failed job, please submit an issue. Nice, you found a bug! üêõ

</details>

---

&copy; 2025 GitHub &bull; [Code of Conduct](https://www.contributor-covenant.org/version/2/1/code_of_conduct/code_of_conduct.md) &bull; [MIT License](https://gh.io/mit)

Command-Line Utilities.

Command-Line Utilities.
Chalk.

Terminal string styling done right

Coverage Status npm dependents Downloads

Info
switch to a smaller coloring package.
See yoctocolors for a smaller alternative
Highlights
Expressive API
Highly performant
No dependencies
Ability to nest styles
256/Truecolor color support
Auto-detects color support
Doesn't extend String.prototype
Clean and focused
Actively maintained
Used by ~115,000 packages as of July 4, 2024
Install
npm install chalk
IMPORTANT: Chalk 5 is ESM. If you want to use Chalk with TypeScript or a build tool, you will probably want to use Chalk 4 for now. Read more.

Usage
import chalk from 'chalk';

console.log(chalk.blue('Hello world!'));
Chalk comes with an easy to use composable API where you just chain and nest the styles you want.

import chalk from 'chalk';

const log = console.log;

// Combine styled and normal strings
log(chalk.blue('Hello') + ' World' + chalk.red('!'));

// Compose multiple styles using the chainable API
log(chalk.blue.bgRed.bold('Hello world!'));

// Pass in multiple arguments
log(chalk.blue('Hello', 'World!', 'Foo', 'bar', 'biz', 'baz'));

// Nest styles
log(chalk.red('Hello', chalk.underline.bgBlue('world') + '!'));

// Nest styles of the same type even (color, underline, background)
log(chalk.green(
 'I am a green line ' +
 chalk.blue.underline.bold('with a blue substring') +
 ' that becomes green again!'
));

// ES2015 template literal
log(`
CPU: ${chalk.red('90%')}
RAM: ${chalk.green('40%')}
DISK: ${chalk.yellow('70%')}
`);

// Use RGB colors in terminal emulators that support it.
log(chalk.rgb(123, 45, 67).underline('Underlined reddish color'));
log(chalk.hex('#DEADED').bold('Bold gray!'));
Easily define your own themes:

import chalk from 'chalk';

const error = chalk.bold.red;
const warning = chalk.hex('#FFA500'); // Orange color

console.log(error('Error!'));
console.log(warning('Warning!'));
Take advantage of console.log string substitution:

import chalk from 'chalk';

const name = 'Sindre';
console.log(chalk.green('Hello %s'), name);
//=> 'Hello Sindre'
API
chalk.<style>[.<style>...](https://github.com/chalk/chalk/string, [string...])
Example: chalk.red.bold.underline('Hello', 'world');

Chain styles and call the last one as a method with a string argument. Order doesn't matter, and later styles take precedent in case of a conflict. This simply means that chalk.red.yellow.green is equivalent to chalk.green.

Multiple arguments will be separated by space.

chalk.level
Specifies the level of color support.

Color support is automatically detected, but you can override it by setting the level property. You should however only do this in your own code as it applies globally to all Chalk consumers.

If you need to change this in a reusable module, create a new instance:

import {Chalk} from 'chalk';

const customChalk = new Chalk({level: 0});
Level Description
0 All colors disabled
1 Basic color support (16 colors)
2 256 color support
3 Truecolor support (16 million colors)
supportsColor
Detect whether the terminal supports color. Used internally and handled for you, but exposed for convenience.

Can be overridden by the user with the flags --color and --no-color. For situations where using --color is not possible, use the environment variable FORCE_COLOR=1 (level 1), FORCE_COLOR=2 (level 2), or FORCE_COLOR=3 (level 3) to forcefully enable color, or FORCE_COLOR=0 to forcefully disable. The use of FORCE_COLOR overrides all other color support checks.

Explicit 256/Truecolor mode can be enabled using the --color=256 and --color=16m flags, respectively.

chalkStderr and supportsColorStderr
chalkStderr contains a separate instance configured with color support detected for stderr stream instead of stdout. Override rules from supportsColor apply to this too. supportsColorStderr is exposed for convenience.

modifierNames, foregroundColorNames, backgroundColorNames, and colorNames
All supported style strings are exposed as an array of strings for convenience. colorNames is the combination of foregroundColorNames and backgroundColorNames.

This can be useful if you wrap Chalk and need to validate input:

import {modifierNames, foregroundColorNames} from 'chalk';

console.log(modifierNames.includes('bold'));
//=> true

console.log(foregroundColorNames.includes('pink'));
//=> false
Styles
Modifiers
reset - Reset the current style.
bold - Make the text bold.
dim - Make the text have lower opacity.
italic - Make the text italic. (Not widely supported)
underline - Put a horizontal line below the text. (Not widely supported)
overline - Put a horizontal line above the text. (Not widely supported)
inverse- Invert background and foreground colors.
hidden - Print the text but make it invisible.
strikethrough - Puts a horizontal line through the center of the text. (Not widely supported)
visible- Print the text only when Chalk has a color level above zero. Can be useful for things that are purely cosmetic.
Colors
black
red
green
yellow
blue
magenta
cyan
white
blackBright (alias: gray, grey)
redBright
greenBright
yellowBright
blueBright
magentaBright
cyanBright
whiteBright
Background colors
bgBlack
bgRed
bgGreen
bgYellow
bgBlue
bgMagenta
bgCyan
bgWhite
bgBlackBright (alias: bgGray, bgGrey)
bgRedBright
bgGreenBright
bgYellowBright
bgBlueBright
bgMagentaBright
bgCyanBright
bgWhiteBright
256 and Truecolor color support
Chalk supports 256 colors and Truecolor (16 million colors) on supported terminal apps.

Colors are downsampled from 16 million RGB values to an ANSI color format that is supported by the terminal emulator (or by specifying {level: n} as a Chalk option). For example, Chalk configured to run at level 1 (basic color support) will downsample an RGB value of #FF0000 (red) to 31 (ANSI escape for red).

Examples:

chalk.hex('#DEADED').underline('Hello, world!')
chalk.rgb(15, 100, 204).inverse('Hello!')
Background versions of these models are prefixed with bg and the first level of the module capitalized (e.g. hex for foreground colors and bgHex for background colors).

chalk.bgHex('#DEADED').underline('Hello, world!')
chalk.bgRgb(15, 100, 204).inverse('Hello!')
The following color models can be used:

rgb - Example: chalk.rgb(255, 136, 0).bold('Orange!')
hex - Example: chalk.hex('#FF8800').bold('Orange!')
ansi256 - Example: chalk.bgAnsi256(194)('Honeydew, more or less')
Browser support
Since Chrome 69, ANSI escape codes are natively supported in the developer console.

Windows
If you're on Windows, do yourself a favor and use Windows Terminal instead of cmd.exe.

Chalk may be larger, but there is a reason for that. It offers a more user-friendly API, well-documented types, supports millions of colors, and covers edge cases that smaller alternatives miss. Chalk is mature, reliable, and built to last.

But beyond the technical aspects, there's something more critical: trust and long-term maintenance. I have been active in open source for over a decade, and I'm committed to keeping Chalk maintained. Smaller packages might seem appealing now, but there's no guarantee they will be around for the long term, or that they won't become malicious over time.

Chalk is also likely already in your dependency tree (since 100K+ packages depend on it), so switching won‚Äôt save space‚Äîin fact, it might increase it. npm deduplicates dependencies, so multiple Chalk instances turn into one, but adding another package alongside it will increase your overall size.

If the goal is to clean up the ecosystem, switching away from Chalk won‚Äôt even make a dent. The real problem lies with packages that have very deep dependency trees (for example, those including a lot of polyfills). Chalk has no dependencies. It's better to focus on impactful changes rather than minor optimizations.

If absolute package size is important to you, I also maintain yoctocolors, one of the smallest color packages out there.

- Sindre

But the smaller coloring package has benchmarks showing it is faster
Micro-benchmarks are flawed because they measure performance in unrealistic, isolated scenarios, often giving a distorted view of real-world performance. Don't believe marketing fluff. All the coloring packages are more than fast enough.

Related
chalk-template - Tagged template literals support for this module
chalk-cli - CLI for this module
ansi-styles - ANSI escape codes for styling strings in the terminal
supports-color - Detect whether a terminal supports color
strip-ansi - Strip ANSI escape codes
strip-ansi-stream - Strip ANSI escape codes from a stream
has-ansi - Check if a string has ANSI escape codes
ansi-regex - Regular expression for matching ANSI escape codes
wrap-ansi - Wordwrap a string with ANSI escape codes
slice-ansi - Slice a string with ANSI escape codes
color-convert - Converts colors between different models
chalk-animation - Animate strings in the terminal
gradient-string - Apply color gradients to strings
chalk-pipe - Create chalk style schemes with simpler style strings
terminal-link - Create clickable links in the terminal.


Meow.

meow
CLI app helper.

Features
Parses arguments
Converts flags to camelCase
Negates flags when using the --no- prefix
Outputs version when --version
Outputs description and supplied help text when --help
Sets the process title to the binary name defined in package.json
No dependencies!
Install
npm install meow
Usage
./foo-app.js unicorns --rainbow
#!/usr/bin/env node
import meow from 'meow';
import foo from './lib/index.js';

const cli = meow(`
 Usage
   $ foo <input>

 Options
   --rainbow, -r Include a rainbow

 Examples
   $ foo unicorns --rainbow
   üåà unicorns üåà
`, {
 importMeta: import.meta, // This is required
 flags: {
  rainbow: {
   type: 'boolean',
   shortFlag: 'r'
  }
 }
});
/*
{
 input: ['unicorns'],
 flags: {rainbow: true},
 ...
}
*/

foo(cli.input.at(0), cli.flags);
API
meow(helpText, options)
meow(options)
Returns an object with:

input (Array) - Non-flag arguments
flags (Object) - Flags converted to camelCase excluding aliases
unnormalizedFlags (Object) - Flags converted to camelCase including aliases
pkg (Object) - The package.json object
help (string) - The help text used with --help
showHelp([exitCode=2]) (Function) - Show the help text and exit with exitCode
showVersion() (Function) - Show the version text and exit
helpText
Type: string

Shortcut for the help option.

options
Type: object

importMeta
Required
Type: object

Pass in import.meta. This is used to find the correct package.json file.

flags
Type: object

Define argument flags.

The key is the flag name in camel-case and the value is an object with any of:

type: Type of value. (Possible values: string boolean number)
choices: Limit valid values to a predefined set of choices.
default: Default value when the flag is not specified.
shortFlag: A short flag alias.
aliases: Other names for the flag.
isMultiple: Indicates a flag can be set multiple times. Values are turned into an array. (Default: false)
Multiple values are provided by specifying the flag multiple times, for example, $ foo -u rainbow -u cat. Space- or comma-separated values are currently not supported.
isRequired: Determine if the flag is required. (Default: false)
If it's only known at runtime whether the flag is required or not, you can pass a Function instead of a boolean, which based on the given flags and other non-flag arguments, should decide if the flag is required. Two arguments are passed to the function:
The first argument is the flags object, which contains the flags converted to camel-case excluding aliases.
The second argument is the input string array, which contains the non-flag arguments.
The function should return a boolean, true if the flag is required, otherwise false.
Note that flags are always defined using a camel-case key (myKey), but will match arguments in kebab-case (--my-key).

Example:

flags: {
 unicorn: {
  type: 'string',
  choices: ['rainbow', 'cat', 'unicorn'],
  default: ['rainbow', 'cat'],
  shortFlag: 'u',
  aliases: ['unicorns'],
  isMultiple: true,
  isRequired: (flags, input) => {
   if (flags.otherFlag) {
    return true;
   }

   return false;
  }
 }
}
description
Type: string | false
Default: The package.json "description" property

Description to show above the help text.

Set it to false to disable it altogether.

help
Type: string | false

The help text you want shown.

The input is reindented and starting/ending newlines are trimmed which means you can use a template literal without having to care about using the correct amount of indent.

The description will be shown above your help text automatically.

Set it to false to disable it altogether.

version
Type: string
Default: The package.json "version" property

Set a custom version output.

autoHelp
Type: boolean
Default: true

Automatically show the help text when the --help flag is present. Useful to set this value to false when a CLI manages child CLIs with their own help text.

This option is only considered when there is only one argument in process.argv.

autoVersion
Type: boolean
Default: true

Automatically show the version text when the --version flag is present. Useful to set this value to false when a CLI manages child CLIs with their own version text.

This option is only considered when there is only one argument in process.argv.

pkg
Type: object
Default: Closest package.json upwards

package.json as an object.

Note: Setting this stops meow from finding a package.json.

You most likely don't need this option.

argv
Type: string[]
Default: process.argv.slice(2)

Custom arguments object.

inferType
Type: boolean
Default: false

Infer the argument type.

By default, the argument 5 in $ foo 5 becomes a string. Enabling this would infer it as a number.

booleanDefault
Type: boolean | undefined
Default: false

Value of boolean flags not defined in argv.

If set to undefined, the flags not defined in argv will be excluded from the result. The default value set in boolean flags take precedence over booleanDefault.

Note: If used in conjunction with isMultiple, the default flag value is set to [].

Caution: Explicitly specifying undefined for booleanDefault has different meaning from omitting key itself.

Example:

import meow from 'meow';

const cli = meow(`
 Usage
   $ foo

 Options
   --rainbow, -r Include a rainbow
   --unicorn, -u Include a unicorn
   --no-sparkles Exclude sparkles

 Examples
   $ foo
   üåà unicorns‚ú®üåà
`, {
 importMeta: import.meta,
 booleanDefault: undefined,
 flags: {
  rainbow: {
   type: 'boolean',
   default: true,
   shortFlag: 'r'
  },
  unicorn: {
   type: 'boolean',
   default: false,
   shortFlag: 'u'
  },
  cake: {
   type: 'boolean',
   shortFlag: 'c'
  },
  sparkles: {
   type: 'boolean',
   default: true
  }
 }
});
/*
{
 flags: {
  rainbow: true,
  unicorn: false,
  sparkles: true
 },
 unnormalizedFlags: {
  rainbow: true,
  r: true,
  unicorn: false,
  u: false,
  sparkles: true
 },
 ‚Ä¶
}
*/
allowUnknownFlags
Type boolean
Default: true

Whether to allow unknown flags or not.

helpIndent
Type number
Default: 2

The number of spaces to use for indenting the help text.

Tips
See chalk if you want to colorize the terminal output.

See get-stdin if you want to accept input from stdin.

See conf if you need to persist some data.

More useful CLI utilities‚Ä¶


Yargs.

Yargs
Yargs be a node.js library fer hearties tryin' ter parse optstrings.

ci NPM version js-standard-style Coverage Conventional Commits

Description.
Yargs helps you build interactive command line tools, by parsing arguments and generating an elegant user interface.

It gives you:

commands and (grouped) options (my-program.js serve --port=5000).
a dynamically generated help menu based on your arguments:
mocha [spec..]

Run tests with Mocha

Commands
  mocha inspect [spec..] Run tests with Mocha [default]
  mocha init <path> create a client-side Mocha setup at <path>

Rules & Behavior
  --allow-uncaught Allow uncaught errors to propagate [boolean]
  --async-only, -A Require all tests to use a callback (async) or
                             return a Promise [boolean]
generate completion scripts for Bash and Zsh for your command
and tons more.
Installation
Stable version:

npm i yargs
Bleeding edge version with the most recent features:

npm i yargs@next
Usage
Simple Example
#!/usr/bin/env node
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';
const argv = yargs(hideBin(process.argv)).parse()

if (argv.ships > 3 && argv.distance < 53.5) {
  console.log('Plunder more riffiwobbles!')
} else {
  console.log('Retreat from the xupptumblers!')
}
$ ./plunder.js --ships=4 --distance=22
Plunder more riffiwobbles!

$ ./plunder.js --ships 12 --distance 98.7
Retreat from the xupptumblers!
Note: hideBin is a shorthand for process.argv.slice(2). It has the benefit that it takes into account variations in some environments, e.g., Electron.

Complex Example
#!/usr/bin/env node
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

yargs(hideBin(process.argv))
  .command('serve [port]', 'start the server', (yargs) => {
    return yargs
      .positional('port', {
        describe: 'port to bind on',
        default: 5000
      })
  }, (argv) => {
    if (argv.verbose) console.info(`start server on :${argv.port}`)
    serve(argv.port)
  })
  .option('verbose', {
    alias: 'v',
    type: 'boolean',
    description: 'Run with verbose logging'
  })
  .parse()
Run the example above with --help to see the help for the application.

Supported Platforms
TypeScript
yargs has type definitions at @types/yargs.

npm i @types/yargs --save-dev
See usage examples in docs.

Deno
As of v16, yargs supports Deno:

import yargs from 'https://deno.land/x/yargs@v17.7.2-deno/deno.ts'
import { Arguments } from 'https://deno.land/x/yargs@v17.7.2-deno/deno-types.ts'

yargs(Deno.args)
  .command('download <files...>', 'download a list of files', (yargs: any) => {
    return yargs.positional('files', {
      describe: 'a list of files to do something with'
    })
  }, (argv: Arguments) => {
    console.info(argv)
  })
  .strictCommands()
  .demandCommand(1)
  .parse()
Note: If you use version tags in url then you also have to add -deno flag on the end, like @17.7.2-deno

Usage in Browser
See examples of using yargs in the browser in docs.

Documentation
Table of Contents
Yargs' API
Examples
Parsing Tricks
Stop the Parser
Negating Boolean Arguments
Numbers
Arrays
Objects
Quotes
Advanced Topics
Composing Your App Using Commands
Building Configurable CLI Apps
Customizing Yargs' Parser
Contributing
Supported Node.js Versions
Libraries in this ecosystem make a best effort to track Node.js' release schedule. Here's a post on why we think this is important.


Ora.
ora
Elegant terminal spinner.

Install
npm install ora
Check out yocto-spinner for a smaller alternative.

Usage
import ora from 'ora';

const spinner = ora('Loading unicorns').start();

setTimeout(() => {
 spinner.color = 'yellow';
 spinner.text = 'Loading rainbows';
}, 1000);
API
ora(text)
ora(options)
If a string is provided, it is treated as a shortcut for options.text.

options
Type: object

text
Type: string

The text to display next to the spinner.

prefixText
Type: string | () => string

Text or a function that returns text to display before the spinner. No prefix text will be displayed if set to an empty string.

suffixText
Type: string | () => string

Text or a function that returns text to display after the spinner text. No suffix text will be displayed if set to an empty string.

spinner
Type: string | object
Default: 'dots' 

The name of one of the provided spinners. See example.js in this repo if you want to test out different spinners. On Windows (except for Windows Terminal), it will always use the line spinner as the Windows command-line doesn't have proper Unicode support.

Or an object like:

{
 frames: ['-', '+', '-'],
 interval: 80 // Optional
}
color
Type: string | boolean
Default: 'cyan'
Values: 'black' | 'red' | 'green' | 'yellow' | 'blue' | 'magenta' | 'cyan' | 'white' | 'gray' | boolean

The color of the spinner.

hideCursor
Type: boolean
Default: true

Set to false to stop Ora from hiding the cursor.

indent
Type: number
Default: 0

Indent the spinner with the given number of spaces.

interval
Type: number
Default: Provided by the spinner or 100

Interval between each frame.

Spinners provide their own recommended interval, so you don't really need to specify this.

stream
Type: stream.Writable
Default: process.stderr

Stream to write the output.

You could for example set this to process.stdout instead.

isEnabled
Type: boolean

Force enable/disable the spinner. If not specified, the spinner will be enabled if the stream is being run inside a TTY context (not spawned or piped) and/or not in a CI environment.

Note that {isEnabled: false} doesn't mean it won't output anything. It just means it won't output the spinner, colors, and other ansi escape codes. It will still log text.

isSilent
Type: boolean
Default: false

Disable the spinner and all log text. All output is suppressed and isEnabled will be considered false.

discardStdin
Type: boolean
Default: true

Discard stdin input (except Ctrl+C) while running if it's TTY. This prevents the spinner from twitching on input, outputting broken lines on Enter key presses, and prevents buffering of input while the spinner is running.

This has no effect on Windows as there is no good way to implement discarding stdin properly there.

Instance
.text get/set
Change the text displayed after the spinner.

.prefixText get/set
Change the text before the spinner.

No prefix text will be displayed if set to an empty string.

.suffixText get/set
Change the text after the spinner text.

No suffix text will be displayed if set to an empty string.

.color get/set
Change the spinner color.

.spinner get/set
Change the spinner.

.indent get/set
Change the spinner indent.

.isSpinning get
A boolean indicating whether the instance is currently spinning.

.interval get
The interval between each frame.

The interval is decided by the chosen spinner.

.start(text?)
Start the spinner. Returns the instance. Set the current text if text is provided.

.stop()
Stop and clear the spinner. Returns the instance.

.succeed(text?)
Stop the spinner, change it to a green ‚úî and persist the current text, or text if provided. Returns the instance. See the GIF below.

.fail(text?)
Stop the spinner, change it to a red ‚úñ and persist the current text, or text if provided. Returns the instance. See the GIF below.

.warn(text?)
Stop the spinner, change it to a yellow ‚ö† and persist the current text, or text if provided. Returns the instance.

.info(text?)
Stop the spinner, change it to a blue ‚Ñπ and persist the current text, or text if provided. Returns the instance.

.stopAndPersist(options?)
Stop the spinner and change the symbol or text. Returns the instance. See the GIF below.

options
Type: object

symbol
Type: string
Default: ' '

Symbol to replace the spinner with.

text
Type: string
Default: Current 'text'

Text to be persisted after the symbol.

prefixText
Type: string | () => string
Default: Current prefixText

Text or a function that returns text to be persisted before the symbol. No prefix text will be displayed if set to an empty string.

suffixText
Type: string | () => string
Default: Current suffixText

Text or a function that returns text to be persisted after the text after the symbol. No suffix text will be displayed if set to an empty string.


.clear()
Clear the spinner. Returns the instance.

.render()
Manually render a new frame. Returns the instance.

.frame()
Get a new frame.

oraPromise(action, text)
oraPromise(action, options)
Starts a spinner for a promise or promise-returning function. The spinner is stopped with .succeed() if the promise fulfills or with .fail() if it rejects. Returns the promise.

import {oraPromise} from 'ora';

await oraPromise(somePromise);
action
Type: Promise | ((spinner: ora.Ora) => Promise)

options
Type: object

All of the options plus the following:

successText
Type: string | ((result: T) => string) | undefined

The new text of the spinner when the promise is resolved.

Keeps the existing text if undefined.

failText
Type: string | ((error: Error) => string) | undefined

The new text of the spinner when the promise is rejected.

Keeps the existing text if undefined.

spinners
Type: Record<string, Spinner>

All provided spinners.

 change the color of the text.
Use chalk or yoctocolors:

import ora from 'ora';
import chalk from 'chalk';

const spinner = ora(`Loading ${chalk.red('unicorns')}`).start();
Why does the spinner freeze?
JavaScript is single-threaded, so any synchronous operations will block the spinner's animation. To avoid this, prefer using asynchronous operations.

Related
yocto-spinner - Tiny terminal spinner
cli-spinners - Spinners for use in the terminal
Ports

CLISpinner - Terminal spinner library for Swift
halo - Python port
spinners - Terminal spinners for Rust
marquee-ora - Scrolling marquee spinner for Ora
briandowns/spinner - Terminal spinner/progress indicator for Go
tj/go-spin - Terminal spinner package for Go
observablehq.com/@victordidenko/ora - Ora port to Observable notebooks
kia - Simple terminal spinners for Deno ü¶ï


Get-STDin.

get-stdin
Get stdin as a string or buffer

Install
npm install get-stdin
Usage
// example.js
import getStdin from 'get-stdin';

console.log(await getStdin());
//=> 'unicorns'
$ echo unicorns | node example.js
unicorns
API
Both methods returns a promise that is resolved when the end event fires on the stdin stream, indicating that there is no more data to be read.

getStdin()
Get stdin as a string.

In a TTY context, a promise that resolves to an empty string is returned.

getStdin.buffer()
Get stdin as a Buffer.

In a TTY context, a promise that resolves to an empty Buffer is returned.

Tip
You can now accomplish this natively in Node.js using streamConsumers.text() or streamConsumers.buffer():

// example.js
import {text} from 'node:stream/consumers';

console.log(await text(stream))
//=> 'unicorns'
$ echo unicorns | node example.js
unicorns
Related
get-stream - Get a stream as a string or buffer.


Log-update.

log-update
Log by overwriting the previous output in the terminal.
Useful for rendering progress bars, animations, etc.



Install
npm install log-update
Usage
import logUpdate from 'log-update';

const frames = ['-', '\\', '|', '/'];
let index = 0;

setInterval(() => {
 const frame = frames[index = ++index % frames.length];

 logUpdate(
`
        ‚ô•‚ô•
   ${frame} unicorns ${frame}
        ‚ô•‚ô•
`
 );
}, 80);
You can use yoctocolors or chalk to colorize the output.

API
logUpdate(text‚Ä¶)
Log to stdout.

logUpdate.clear()
Clear the logged output.

logUpdate.done()
Persist the logged output.

Useful if you want to start a new log session below the current one.

logUpdateStderr(text‚Ä¶)
Log to stderr.

logUpdateStderr.clear()
logUpdateStderr.done()
createLogUpdate(stream, options?)
Get a logUpdate method that logs to the specified stream.

options
Type: object

showCursor
Type: boolean
Default: false

Show the cursor. This can be useful when a CLI accepts input from a user.

import {createLogUpdate} from 'log-update';

// Write output but don't hide the cursor
const log = createLogUpdate(process.stdout, {
 showCursor: true
});
Examples
listr - Uses this module to render an interactive task list
ora - Uses this module to render awesome spinners
speed-test - Uses this module to render a spinner.


Ink

React for CLIs. Build and test your CLI output using components.

Build Status npm

Ink provides the same component-based UI building experience that React offers in the browser, but for command-line apps. It uses Yoga to build Flexbox layouts in the terminal, so most CSS-like props are available in Ink as well. If you are already familiar with React, you already know Ink.

Since Ink is a React renderer, it means that all features of React are supported. Head over to React website for documentation on how to use it. Only Ink's methods will be documented in this readme.

My open source work is supported by the community ‚ù§Ô∏è

Install
npm install ink react
Usage
import React, {useState, useEffect} from 'react';
import {render, Text} from 'ink';

const Counter = () => {
 const [counter, setCounter] = useState(0);

 useEffect(() => {
  const timer = setInterval(() => {
   setCounter(previousCounter => previousCounter + 1);
  }, 100);

  return () => {
   clearInterval(timer);
  };
 }, []);

 return <Text color="green">{counter} tests passed</Text>;
};

render(<Counter />);

You can also check it out live on repl.it sandbox. Feel free to play around with the code and fork this repl at https://repl.it/@vadimdemedes/ink-counter-demo.

Who's Using Ink.
Codex - An open-source coding agent that runs in the terminal, made by OpenAI.
Claude Code - An agentic coding tool made by Anthropic.
GitHub Copilot for CLI - Just say what you want the shell to do.
Cloudflare's Wrangler - The CLI for Cloudflare Workers.
Linear - Linear built an internal CLI for managing deployments, configs and other housekeeping tasks.
Gatsby - Gatsby is a modern web framework for blazing fast websites.
tap - A Test-Anything-Protocol library for JavaScript.
Terraform CDK - CDK (Cloud Development Kit) for HashiCorp Terraform.
Specify CLI - Automate the distribution of your design tokens.
Twilio's SIGNAL - CLI for Twilio's SIGNAL conference. Blog post.
Typewriter - Generates strongly-typed Segment analytics clients from arbitrary JSON Schema.
Prisma - The unified data layer for modern applications.
Blitz - The Fullstack React Framework.
a toolkit that encapsulates and manages the configuration for web apps.
tink - Next-generation runtime and package manager.
Inkle - Wordle game.
loki - Visual regression testing for Storybook.
Bit - Build, distribute and collaborate on components.
Remirror - Your friendly, world-class editor toolkit.
Prime - Open source GraphQL CMS.
emoj - Find relevant emojis.
emma - Find and install npm packages.
npm-check-extras - Check for outdated and unused dependencies, and run update/delete action over selected ones.
swiff - Multi-environment command line tools for time-saving web developers.
share - Quickly share files.
Kubelive - CLI for Kubernetes to provide live data about the cluster and its resources.
changelog-view - View changelogs.
cfpush - An interactive Cloud Foundry tutorial.
startd - Turn your React component into a web app.
wiki-cli - Search Wikipedia and read summaries.
garson - Build interactive config-based command-line interfaces.
git-contrib-calendar - Display a contributions calendar for any git repository.
gitgud - An interactive command-line GUI for Git.
Autarky - Find and delete old node_modules directories in order to free up disk space.
fast-cli - Test your download and upload speed.
tasuku - Minimal task runner.
mnswpr - Minesweeper game.
lrn - Learning by repetition.
turdle - Wordle game.
Shopify CLI - Build apps, themes, and storefronts for Shopify.
ToDesktop CLI - An all-in-one platform for building Electron apps.
Walle - Full-featured crypto wallet for EVM networks.
Sudoku - Sudoku game.
Sea Trader - Taipan! inspired trading simulator game.
srtd - Live-reloading SQL templates for Supabase projects.
Contents
Getting Started
Components
<Text>
<Box>
<Newline>
<Spacer>
<Static>
<Transform>
Hooks
useInput
useApp
useStdin
useStdout
useStderr
useFocus
useFocusManager
API
Testing
Using React Devtools
Useful Components
Useful Hooks
Examples
Getting Started
Use create-ink-app to quickly scaffold a new Ink-based CLI.

npx create-ink-app my-ink-cli
Alternatively, create a TypeScript project:

npx create-ink-app --typescript my-ink-cli
Manual JavaScript setup
Ink uses Yoga - a Flexbox layout engine to build great user interfaces for your CLIs using familiar CSS-like props you've used when building apps for the browser. It's important to remember that each element is a Flexbox container. Think of it as if each <div> in the browser had display: flex. See <Box> built-in component below for documentation on how to use Flexbox layouts in Ink. Note that all text must be wrapped in a <Text> component.

Components
<Text>
This component can display text, and change its style to make it bold, underline, italic or strikethrough.

import {render, Text} from 'ink';

const Example = () => (
 <>
  <Text color="green">I am green</Text>
  <Text color="black" backgroundColor="white">
   I am black on white
  </Text>
  <Text color="#ffffff">I am white</Text>
  <Text bold>I am bold</Text>
  <Text italic>I am italic</Text>
  <Text underline>I am underline</Text>
  <Text strikethrough>I am strikethrough</Text>
  <Text inverse>I am inversed</Text>
 </>
);

render(<Example />);
Note: <Text> allows only text nodes and nested <Text> components inside of it. For example, <Box> component can't be used inside <Text>.

color
Type: string

Change text color. Ink uses chalk under the hood, so all its functionality is supported.

<Text color="green">Green</Text>
<Text color="#005cc5">Blue</Text>
<Text color="rgb(232, 131, 136)">Red</Text>

backgroundColor
Type: string

Same as color above, but for background.

<Text backgroundColor="green" color="white">Green</Text>
<Text backgroundColor="#005cc5" color="white">Blue</Text>
<Text backgroundColor="rgb(232, 131, 136)" color="white">Red</Text>

dimColor
Type: boolean
Default: false

Dim the color (emit a small amount of light).

<Text color="red" dimColor>
 Dimmed Red
</Text>

bold
Type: boolean
Default: false

Make the text bold.

italic
Type: boolean
Default: false

Make the text italic.

underline
Type: boolean
Default: false

Make the text underlined.

strikethrough
Type: boolean
Default: false

Make the text crossed with a line.

inverse
Type: boolean
Default: false

Inverse background and foreground colors.

<Text inverse color="yellow">
 Inversed Yellow
</Text>

wrap
Type: string
Allowed values: wrap truncate truncate-start truncate-middle truncate-end
Default: wrap

This property tells Ink to wrap or truncate text if its width is larger than container. If wrap is passed (by default), Ink will wrap text and split it into multiple lines. If truncate-* is passed, Ink will truncate text instead, which will result in one line of text with the rest cut off.

<Box width={7}>
 <Text>Hello World</Text>
</Box>
//=> 'Hello\nWorld'

// `truncate` is an alias to `truncate-end`
<Box width={7}>
 <Text wrap="truncate">Hello World</Text>
</Box>
//=> 'Hello‚Ä¶'

<Box width={7}>
 <Text wrap="truncate-middle">Hello World</Text>
</Box>
//=> 'He‚Ä¶ld'

<Box width={7}>
 <Text wrap="truncate-start">Hello World</Text>
</Box>
//=> '‚Ä¶World'
<Box>
<Box> is an essential Ink component to build your layout. It's like <div style="display: flex"> in the browser.

import {render, Box, Text} from 'ink';

const Example = () => (
 <Box margin={2}>
  <Text>This is a box with margin</Text>
 </Box>
);

render(<Example />);
Dimensions
width
Type: number string

Width of the element in spaces. You can also set it in percent, which will calculate the width based on the width of parent element.

<Box width={4}>
 <Text>X</Text>
</Box>
//=> 'X '
<Box width={10}>
 <Box width="50%">
  <Text>X</Text>
 </Box>
 <Text>Y</Text>
</Box>
//=> 'X Y'
height
Type: number string

Height of the element in lines (rows). You can also set it in percent, which will calculate the height based on the height of parent element.

<Box height={4}>
 <Text>X</Text>
</Box>
//=> 'X\n\n\n'
<Box height={6} flexDirection="column">
 <Box height="50%">
  <Text>X</Text>
 </Box>
 <Text>Y</Text>
</Box>
//=> 'X\n\n\nY\n\n'
minWidth
Type: number

Sets a minimum width of the element. Percentages aren't supported yet, see https://github.com/facebook/yoga/issues/872.

minHeight
Type: number

Sets a minimum height of the element. Percentages aren't supported yet, see https://github.com/facebook/yoga/issues/872.

Padding
paddingTop
Type: number
Default: 0

Top padding.

paddingBottom
Type: number
Default: 0

Bottom padding.

paddingLeft
Type: number
Default: 0

Left padding.

paddingRight
Type: number
Default: 0

Right padding.

paddingX
Type: number
Default: 0

Horizontal padding. Equivalent to setting paddingLeft and paddingRight.

paddingY
Type: number
Default: 0

Vertical padding. Equivalent to setting paddingTop and paddingBottom.

padding
Type: number
Default: 0

Padding on all sides. Equivalent to setting paddingTop, paddingBottom, paddingLeft and paddingRight.

<Box paddingTop={2}>Top</Box>
<Box paddingBottom={2}>Bottom</Box>
<Box paddingLeft={2}>Left</Box>
<Box paddingRight={2}>Right</Box>
<Box paddingX={2}>Left and right</Box>
<Box paddingY={2}>Top and bottom</Box>
<Box padding={2}>Top, bottom, left and right</Box>
Margin
marginTop
Type: number
Default: 0

Top margin.

marginBottom
Type: number
Default: 0

Bottom margin.

marginLeft
Type: number
Default: 0

Left margin.

marginRight
Type: number
Default: 0

Right margin.

marginX
Type: number
Default: 0

Horizontal margin. Equivalent to setting marginLeft and marginRight.

marginY
Type: number
Default: 0

Vertical margin. Equivalent to setting marginTop and marginBottom.

margin
Type: number
Default: 0

Margin on all sides. Equivalent to setting marginTop, marginBottom, marginLeft and marginRight.

<Box marginTop={2}>Top</Box>
<Box marginBottom={2}>Bottom</Box>
<Box marginLeft={2}>Left</Box>
<Box marginRight={2}>Right</Box>
<Box marginX={2}>Left and right</Box>
<Box marginY={2}>Top and bottom</Box>
<Box margin={2}>Top, bottom, left and right</Box>
Gap
gap
Type: number
Default: 0

Size of the gap between an element's columns and rows. Shorthand for columnGap and rowGap.

<Box gap={1} width={3} flexWrap="wrap">
 <Text>A</Text>
 <Text>B</Text>
 <Text>C</Text>
</Box>
// A B
//
// C
columnGap
Type: number
Default: 0

Size of the gap between an element's columns.

<Box columnGap={1}>
 <Text>A</Text>
 <Text>B</Text>
</Box>
// A B
rowGap
Type: number
Default: 0

Size of the gap between element's rows.

<Box flexDirection="column" rowGap={1}>
 <Text>A</Text>
 <Text>B</Text>
</Box>
// A
//
// B
Flex
flexGrow
Type: number
Default: 0

See flex-grow.

<Box>
 <Text>Label:</Text>
 <Box flexGrow={1}>
  <Text>Fills all remaining space</Text>
 </Box>
</Box>
flexShrink
Type: number
Default: 1

See flex-shrink.

<Box width={20}>
 <Box flexShrink={2} width={10}>
  <Text>Will be 1/4</Text>
 </Box>
 <Box width={10}>
  <Text>Will be 3/4</Text>
 </Box>
</Box>
flexBasis
Type: number string

See flex-basis.

<Box width={6}>
 <Box flexBasis={3}>
  <Text>X</Text>
 </Box>
 <Text>Y</Text>
</Box>
//=> 'X Y'
<Box width={6}>
 <Box flexBasis="50%">
  <Text>X</Text>
 </Box>
 <Text>Y</Text>
</Box>
//=> 'X Y'
flexDirection
Type: string
Allowed values: row row-reverse column column-reverse

See flex-direction.

<Box>
 <Box marginRight={1}>
  <Text>X</Text>
 </Box>
 <Text>Y</Text>
</Box>
// X Y

<Box flexDirection="row-reverse">
 <Text>X</Text>
 <Box marginRight={1}>
  <Text>Y</Text>
 </Box>
</Box>
// Y X

<Box flexDirection="column">
 <Text>X</Text>
 <Text>Y</Text>
</Box>
// X
// Y

<Box flexDirection="column-reverse">
 <Text>X</Text>
 <Text>Y</Text>
</Box>
// Y
// X
flexWrap
Type: string
Allowed values: nowrap wrap wrap-reverse

See flex-wrap.

<Box width={2} flexWrap="wrap">
 <Text>A</Text>
 <Text>BC</Text>
</Box>
// A
// B C
<Box flexDirection="column" height={2} flexWrap="wrap">
 <Text>A</Text>
 <Text>B</Text>
 <Text>C</Text>
</Box>
// A C
// B
alignItems
Type: string
Allowed values: flex-start center flex-end

See align-items.

<Box alignItems="flex-start">
 <Box marginRight={1}>
  <Text>X</Text>
 </Box>
 <Text>
  A
  <Newline/>
  B
  <Newline/>
  C
 </Text>
</Box>
// X A
// B
// C

<Box alignItems="center">
 <Box marginRight={1}>
  <Text>X</Text>
 </Box>
 <Text>
  A
  <Newline/>
  B
  <Newline/>
  C
 </Text>
</Box>
// A
// X B
// C

<Box alignItems="flex-end">
 <Box marginRight={1}>
  <Text>X</Text>
 </Box>
 <Text>
  A
  <Newline/>
  B
  <Newline/>
  C
 </Text>
</Box>
// A
// B
// X C
alignSelf
Type: string
Default: auto
Allowed values: auto flex-start center flex-end

See align-self.

<Box height={3}>
 <Box alignSelf="flex-start">
  <Text>X</Text>
 </Box>
</Box>
// X
//
//

<Box height={3}>
 <Box alignSelf="center">
  <Text>X</Text>
 </Box>
</Box>
//
// X
//

<Box height={3}>
 <Box alignSelf="flex-end">
  <Text>X</Text>
 </Box>
</Box>
//
//
// X
justifyContent
Type: string
Allowed values: flex-start center flex-end space-between space-around space-evenly

See justify-content.

<Box justifyContent="flex-start">
 <Text>X</Text>
</Box>
// [X ]

<Box justifyContent="center">
 <Text>X</Text>
</Box>
// [ X ]

<Box justifyContent="flex-end">
 <Text>X</Text>
</Box>
// [ X]

<Box justifyContent="space-between">
 <Text>X</Text>
 <Text>Y</Text>
</Box>
// [X Y]

<Box justifyContent="space-around">
 <Text>X</Text>
 <Text>Y</Text>
</Box>
// [ X Y ]

<Box justifyContent="space-evenly">
 <Text>X</Text>
 <Text>Y</Text>
</Box>
// [ X Y ]
Visibility
display
Type: string
Allowed values: flex none
Default: flex

Set this property to none to hide the element.

overflowX
Type: string
Allowed values: visible hidden
Default: visible

Behavior for an element's overflow in horizontal direction.

overflowY
Type: string
Allowed values: visible hidden
Default: visible

Behavior for an element's overflow in vertical direction.

overflow
Type: string
Allowed values: visible hidden
Default: visible

Shortcut for setting overflowX and overflowY at the same time.

Borders
borderStyle
Type: string
Allowed values: single double round bold singleDouble doubleSingle classic | BoxStyle

Add a border with a specified style. If borderStyle is undefined (which it is by default), no border will be added. Ink uses border styles from cli-boxes module.

<Box flexDirection="column">
 <Box>
  <Box borderStyle="single" marginRight={2}>
   <Text>single</Text>
  </Box>

  <Box borderStyle="double" marginRight={2}>
   <Text>double</Text>
  </Box>

  <Box borderStyle="round" marginRight={2}>
   <Text>round</Text>
  </Box>

  <Box borderStyle="bold">
   <Text>bold</Text>
  </Box>
 </Box>

 <Box marginTop={1}>
  <Box borderStyle="singleDouble" marginRight={2}>
   <Text>singleDouble</Text>
  </Box>

  <Box borderStyle="doubleSingle" marginRight={2}>
   <Text>doubleSingle</Text>
  </Box>

  <Box borderStyle="classic">
   <Text>classic</Text>
  </Box>
 </Box>
</Box>

Alternatively, pass a custom border style like so:

<Box
 borderStyle={{
  topLeft: '‚Üò',
  top: '‚Üì',
  topRight: '‚Üô',
  left: '‚Üí',
  bottomLeft: '‚Üó',
  bottom: '‚Üë',
  bottomRight: '‚Üñ',
  right: '‚Üê'
 }}
>
 <Text>Custom</Text>
</Box>
See example in examples/borders.

borderColor
Type: string

Change border color. Shorthand for setting borderTopColor, borderRightColor, borderBottomColor and borderLeftColor.

<Box borderStyle="round" borderColor="green">
 <Text>Green Rounded Box</Text>
</Box>

borderTopColor
Type: string

Change top border color. Accepts the same values as color in <Text> component.

<Box borderStyle="round" borderTopColor="green">
 <Text>Hello world</Text>
</Box>
borderRightColor
Type: string

Change right border color. Accepts the same values as color in <Text> component.

<Box borderStyle="round" borderRightColor="green">
 <Text>Hello world</Text>
</Box>
borderRightColor
Type: string

Change right border color. Accepts the same values as color in <Text> component.

<Box borderStyle="round" borderRightColor="green">
 <Text>Hello world</Text>
</Box>
borderBottomColor
Type: string

Change bottom border color. Accepts the same values as color in <Text> component.

<Box borderStyle="round" borderBottomColor="green">
 <Text>Hello world</Text>
</Box>
borderLeftColor
Type: string

Change left border color. Accepts the same values as color in <Text> component.

<Box borderStyle="round" borderLeftColor="green">
 <Text>Hello world</Text>
</Box>
borderDimColor
Type: boolean
Default: false

Dim the border color. Shorthand for setting borderTopDimColor, borderBottomDimColor, borderLeftDimColor and borderRightDimColor.

<Box borderStyle="round" borderDimColor>
 <Text>Hello world</Text>
</Box>
borderTopDimColor
Type: boolean
Default: false

Dim the top border color.

<Box borderStyle="round" borderTopDimColor>
 <Text>Hello world</Text>
</Box>
borderBottomDimColor
Type: boolean
Default: false

Dim the bottom border color.

<Box borderStyle="round" borderBottomDimColor>
 <Text>Hello world</Text>
</Box>
borderLeftDimColor
Type: boolean
Default: false

Dim the left border color.

<Box borderStyle="round" borderLeftDimColor>
 <Text>Hello world</Text>
</Box>
borderRightDimColor
Type: boolean
Default: false

Dim the right border color.

<Box borderStyle="round" borderRightDimColor>
 <Text>Hello world</Text>
</Box>
borderTop
Type: boolean
Default: true

Determines whether top border is visible.

borderRight
Type: boolean
Default: true

Determines whether right border is visible.

borderBottom
Type: boolean
Default: true

Determines whether bottom border is visible.

borderLeft
Type: boolean
Default: true

Determines whether left border is visible.

<Newline>
Adds one or more newline (\n) characters. Must be used within <Text> components.

count
Type: number
Default: 1

Number of newlines to insert.

import {render, Text, Newline} from 'ink';

const Example = () => (
 <Text>
  <Text color="green">Hello</Text>
  <Newline />
  <Text color="red">World</Text>
 </Text>
);

render(<Example />);
Output:

Hello
World
<Spacer>
A flexible space that expands along the major axis of its containing layout. It's useful as a shortcut for filling all the available spaces between elements.

For example, using <Spacer> in a <Box> with default flex direction (row) will position "Left" on the left side and will push "Right" to the right side.

import {render, Box, Text, Spacer} from 'ink';

const Example = () => (
 <Box>
  <Text>Left</Text>
  <Spacer />
  <Text>Right</Text>
 </Box>
);

render(<Example />);
In a vertical flex direction (column), it will position "Top" to the top of the container and push "Bottom" to the bottom of it. Note, that container needs to be tall to enough to see this in effect.

import {render, Box, Text, Spacer} from 'ink';

const Example = () => (
 <Box flexDirection="column" height={10}>
  <Text>Top</Text>
  <Spacer />
  <Text>Bottom</Text>
 </Box>
);

render(<Example />);
<Static>
<Static> component permanently renders its output above everything else. It's useful for displaying activity like completed tasks or logs - things that are not changing after they're rendered (hence the name "Static").

It's preferred to use <Static> for use cases like these, when you can't know or control the amount of items that need to be rendered.

For example, Tap uses <Static> to display a list of completed tests. Gatsby uses it to display a list of generated pages, while still displaying a live progress bar.

import React, {useState, useEffect} from 'react';
import {render, Static, Box, Text} from 'ink';

const Example = () => {
 const [tests, setTests] = useState([]);

 useEffect(() => {
  let completedTests = 0;
  let timer;

  const run = () => {
   // Fake 10 completed tests
   if (completedTests++ < 10) {
    setTests(previousTests => [
     ...previousTests,
     {
      id: previousTests.length,
      title: `Test #${previousTests.length + 1}`
     }
    ]);

    timer = setTimeout(run, 100);
   }
  };

  run();

  return () => {
   clearTimeout(timer);
  };
 }, []);

 return (
  <>
   {/* This part will be rendered once to the terminal */}
   <Static items={tests}>
    {test => (
     <Box key={test.id}>
      <Text color="green">‚úî {test.title}</Text>
     </Box>
    )}
   </Static>

   {/* This part keeps updating as state changes */}
   <Box marginTop={1}>
    <Text dimColor>Completed tests: {tests.length}</Text>
   </Box>
  </>
 );
};

render(<Example />);
Note: <Static> only renders new items in items prop and ignores items that were previously rendered. This means that when you add new items to items array, changes you make to previous items will not trigger a rerender.

See examples/static for an example usage of <Static> component.

items
Type: Array

Array of items of any type to render using a function you pass as a component child.

style
Type: object

Styles to apply to a container of child elements. See <Box> for supported properties.

<Static items={...} style={{padding: 1}}>
 {...}
</Static>
children(item)
Type: Function

Function that is called to render every item in items array. First argument is an item itself and second argument is index of that item in items array.

Note that key must be assigned to the root component.

<Static items={['a', 'b', 'c']}>
 {(item, index) => {
  // This function is called for every item in ['a', 'b', 'c']
  // `item` is 'a', 'b', 'c'
  // `index` is 0, 1, 2
  return (
   <Box key={index}>
    <Text>Item: {item}</Text>
   </Box>
  );
 }}
</Static>
<Transform>
Transform a string representation of React components before they are written to output. For example, you might want to apply a gradient to text, add a clickable link or create some text effects. These use cases can't accept React nodes as input, they are expecting a string. That's what <Transform> component does, it gives you an output string of its child components and lets you transform it in any way.

Note: <Transform> must be applied only to <Text> children components and shouldn't change the dimensions of the output, otherwise layout will be incorrect.

import {render, Transform} from 'ink';

const Example = () => (
 <Transform transform={output => output.toUpperCase()}>
  <Text>Hello World</Text>
 </Transform>
);

render(<Example />);
Since transform function converts all characters to upper case, final output that's rendered to the terminal will be "HELLO WORLD", not "Hello World".

When the output wraps to multiple lines, it can be helpful to know which line is being processed.

For example, to implement a hanging indent component, you can indent all the lines except for the first.

import {render, Transform} from 'ink';

const HangingIndent = ({content, indent = 4, children, ...props}) => (
 <Transform
  transform={(line, index) =>
   index === 0 ? line : ' '.repeat(indent) + line
  }
  {...props}
 >
  {children}
 </Transform>
);

const text =
 'WHEN I WROTE the following pages, or rather the bulk of them, ' +
 'I lived alone, in the woods, a mile from any neighbor, in a ' +
 'house which I had built myself, on the shore of Walden Pond, ' +
 'in Concord, Massachusetts, and earned my living by the labor ' +
 'of my hands only. I lived there two years and two months. At ' +
 'present I am a sojourner in civilized life again.';

// Other text properties are allowed as well
render(
 <HangingIndent bold dimColor indent={4}>
  {text}
 </HangingIndent>
);
transform(outputLine, index)
Type: Function

Function which transforms children output. It accepts children and must return transformed children too.

children
Type: string

Output of child components.

index
Type: number

The zero-indexed line number of the line currently being transformed.

Hooks
useInput(inputHandler, options?)
This hook is used for handling user input. It's a more convenient alternative to using useStdin and listening to data events. The callback you pass to useInput is called for each character when user enters any input. However, if user pastes text and it's more than one character, the callback will be called only once and the whole string will be passed as input. You can find a full example of using useInput at examples/use-input.

import {useInput} from 'ink';

const UserInput = () => {
 useInput((input, key) => {
  if (input === 'q') {
   // Exit program
  }

  if (key.leftArrow) {
   // Left arrow key pressed
  }
 });

 return ‚Ä¶
};
inputHandler(input, key)
Type: Function

The handler function that you pass to useInput receives two arguments:

input
Type: string

The input that the program received.

key
Type: object

Handy information about a key that was pressed.

key.leftArrow
key.rightArrow
key.upArrow
key.downArrow
Type: boolean
Default: false

If an arrow key was pressed, the corresponding property will be true. For example, if user presses left arrow key, key.leftArrow equals true.

key.return
Type: boolean
Default: false

Return (Enter) key was pressed.

key.escape
Type: boolean
Default: false

Escape key was pressed.

key.ctrl
Type: boolean
Default: false

Ctrl key was pressed.

key.shift
Type: boolean
Default: false

Shift key was pressed.

key.tab
Type: boolean
Default: false

Tab key was pressed.

key.backspace
Type: boolean
Default: false

Backspace key was pressed.

key.delete
Type: boolean
Default: false

Delete key was pressed.

key.pageDown
key.pageUp
Type: boolean
Default: false

If Page Up or Page Down key was pressed, the corresponding property will be true. For example, if user presses Page Down, key.pageDown equals true.

key.meta
Type: boolean
Default: false

Meta key was pressed.

options
Type: object

isActive
Type: boolean
Default: true

Enable or disable capturing of user input. Useful when there are multiple useInput hooks used at once to avoid handling the same input several times.

useApp()
useApp is a React hook, which exposes a method to manually exit the app (unmount).

exit(error?)
Type: Function

Exit (unmount) the whole Ink app.

error
Type: Error

Optional error. If passed, waitUntilExit will reject with that error.

import {useApp} from 'ink';

const Example = () => {
 const {exit} = useApp();

 // Exit the app after 5 seconds
 useEffect(() => {
  setTimeout(() => {
   exit();
  }, 5000);
 }, []);

 return ‚Ä¶
};
useStdin()
useStdin is a React hook, which exposes stdin stream.

stdin
Type: stream.Readable
Default: process.stdin

Stdin stream passed to render() in options.stdin or process.stdin by default. Useful if your app needs to handle user input.

import {useStdin} from 'ink';

const Example = () => {
 const {stdin} = useStdin();

 return ‚Ä¶
};
isRawModeSupported
Type: boolean

A boolean flag determining if the current stdin supports setRawMode. A component using setRawMode might want to use isRawModeSupported to nicely fall back in environments where raw mode is not supported.

import {useStdin} from 'ink';

const Example = () => {
 const {isRawModeSupported} = useStdin();

 return isRawModeSupported ? (
  <MyInputComponent />
 ) : (
  <MyComponentThatDoesntUseInput />
 );
};
setRawMode(isRawModeEnabled)
Type: function

isRawModeEnabled
Type: boolean

See setRawMode. Ink exposes this function to be able to handle Ctrl+C, that's why you should use Ink's setRawMode instead of process.stdin.setRawMode.

Warning: This function will throw unless the current stdin supports setRawMode. Use isRawModeSupported to detect setRawMode support.

import {useStdin} from 'ink';

const Example = () => {
 const {setRawMode} = useStdin();

 useEffect(() => {
  setRawMode(true);

  return () => {
   setRawMode(false);
  };
 });

 return ‚Ä¶
};
useStdout()
useStdout is a React hook, which exposes stdout stream, where Ink renders your app.

stdout
Type: stream.Writable
Default: process.stdout

import {useStdout} from 'ink';

const Example = () => {
 const {stdout} = useStdout();

 return ‚Ä¶
};
write(data)
Write any string to stdout, while preserving Ink's output. It's useful when you want to display some external information outside of Ink's rendering and ensure there's no conflict between the two. It's similar to <Static>, except it can't accept components, it only works with strings.

data
Type: string

Data to write to stdout.

import {useStdout} from 'ink';

const Example = () => {
 const {write} = useStdout();

 useEffect(() => {
  // Write a single message to stdout, above Ink's output
  write('Hello from Ink to stdout\n');
 }, []);

 return ‚Ä¶
};
See additional usage example in examples/use-stdout.

useStderr()
useStderr is a React hook, which exposes stderr stream.

stderr
Type: stream.Writable
Default: process.stderr

Stderr stream.

import {useStderr} from 'ink';

const Example = () => {
 const {stderr} = useStderr();

 return ‚Ä¶
};
write(data)
Write any string to stderr, while preserving Ink's output.

It's useful when you want to display some external information outside of Ink's rendering and ensure there's no conflict between the two. It's similar to <Static>, except it can't accept components, it only works with strings.

data
Type: string

Data to write to stderr.

import {useStderr} from 'ink';

const Example = () => {
 const {write} = useStderr();

 useEffect(() => {
  // Write a single message to stderr, above Ink's output
  write('Hello from Ink to stderr\n');
 }, []);

 return ‚Ä¶
};
useFocus(options?)
Component that uses useFocus hook becomes "focusable" to Ink, so when user presses Tab, Ink will switch focus to this component. If there are multiple components that execute useFocus hook, focus will be given to them in the order that these components are rendered in. This hook returns an object with isFocused boolean property, which determines if this component is focused or not.

options
autoFocus
Type: boolean
Default: false

Auto focus this component, if there's no active (focused) component right now.

isActive
Type: boolean
Default: true

Enable or disable this component's focus, while still maintaining its position in the list of focusable components. This is useful for inputs that are temporarily disabled.

id
Type: string
Required: false

Set a component's focus ID, which can be used to programmatically focus the component. This is useful for large interfaces with many focusable elements, to avoid having to cycle through all of them.

import {render, useFocus, Text} from 'ink';

const Example = () => {
 const {isFocused} = useFocus();

 return <Text>{isFocused ? 'I am focused' : 'I am not focused'}</Text>;
};

render(<Example />);
See example in examples/use-focus and examples/use-focus-with-id.

useFocusManager()
This hook exposes methods to enable or disable focus management for all components or manually switch focus to next or previous components.

enableFocus()
Enable focus management for all components.

Note: You don't need to call this method manually, unless you've disabled focus management. Focus management is enabled by default.

import {useFocusManager} from 'ink';

const Example = () => {
 const {enableFocus} = useFocusManager();

 useEffect(() => {
  enableFocus();
 }, []);

 return ‚Ä¶
};
disableFocus()
Disable focus management for all components. Currently active component (if there's one) will lose its focus.

import {useFocusManager} from 'ink';

const Example = () => {
 const {disableFocus} = useFocusManager();

 useEffect(() => {
  disableFocus();
 }, []);

 return ‚Ä¶
};
focusNext()
Switch focus to the next focusable component. If there's no active component right now, focus will be given to the first focusable component. If active component is the last in the list of focusable components, focus will be switched to the first active component.

Note: Ink calls this method when user presses Tab.

import {useFocusManager} from 'ink';

const Example = () => {
 const {focusNext} = useFocusManager();

 useEffect(() => {
  focusNext();
 }, []);

 return ‚Ä¶
};
focusPrevious()
Switch focus to the previous focusable component. If there's no active component right now, focus will be given to the first focusable component. If active component is the first in the list of focusable components, focus will be switched to the last component.

Note: Ink calls this method when user presses Shift+Tab.

import {useFocusManager} from 'ink';

const Example = () => {
 const {focusPrevious} = useFocusManager();

 useEffect(() => {
  focusPrevious();
 }, []);

 return ‚Ä¶
};
focus(id)
id
Type: string

Switch focus to the component with the given id. If there's no component with that ID, focus will be given to the next focusable component.

import {useFocusManager, useInput} from 'ink';

const Example = () => {
 const {focus} = useFocusManager();

 useInput(input => {
  if (input === 's') {
   // Focus the component with focus ID 'someId'
   focus('someId');
  }
 });

 return ‚Ä¶
};
API
render(tree, options?)
Returns: Instance

Mount a component and render the output.

tree
Type: ReactElement

options
Type: object

stdout
Type: stream.Writable
Default: process.stdout

Output stream where app will be rendered.

stdin
Type: stream.Readable
Default: process.stdin

Input stream where app will listen for input.

exitOnCtrlC
Type: boolean
Default: true

Configure whether Ink should listen to Ctrl+C keyboard input and exit the app. This is needed in case process.stdin is in raw mode, because then Ctrl+C is ignored by default and process is expected to handle it manually.

patchConsole
Type: boolean
Default: true

Patch console methods to ensure console output doesn't mix with Ink output. When any of console.* methods are called (like console.log()), Ink intercepts their output, clears main output, renders output from the console method and then rerenders main output again. That way both are visible and are not overlapping each other.

This functionality is powered by patch-console, so if you need to disable Ink's interception of output but want to build something custom, you can use it.

debug
Type: boolean
Default: false

If true, each update will be rendered as a separate output, without replacing the previous one.

Instance
This is the object that render() returns.

rerender(tree)
Replace previous root node with a new one or update props of the current root node.

tree
Type: ReactElement

// Update props of the root node
const {rerender} = render(<Counter count={1} />);
rerender(<Counter count={2} />);

// Replace root node
const {rerender} = render(<OldCounter />);
rerender(<NewCounter />);
unmount()
Manually unmount the whole Ink app.

const {unmount} = render(<MyApp />);
unmount();
waitUntilExit()
Returns a promise, which resolves when app is unmounted.

const {unmount, waitUntilExit} = render(<MyApp />);

setTimeout(unmount, 1000);

await waitUntilExit(); // resolves after `unmount()` is called
clear()
Clear output.

const {clear} = render(<MyApp />);
clear();
measureElement(ref)
Measure the dimensions of a particular <Box> element. It returns an object with width and height properties. This function is useful when your component needs to know the amount of available space it has. You could use it when you need to change the layout based on the length of its content.

Note: measureElement() returns correct results only after the initial render, when layout has been calculated. Until then, width and height equal to zero. It's recommended to call measureElement() in a useEffect hook, which fires after the component has rendered.

ref
Type: MutableRef

A reference to a <Box> element captured with a ref property. See Refs for more information on how to capture references.

import {render, measureElement, Box, Text} from 'ink';

const Example = () => {
 const ref = useRef();

 useEffect(() => {
  const {width, height} = measureElement(ref.current);
  // width = 100, height = 1
 }, []);

 return (
  <Box width={100}>
   <Box ref={ref}>
    <Text>This box will stretch to 100 width</Text>
   </Box>
  </Box>
 );
};

render(<Example />);
Testing
Ink components are simple to test with ink-testing-library. Here's a simple example that checks how component is rendered:

import React from 'react';
import {Text} from 'ink';
import {render} from 'ink-testing-library';

const Test = () => <Text>Hello World</Text>;
const {lastFrame} = render(<Test />);

lastFrame() === 'Hello World'; //=> true
Check out ink-testing-library for more examples and full documentation.

Using React Devtools

Ink supports React Devtools out-of-the-box. To enable integration with React Devtools in your Ink-based CLI, first ensure you have installed the optional react-devtools-core dependency, and then run your app with DEV=true environment variable:

DEV=true my-cli
Then, start React Devtools itself:

npx react-devtools
After it starts up, you should see the component tree of your CLI. You can even inspect and change the props of components, and see the results immediatelly in the CLI, without restarting it.

Note: You must manually quit your CLI via Ctrl+C after you're done testing.

Useful Components
ink-text-input - Text input.
ink-spinner - Spinner.
ink-select-input - Select (dropdown) input.
ink-link - Link.
ink-gradient - Gradient color.
ink-big-text - Awesome text.
ink-image - Display images inside the terminal.
ink-tab - Tab.
ink-color-pipe - Create color text with simpler style strings.
ink-multi-select - Select one or more values from a list
ink-divider - A divider.
ink-progress-bar - Progress bar.
ink-table - Table.
ink-ascii - Awesome text component with more font choices, based on Figlet.
ink-markdown - Render syntax highlighted Markdown.
ink-quicksearch-input - Select component with fast quicksearch-like navigation.
ink-confirm-input - Yes/No confirmation input.
ink-syntax-highlight - Code syntax highlighting.
ink-form - Form.
ink-task-list - Task list.
ink-spawn - Spawn child processes.
Useful Hooks
ink-use-stdout-dimensions - Subscribe to stdout dimensions.

The examples directory contains a set of real examples. You can run them with:

npm run example examples/[example name]
# e.g. npm run example examples/borders
Jest - Implementation of basic Jest UI (live demo).
Counter - Simple counter that increments every 100ms (live demo).
Form with validation - Manage form state using Final Form.
Borders - Add borders to <Box> component.
Suspense - Use React Suspense.
Table - Render a table with multiple columns and rows.
Focus management - Use useFocus hook to manage focus between components.
User input - Listen to user input.
Write to stdout - Write to stdout bypassing main Ink output.
Write to stderr - Write to stderr bypassing main Ink output.
Static - Use <Static> to render permanent output.
Child process - Render output from a child process.
Maintainers
Vadim Demedes
Sindre Sorhus


Listr.

listr
GitHub Actions Coverage Status

Terminal task list

Install
$ npm install --save listr
Usage
import execa from 'execa';
import Listr from 'listr';

const tasks = new Listr([
 {
  title: 'Git',
  task: () => {
   return new Listr([
    {
     title: 'Checking git status',
     task: () => execa.stdout('git', ['status', '--porcelain']).then(result => {
      if (result !== '') {
       throw new Error('Unclean working tree. Commit or stash changes first.');
      }
     })
    },
    {
     title: 'Checking remote history',
     task: () => execa.stdout('git', ['rev-list', '--count', '--left-only', '@{u}...HEAD']).then(result => {
      if (result !== '0') {
       throw new Error('Remote history differ. Please pull changes.');
      }
     })
    }
   ], {concurrent: true});
  }
 },
 {
  title: 'Install package dependencies with Yarn',
  task: (ctx, task) => execa('yarn')
   .catch(() => {
    ctx.yarn = false;

    task.skip('Yarn not available, install it via `npm install -g yarn`');
   })
 },
 {
  title: 'Install package dependencies with npm',
  enabled: ctx => ctx.yarn === false,
  task: () => execa('npm', ['install'])
 },
 {
  title: 'Run tests',
  task: () => execa('npm', ['test'])
 },
 {
  title: 'Publish package',
  task: () => execa('npm', ['publish'])
 }
]);

tasks.run().catch(err => {
 console.error(err);
});
Task
A task can return different values. If a task returns, it means the task was completed successfully. If a task throws an error, the task failed.

const tasks = new Listr([
 {
  title: 'Success',
  task: () => 'Foo'
 },
 {
  title: 'Failure',
  task: () => {
   throw new Error('Bar')
  }
 }
]);
Promises
A task can also be async by returning a Promise. If the promise resolves, the task completed successfully, if it rejects, the task failed.

const tasks = new Listr([
 {
  title: 'Success',
  task: () => Promise.resolve('Foo')
 },
 {
  title: 'Failure',
  task: () => Promise.reject(new Error('Bar'))
 }
]);
Tip: Always reject a promise with some kind of Error object.

Observable

A task can also return an Observable. The thing about observables is that it can emit multiple values and can be used to show the output of the task. Please note that only the last line of the output is rendered.

import {Observable} from 'rxjs';

const tasks = new Listr([
 {
  title: 'Success',
  task: () => {
   return new Observable(observer => {
    observer.next('Foo');

    setTimeout(() => {
     observer.next('Bar');
    }, 2000);

    setTimeout(() => {
     observer.complete();
    }, 4000);
   });
  }
 },
 {
  title: 'Failure',
  task: () => Promise.reject(new Error('Bar'))
 }
]);
You can use the Observable package you feel most comfortable with, like RxJS or zen-observable.

Streams
It's also possible to return a ReadableStream. The stream will be converted to an Observable and handled as such.

import fs from 'fs';
import split from 'split';

const list = new Listr([
 {
  title: 'File',
  task: () => fs.createReadStream('data.txt', 'utf8')
   .pipe(split(/\r?\n/, null, {trailing: false}))
 }
]);
Skipping tasks

Optionally specify a skip function to determine whether a task can be skipped.

If the skip function returns a truthy value or a Promise that resolves to a truthy value then the task will be skipped.
If the returned value is a string it will be displayed as the reason for skipping the task.
If the skip function returns a falsey value or a Promise that resolves to a falsey value then the task will be executed as normal.
If the skip function throws or returns a Promise that rejects, the task (and the whole build) will fail.
const tasks = new Listr([
 {
  title: 'Task 1',
  task: () => Promise.resolve('Foo')
 },
 {
  title: 'Can be skipped',
  skip: () => {
   if (Math.random() > 0.5) {
    return 'Reason for skipping';
   }
  },
  task: () => 'Bar'
 },
 {
  title: 'Task 3',
  task: () => Promise.resolve('Bar')
 }
]);
Tip: You can still skip a task while already executing the task function with the task object.

Enabling tasks
By default, every task is enabled which means that every task will be executed. However, it's also possible to provide an enabled function that returns whether the task should be executed or not.

const tasks = new Listr([
 {
  title: 'Install package dependencies with Yarn',
  task: (ctx, task) => execa('yarn')
   .catch(() => {
    ctx.yarn = false;

    task.skip('Yarn not available, install it via `npm install -g yarn`');
   })
 },
 {
  title: 'Install package dependencies with npm',
  enabled: ctx => ctx.yarn === false,
  task: () => execa('npm', ['install'])
 }
]);
In the above example, we try to run yarn first, if that fails we will fall back to npm. However, at first only the Yarn task will be visible. Because we set the yarn flag of the context object to false, the second task will automatically be enabled and will be executed.

Note: This does not work in combination with concurrent tasks.

Context
A context object is passed as argument to every skip and task function. This allows you to create composable tasks and change the behaviour of your task depending on previous results.

const tasks = new Listr([
 {
  title: 'Task 1',
  skip: ctx => ctx.foo === 'bar',
  task: () => Promise.resolve('Foo')
 },
 {
  title: 'Can be skipped',
  skip: () => {
   if (Math.random() > 0.5) {
    return 'Reason for skipping';
   }
  },
  task: ctx => {
   ctx.unicorn = 'rainbow';
  }
 },
 {
  title: 'Task 3',
  task: ctx => Promise.resolve(`${ctx.foo} ${ctx.bar}`)
 }
]);

tasks.run({
 foo: 'bar'
}).then(ctx => {
 console.log(ctx);
 //=> {foo: 'bar', unicorn: 'rainbow'}
});
Task object
A special task object is passed as second argument to the task function. This task object lets you change the title while running your task, you can skip it depending on some results or you can update the task's output.

const tasks = new Listr([
 {
  title: 'Install package dependencies with Yarn',
  task: (ctx, task) => execa('yarn')
   .catch(() => {
    ctx.yarn = false;

    task.title = `${task.title} (or not)`;
    task.skip('Yarn not available');
   })
 },
 {
  title: 'Install package dependencies with npm',
  skip: ctx => ctx.yarn !== false && 'Dependencies already installed with Yarn',
  task: (ctx, task) => {
   task.output = 'Installing dependencies...';

   return execa('npm', ['install'])
  }
 }
]);

tasks.run();
Custom renderers
It's possible to write custom renderers for Listr. A renderer is an ES6 class that accepts the tasks that it should render, and the Listr options object. It has two methods, the render method which is called when it should start rendering, and the end method. The end method is called when all the tasks are completed or if a task failed. If a task failed, the error object is passed in via an argument.

class CustomRenderer {

 constructor(tasks, options) { }

 static get nonTTY() {
  return false;
 }

 render() { }

 end(err) { }
}

module.exports = CustomRenderer;
Note: A renderer is not passed through to the subtasks, only to the main task. It is up to you to handle that case.

The nonTTY property returns a boolean indicating if the renderer supports non-TTY environments. The default for this property is false if you do not implement it.

Observables
Every task is an observable. The task emits three different events and every event is an object with a type property.

The state of the task has changed (STATE).
The task outputted data (DATA).
The task returns a subtask list (SUBTASKS).
The task's title changed (TITLE).
The task became enabled or disabled (ENABLED).
This allows you to flexibly build your UI. Let's render every task that starts executing.

class CustomRenderer {

 constructor(tasks, options) {
  this._tasks = tasks;
  this._options = Object.assign({}, options);
 }

 static get nonTTY() {
  return true;
 }

 render() {
  for (const task of this._tasks) {
   task.subscribe(event => {
    if (event.type === 'STATE' && task.isPending()) {
     console.log(`${task.title} [started]`);
    }
   });
  }
 }

 end(err) { }
}

module.exports = CustomRenderer;
If you want more complex examples, take a look at the update and verbose renderers.

API
Listr([tasks], [options])
tasks
Type: object[]

List of tasks.

title
Type: string

Title of the task.

task
Type: Function

Task function.

skip
Type: Function

Skip function. Read more about skipping tasks.

options
Any renderer specific options. For instance, when using the update-renderer, you can pass in all of its options.

concurrent
Type: boolean number
Default: false

Set to true if you want to run tasks in parallel, set to a number to control the concurrency. By default it runs tasks sequentially.

exitOnError
Type: boolean
Default: true

Set to false if you don't want to stop the execution of other tasks when one or more tasks fail.

renderer
Type: string object
Default: default
Options: default verbose silent

Renderer that should be used. You can either pass in the name of the known renderer, or a class of a custom renderer.

nonTTYRenderer
Type: string object
Default: verbose

The renderer that should be used if the main renderer does not support TTY environments. You can either pass in the name of the renderer, or a class of a custom renderer.

Instance
add(task)
Returns the instance.

task
Type: object object[]

Task object or multiple task objects.

run([context])
Start executing the tasks. Returns a Promise for the context object.

context
Type: object
Default: Object.create(null)

Initial context object.

Related
ora - Elegant terminal spinner
cli-spinners - Spinners for use in the terminal
License
MIT ¬© Sam Verschueren

Get professional support for this package with a Tidelift subscription
Tidelift helps make open source sustainable for maintainers while giving companies
assurances about security, maintenance, and licensing for their dependencies.



Conf.


conf
Simple config handling for your app or module

All you have to care about is what to persist. This module will handle all the dull details like where and how.

It does not support multiple processes writing to the same store.
I initially made this tool to let command-line tools persist some data.

If you need this for Electron, check out electron-store instead.

Install
npm install conf
Usage
import Conf from 'conf';

const config = new Conf({projectName: 'foo'});

config.set('unicorn', 'ü¶Ñ');
console.log(config.get('unicorn'));
//=> 'ü¶Ñ'

// Use dot-notation to access nested properties
config.set('foo.bar', true);
console.log(config.get('foo'));
//=> {bar: true}

config.delete('unicorn');
console.log(config.get('unicorn'));
//=> undefined
Or create a subclass.

API
Changes are written to disk atomically, so if the process crashes during a write, it will not corrupt the existing config.

Conf(options?)
Returns a new instance.

options
Type: object

defaults
Type: object

Default values for the config items.

Note: The values in defaults will overwrite the default key in the schema option.

schema
Type: object

JSON Schema to validate your config data.

This will be the properties object of the JSON schema. That is, define schema as an object where each key is the name of your data's property and each value is a JSON schema used to validate that property.

Example:

import Conf from 'conf';

const schema = {
 foo: {
  type: 'number',
  maximum: 100,
  minimum: 1,
  default: 50
 },
 bar: {
  type: 'string',
  format: 'url'
 }
};

const config = new Conf({
 projectName: 'foo',
 schema
});

console.log(config.get('foo'));
//=> 50

config.set('foo', '1');
// [Error: Config schema violation: `foo` should be number]
Note: The default value will be overwritten by the defaults option if set.

rootSchema
Type: object

Top-level properties for the schema, excluding properties field.

Example:

import Conf from 'conf';

const store = new Conf({
 projectName: 'foo',
 schema: { /* ‚Ä¶ */ },
 rootSchema: {
  additionalProperties: false
 }
});
ajvOptions
Type: object

Options passed to AJV.

Under the hood, the JSON Schema validator ajv is used to validate your config. We use JSON Schema draft-2020-12 and support all validation keywords and formats.

Note: By default, allErrors and useDefaults are both set to true, but can be overridden.

Example:

import Conf from 'conf';

const store = new Conf({
 projectName: 'foo',
 schema: { /* ‚Ä¶ */ },
 rootSchema: {
  additionalProperties: false
 },
 ajvOptions: {
  removeAdditional: true
 }
});
migrations
Type: object

Important: I cannot provide support for this feature. It has some known bugs. I have no plans to work on it, but pull requests are welcome.

You can use migrations to perform operations to the store whenever a project version is upgraded.

The migrations object should consist of a key-value pair of 'version': handler. The version can also be a semver range.

Example:

import Conf from 'conf';

const store = new Conf({
 projectName: 'foo',
 projectVersion: ‚Ä¶,
 migrations: {
  '0.0.1': store => {
   store.set('debugPhase', true);
  },
  '1.0.0': store => {
   store.delete('debugPhase');
   store.set('phase', '1.0.0');
  },
  '1.0.2': store => {
   store.set('phase', '1.0.2');
  },
  '>=2.0.0': store => {
   store.set('phase', '>=2.0.0');
  }
 }
});
Note: The version the migrations use refers to the project version by default. If you want to change this behavior, specify the projectVersion option.

beforeEachMigration
Type: Function
Default: undefined

The given callback function will be called before each migration step.

The function receives the store as the first argument and a context object as the second argument with the following properties:

fromVersion - The version the migration step is being migrated from.
toVersion - The version the migration step is being migrated to.
finalVersion - The final version after all the migrations are applied.
versions - All the versions with a migration step.
This can be useful for logging purposes, preparing migration data, etc.

Example:

import Conf from 'conf';

console.log = someLogger.log;

const mainConfig = new Conf({
 projectName: 'foo1',
 beforeEachMigration: (store, context) => {
  console.log(`[main-config] migrate from ${context.fromVersion} ‚Üí ${context.toVersion}`);
 },
 migrations: {
  '0.4.0': store => {
   store.set('debugPhase', true);
  },
 }
});

const secondConfig = new Conf({
 projectName: 'foo2',
 beforeEachMigration: (store, context) => {
  console.log(`[second-config] migrate from ${context.fromVersion} ‚Üí ${context.toVersion}`);
 },
 migrations: {
  '1.0.1': store => {
   store.set('debugPhase', true);
  },
 }
});
configName
Type: string
Default: 'config'

Name of the config file (without extension).

Useful if you need multiple config files for your app or module. For example, different config files between two major versions.

projectName
Type: string

Required unless you specify the cwd option.

You can fetch the name field from package.json.

projectVersion
Type: string

Required if you specify the migration option.

You can fetch the version field from package.json.

cwd
Type: string
Default: System default user config directory

You most likely don't need this. Please don't use it unless you really have to. By default, it will pick the optimal location by adhering to system conventions. You are very likely to get this wrong and annoy users.

Overrides projectName.

The only use-case I can think of is having the config located in the app directory or on some external storage.

encryptionKey
Type: string | Uint8Array | TypedArray | DataView
Default: undefined

Note that this is not intended for security purposes, since the encryption key would be easily found inside a plain-text Node.js app.

Its main use is for obscurity. If a user looks through the config directory and finds the config file, since it's just a JSON file, they may be tempted to modify it. By providing an encryption key, the file will be obfuscated, which should hopefully deter any users from doing so.

When specified, the store will be encrypted using the aes-256-cbc encryption algorithm.

fileExtension
Type: string
Default: 'json'

Extension of the config file.

You would usually not need this, but could be useful if you want to interact with a file with a custom file extension that can be associated with your app. These might be simple save/export/preference files that are intended to be shareable or saved outside of the app.

clearInvalidConfig
Type: boolean
Default: false

The config is cleared if reading the config file causes a SyntaxError. This is a good behavior for unimportant data, as the config file is not intended to be hand-edited, so it usually means the config is corrupt and there's nothing the user can do about it anyway. However, if you let the user edit the config file directly, mistakes might happen and it could be more useful to throw an error when the config is invalid instead of clearing.

serialize
Type: Function
Default: value => JSON.stringify(value, null, '\t')

Function to serialize the config object to a UTF-8 string when writing the config file.

You would usually not need this, but it could be useful if you want to use a format other than JSON.

deserialize
Type: Function
Default: JSON.parse

Function to deserialize the config object from a UTF-8 string when reading the config file.

You would usually not need this, but it could be useful if you want to use a format other than JSON.

projectSuffix
Type: string
Default: 'nodejs'

You most likely don't need this. Please don't use it unless you really have to.

Suffix appended to projectName during config file creation to avoid name conflicts with native apps.

You can pass an empty string to remove the suffix.

For example, on macOS, the config file will be stored in the ~/Library/Preferences/foo-nodejs directory, where foo is the projectName.

accessPropertiesByDotNotation
Type: boolean
Default: true

Accessing nested properties by dot notation. For example:

import Conf from 'conf';

const config = new Conf({projectName: 'foo'});

config.set({
 foo: {
  bar: {
   foobar: 'ü¶Ñ'
  }
 }
});

console.log(config.get('foo.bar.foobar'));
//=> 'ü¶Ñ'
Alternatively, you can set this option to false so the whole string would be treated as one key.

import Conf from 'conf';

const config = new Conf({
 projectName: 'foo',
 accessPropertiesByDotNotation: false
});

config.set({
 `foo.bar.foobar`: 'ü¶Ñ'
});

console.log(config.get('foo.bar.foobar'));
//=> 'ü¶Ñ'
watch
type: boolean
Default: false

Watch for any changes in the config file and call the callback for onDidChange or onDidAnyChange if set. This is useful if there are multiple processes changing the same config file.

configFileMode
Type: number
Default: 0o666

The mode that will be used for the config file.

You would usually not need this, but it could be useful if you want to restrict the permissions of the config file. Setting a permission such as 0o600 would result in a config file that can only be accessed by the user running the program.

Note that setting restrictive permissions can cause problems if different users need to read the file. A common problem is a user running your tool with and without sudo and then not being able to access the config the second time.

Instance
You can use dot-notation in a key to access nested properties.

The instance is iterable so you can use it directly in a for‚Ä¶of loop.

.set(key, value)
Set an item.

The value must be JSON serializable. Trying to set the type undefined, function, or symbol will result in a TypeError.

.set(object)
Set multiple items at once.

.get(key, defaultValue?)
Get an item or defaultValue if the item does not exist.

Tip: To get all items, see .store.

.reset(...keys)
Reset items to their default values, as defined by the defaults or schema option.

Use .clear() to reset all items.

.has(key)
Check if an item exists.

.delete(key)
Delete an item.

.clear()
Delete all items.

This resets known items to their default values, if defined by the defaults or schema option.

.onDidChange(key, callback)
callback: (newValue, oldValue) => {}

Watches the given key, calling callback on any changes.

When a key is first set oldValue will be undefined, and when a key is deleted newValue will be undefined.

Returns a function which you can use to unsubscribe:

const unsubscribe = config.onDidChange(key, callback);

unsubscribe();
.onDidAnyChange(callback)
callback: (newValue, oldValue) => {}

Watches the whole config object, calling callback on any changes.

oldValue and newValue will be the config object before and after the change, respectively. You must compare oldValue to newValue to find out what changed.

Returns a function which you can use to unsubscribe:

const unsubscribe = config.onDidAnyChange(callback);

unsubscribe();
.size
Get the item count.

.store
Get all the config as an object or replace the current config with an object:

console.log(config.store);
//=> {name: 'John', age: 30}
config.store = {
 hello: 'world'
};
.path
Get the path to the config File.

This module is the result of everything I learned from making configstore. Mainly where the config is stored. In configstore, the config is stored in ~/.config (which is mainly a Linux convention) on all systems, while conf stores config in the system default user config directory. The ~/.config directory, it turns out, often have an incorrect permission on macOS and Windows, which has caused a lot of grief for users.

Can I use YAML or another serialization format?
The serialize and deserialize options can be used to customize the format of the config file, as long as the representation is compatible with utf8 encoding.

Example using YAML:

import Conf from 'conf';
import yaml from 'js-yaml';

const config = new Conf({
 projectName: 'foo',
 fileExtension: 'yaml',
 serialize: yaml.safeDump,
 deserialize: yaml.safeLoad
});
Related
electron-store - Simple data persistence for your Electron app or module
cache-conf - Simple cache config handling for your app or module.


Ansi-escapes.

ansi-escapes
ANSI escape codes for manipulating the terminal.

Install
npm install ansi-escapes
Usage
import ansiEscapes from 'ansi-escapes';

// Moves the cursor two rows up and to the left
process.stdout.write(ansiEscapes.cursorUp(2) + ansiEscapes.cursorLeft);
//=> '\u001B[2A\u001B[1000D'
Or use named exports...

import {cursorUp, cursorLeft} from 'ansi-escapes';

// etc, as above...
You can also use it in the browser with Xterm.js:

import ansiEscapes from 'ansi-escapes';
import {Terminal} from 'xterm';
import 'xterm/css/xterm.css';

const terminal = new Terminal({‚Ä¶});

// Moves the cursor two rows up and to the left
terminal.write(ansiEscapes.cursorUp(2) + ansiEscapes.cursorLeft);
//=> '\u001B[2A\u001B[1000D'
API
cursorTo(x, y?)
Set the absolute position of the cursor. x0 y0 is the top left of the screen.

cursorMove(x, y?)
Set the position of the cursor relative to its current position.

cursorUp(count)
Move cursor up a specific amount of rows. Default is 1.

cursorDown(count)
Move cursor down a specific amount of rows. Default is 1.

cursorForward(count)
Move cursor forward a specific amount of columns. Default is 1.

cursorBackward(count)
Move cursor backward a specific amount of columns. Default is 1.

cursorLeft
Move cursor to the left side.

cursorSavePosition
Save cursor position.

cursorRestorePosition
Restore saved cursor position.

cursorGetPosition
Get cursor position.

cursorNextLine
Move cursor to the next line.

cursorPrevLine
Move cursor to the previous line.

cursorHide
Hide cursor.

cursorShow
Show cursor.

eraseLines(count)
Erase from the current cursor position up the specified amount of rows.

eraseEndLine
Erase from the current cursor position to the end of the current line.

eraseStartLine
Erase from the current cursor position to the start of the current line.

eraseLine
Erase the entire current line.

eraseDown
Erase the screen from the current line down to the bottom of the screen.

eraseUp
Erase the screen from the current line up to the top of the screen.

eraseScreen
Erase the screen and move the cursor the top left position.

scrollUp
Scroll display up one line.

scrollDown
Scroll display down one line.

clearScreen
Clear the terminal screen. (Viewport)

clearTerminal
Clear the whole terminal, including scrollback buffer. (Not just the visible part of it)

enterAlternativeScreen
Enter the alternative screen.

exitAlternativeScreen
Exit the alternative screen, assuming enterAlternativeScreen was called before.

beep
Output a beeping sound.

link(text, url)
Create a clickable link.

Supported terminals. Use supports-hyperlinks to detect link support.

image(filePath, options?)
Display an image.

See term-img for a higher-level module.

input
Type: Buffer

Buffer of an image. Usually read in with fs.readFile().

options
Type: object

width
height
Type: string | number

The width and height are given as a number followed by a unit, or the word "auto".

N: N character cells.
Npx: N pixels.
N%: N percent of the session's width or height.
auto: The image's inherent size will be used to determine an appropriate dimension.
preserveAspectRatio
Type: boolean
Default: true

iTerm.setCwd(path?)
Type: string
Default: process.cwd()

Inform iTerm2 of the current directory to help semantic history and enable Cmd-clicking relative paths.

iTerm.annotation(message, options?)
Creates an escape code to display an "annotation" in iTerm2.

An annotation looks like this when shown:

See the iTerm Proprietary Escape Codes documentation for more information.

message
Type: string

The message to display within the annotation.

The | character is disallowed and will be stripped.

options
Type: object

length
Type: number
Default: The remainder of the line

Nonzero number of columns to annotate.

x
Type: number
Default: Cursor position

Starting X coordinate.

Must be used with y and length.

y
Type: number
Default: Cursor position

Starting Y coordinate.

Must be used with x and length.

isHidden
Type: boolean
Default: false

Create a "hidden" annotation.

Annotations created this way can be shown using the "Show Annotations" iTerm command.

Related
ansi-styles - ANSI escape codes for styling strings in the terminal.

Log-symbol.

log-symbols

Colored symbols for various log levels

Includes fallbacks for Windows CMD which only supports a limited character set.

Install
npm install log-symbols
Usage
import logSymbols from 'log-symbols';

console.log(logSymbols.success, 'Finished successfully!');
// Terminals with Unicode support:     ‚úî Finished successfully!
// Terminals without Unicode support:  ‚àö Finished successfully!
API
logSymbols
info
success
warning
error
Related
figures - Unicode symbols with Windows CMD fallbacks
py-log-symbols - Python port
log-symbols - Ruby port
guumaster/logsymbols - Golang port.


Figures.

figures
Unicode symbols with fallbacks for older terminals

and more...

Terminals such as Windows Console Host (and CMD) only support a limited character set.

Install
npm install figures
Usage
import figures, {mainSymbols, fallbackSymbols, replaceSymbols} from 'figures';

console.log(figures.tick);
// On terminals with Unicode symbols: ‚úî
// On other terminals: ‚àö

console.log(mainSymbols.tick);
// On all terminals: ‚úî

console.log(fallbackSymbols.tick);
// On all terminals: ‚àö

console.log(replaceSymbols('‚úî check'));
// On terminals with Unicode symbols: ‚úî check
// On other terminals: ‚àö check
API
figures (default export)
Type: object

Symbols to use on any terminal.

mainSymbols
Symbols to use when the terminal supports Unicode symbols.

fallbackSymbols
Symbols to use when the terminal does not support Unicode symbols.

replaceSymbols(string, options?)
Returns the input with replaced fallback symbols if the terminal has poor Unicode support.

All the below figures are attached to the default export as shown in the example above.

string
Type: string

String where the Unicode symbols will be replaced with fallback symbols depending on the terminal.

options
Type: object

useFallback
Type: boolean
Default: true if the terminal has poor Unicode support

Whether to replace symbols with fallbacks.

This can be set to true to always use fallback symbols, whether the terminal has poor Unicode support or not.

import {replaceSymbols} from 'figures';

console.log(replaceSymbols('‚úî check', {useFallback: true}));
// On terminals with Unicode symbols: ‚àö check
// On other terminals: ‚àö check
Figures
Fallback characters are only shown when they differ from the Main ones.

Name Main Fallback
tick ‚úî ‚àö
info ‚Ñπ i
warning ‚ö† ‚Äº
cross ‚úò √ó
square ‚ñà 
squareSmall ‚óª ‚ñ°
squareSmallFilled ‚óº ‚ñ†
squareDarkShade ‚ñì 
squareMediumShade ‚ñí 
squareLightShade ‚ñë 
squareTop ‚ñÄ 
squareBottom ‚ñÑ 
squareLeft ‚ñå 
squareRight ‚ñê 
squareCenter ‚ñ† 
circle ‚óØ ( )
circleFilled ‚óâ (*)
circleDotted ‚óå ( )
circleDouble ‚óé ( )
circleCircle ‚ìû (‚óã)
circleCross ‚ìß (√ó)
circlePipe ‚íæ (‚îÇ)
circleQuestionMark ?‚Éù (?)
radioOn ‚óâ (*)
radioOff ‚óØ ( )
checkboxOn ‚òí [√ó]
checkboxOff ‚òê [ ]
checkboxCircleOn ‚ìß (√ó)
checkboxCircleOff ‚íæ ( )
questionMarkPrefix ?‚Éù Ôºü
bullet ‚óè 
dot ‚Ä§ 
ellipsis ‚Ä¶ 
pointer ‚ùØ >
pointerSmall ‚Ä∫ ‚Ä∫
triangleUp ‚ñ≤ 
triangleUpSmall ‚ñ¥ 
triangleUpOutline ‚ñ≥ ‚àÜ
triangleDown ‚ñº 
triangleDownSmall ‚ñæ 
triangleLeft ‚óÄ ‚óÑ
triangleLeftSmall ‚óÇ 
triangleRight ‚ñ∂ ‚ñ∫
triangleRightSmall ‚ñ∏ 
lozenge ‚óÜ ‚ô¶
lozengeOutline ‚óá ‚óä
home ‚åÇ 
hamburger ‚ò∞ ‚â°
smiley „ã° ‚ò∫
mustache ‡∑¥ ‚îå‚îÄ‚îê
heart ‚ô• 
star ‚òÖ ‚ú∂
play ‚ñ∂ ‚ñ∫
musicNote ‚ô™ 
musicNoteBeamed ‚ô´ 
nodejs ‚¨¢ ‚ô¶
arrowUp ‚Üë 
arrowDown ‚Üì 
arrowLeft ‚Üê 
arrowRight ‚Üí 
arrowLeftRight ‚Üî 
arrowUpDown ‚Üï 
almostEqual ‚âà 
notEqual ‚â† 
lessOrEqual ‚â§ 
greaterOrEqual ‚â• 
identical ‚â° 
infinity ‚àû 
subscriptZero ‚ÇÄ 
subscriptOne ‚ÇÅ 
subscriptTwo ‚ÇÇ 
subscriptThree ‚ÇÉ 
subscriptFour ‚ÇÑ 
subscriptFive ‚ÇÖ 
subscriptSix ‚ÇÜ 
subscriptSeven ‚Çá 
subscriptEight ‚Çà 
subscriptNine ‚Çâ 
oneHalf ¬Ω 
oneThird ‚Öì 
oneQuarter ¬º 
oneFifth ‚Öï 
oneSixth ‚Öô 
oneSeventh ‚Öê 1/7
oneEighth ‚Öõ 
oneNinth ‚Öë 1/9
oneTenth ‚Öí 1/10
twoThirds ‚Öî 
twoFifths ‚Öñ 
threeQuarters ¬æ 
threeFifths ‚Öó 
threeEighths ‚Öú 
fourFifths ‚Öò 
fiveSixths ‚Öö 
fiveEighths ‚Öù 
sevenEighths ‚Öû 
line ‚îÄ 
lineBold ‚îÅ 
lineDouble ‚ïê 
lineDashed0 ‚îÑ 
lineDashed1 ‚îÖ 
lineDashed2 ‚îà 
lineDashed3 ‚îâ 
lineDashed4 ‚ïå 
lineDashed5 ‚ïç 
lineDashed6 ‚ï¥ 
lineDashed7 ‚ï∂ 
lineDashed8 ‚ï∏ 
lineDashed9 ‚ï∫ 
lineDashed10 ‚ïº 
lineDashed11 ‚ïæ 
lineDashed12 ‚àí 
lineDashed13 ‚Äì 
lineDashed14 ‚Äê 
lineDashed15 ‚ÅÉ 
lineVertical ‚îÇ 
lineVerticalBold ‚îÉ 
lineVerticalDouble ‚ïë 
lineVerticalDashed0 ‚îÜ 
lineVerticalDashed1 ‚îá 
lineVerticalDashed2 ‚îä 
lineVerticalDashed3 ‚îã 
lineVerticalDashed4 ‚ïé 
lineVerticalDashed5 ‚ïè 
lineVerticalDashed6 ‚ïµ 
lineVerticalDashed7 ‚ï∑ 
lineVerticalDashed8 ‚ïπ 
lineVerticalDashed9 ‚ïª 
lineVerticalDashed10 ‚ïΩ 
lineVerticalDashed11 ‚ïø 
lineDownLeft ‚îê 
lineDownLeftArc ‚ïÆ 
lineDownBoldLeftBold ‚îì 
lineDownBoldLeft ‚îí 
lineDownLeftBold ‚îë 
lineDownDoubleLeftDouble ‚ïó 
lineDownDoubleLeft ‚ïñ 
lineDownLeftDouble ‚ïï 
lineDownRight ‚îå 
lineDownRightArc ‚ï≠ 
lineDownBoldRightBold ‚îè 
lineDownBoldRight ‚îé 
lineDownRightBold ‚îç 
lineDownDoubleRightDouble ‚ïî 
lineDownDoubleRight ‚ïì 
lineDownRightDouble ‚ïí 
lineUpLeft ‚îò 
lineUpLeftArc ‚ïØ 
lineUpBoldLeftBold ‚îõ 
lineUpBoldLeft ‚îö 
lineUpLeftBold ‚îô 
lineUpDoubleLeftDouble ‚ïù 
lineUpDoubleLeft ‚ïú 
lineUpLeftDouble ‚ïõ 
lineUpRight ‚îî 
lineUpRightArc ‚ï∞ 
lineUpBoldRightBold ‚îó 
lineUpBoldRight ‚îñ 
lineUpRightBold ‚îï 
lineUpDoubleRightDouble ‚ïö 
lineUpDoubleRight ‚ïô 
lineUpRightDouble ‚ïò 
lineUpDownLeft ‚î§ 
lineUpBoldDownBoldLeftBold ‚î´ 
lineUpBoldDownBoldLeft ‚î® 
lineUpDownLeftBold ‚î• 
lineUpBoldDownLeftBold ‚î© 
lineUpDownBoldLeftBold ‚î™ 
lineUpDownBoldLeft ‚îß 
lineUpBoldDownLeft ‚î¶ 
lineUpDoubleDownDoubleLeftDouble ‚ï£ 
lineUpDoubleDownDoubleLeft ‚ï¢ 
lineUpDownLeftDouble ‚ï° 
lineUpDownRight ‚îú 
lineUpBoldDownBoldRightBold ‚î£ 
lineUpBoldDownBoldRight ‚î† 
lineUpDownRightBold ‚îù 
lineUpBoldDownRightBold ‚î° 
lineUpDownBoldRightBold ‚î¢ 
lineUpDownBoldRight ‚îü 
lineUpBoldDownRight ‚îû 
lineUpDoubleDownDoubleRightDouble ‚ï† 
lineUpDoubleDownDoubleRight ‚ïü 
lineUpDownRightDouble ‚ïû 
lineDownLeftRight ‚î¨ 
lineDownBoldLeftBoldRightBold ‚î≥ 
lineDownLeftBoldRightBold ‚îØ 
lineDownBoldLeftRight ‚î∞ 
lineDownBoldLeftBoldRight ‚î± 
lineDownBoldLeftRightBold ‚î≤ 
lineDownLeftRightBold ‚îÆ 
lineDownLeftBoldRight ‚î≠ 
lineDownDoubleLeftDoubleRightDouble ‚ï¶ 
lineDownDoubleLeftRight ‚ï• 
lineDownLeftDoubleRightDouble ‚ï§ 
lineUpLeftRight ‚î¥ 
lineUpBoldLeftBoldRightBold ‚îª 
lineUpLeftBoldRightBold ‚î∑ 
lineUpBoldLeftRight ‚î∏ 
lineUpBoldLeftBoldRight ‚îπ 
lineUpBoldLeftRightBold ‚î∫ 
lineUpLeftRightBold ‚î∂ 
lineUpLeftBoldRight ‚îµ 
lineUpDoubleLeftDoubleRightDouble ‚ï© 
lineUpDoubleLeftRight ‚ï® 
lineUpLeftDoubleRightDouble ‚ïß 
lineUpDownLeftRight ‚îº 
lineUpBoldDownBoldLeftBoldRightBold ‚ïã 
lineUpDownBoldLeftBoldRightBold ‚ïà 
lineUpBoldDownLeftBoldRightBold ‚ïá 
lineUpBoldDownBoldLeftRightBold ‚ïä 
lineUpBoldDownBoldLeftBoldRight ‚ïâ 
lineUpBoldDownLeftRight ‚ïÄ 
lineUpDownBoldLeftRight ‚ïÅ 
lineUpDownLeftBoldRight ‚îΩ 
lineUpDownLeftRightBold ‚îæ 
lineUpBoldDownBoldLeftRight ‚ïÇ 
lineUpDownLeftBoldRightBold ‚îø 
lineUpBoldDownLeftBoldRight ‚ïÉ 
lineUpBoldDownLeftRightBold ‚ïÑ 
lineUpDownBoldLeftBoldRight ‚ïÖ 
lineUpDownBoldLeftRightBold ‚ïÜ 
lineUpDoubleDownDoubleLeftDoubleRightDouble ‚ï¨ 
lineUpDoubleDownDoubleLeftRight ‚ï´ 
lineUpDownLeftDoubleRightDouble ‚ï™ 
lineCross ‚ï≥ 
lineBackslash ‚ï≤ 
lineSlash ‚ï± 
Other characters
If you cannot find the character you're looking for in the table above, please look at this full list of cross-platform terminal characters.

Unsupported terminals
The following terminals are not officially supported:

xterm
Linux Terminal (kernel)
cmder
They can display most but not all of the symbols listed above.

Related
log-symbols - Colored symbols for various log levels

Boxen.

boxen
Create boxes in the terminal.

Install
npm install boxen
Usage
import boxen from 'boxen';

console.log(boxen('unicorn', {padding: 1}));
/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ ‚îÇ
‚îÇ unicorn ‚îÇ
‚îÇ ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/

console.log(boxen('unicorn', {padding: 1, margin: 1, borderStyle: 'double'}));
/*

   ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
   ‚ïë ‚ïë
   ‚ïë unicorn ‚ïë
   ‚ïë ‚ïë
   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

*/

console.log(boxen('unicorns love rainbows', {title: 'magical', titleAlignment: 'center'}));
/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ magical ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇunicorns love rainbows‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/
API
boxen(text, options?)
text
Type: string

Text inside the box.

options
Type: object

borderColor
Type: string
Values: 'black' 'red' 'green' 'yellow' 'blue' 'magenta' 'cyan' 'white' 'gray' or a hex value like '#ff0000'

Color of the box border.

borderStyle
Type: string | object
Default: 'single'
Values:

'single'
‚îå‚îÄ‚îÄ‚îÄ‚îê
‚îÇfoo‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îò
'double'
‚ïî‚ïê‚ïê‚ïê‚ïó
‚ïëfoo‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïù
'round' ('single' sides with round corners)
‚ï≠‚îÄ‚îÄ‚îÄ‚ïÆ
‚îÇfoo‚îÇ
‚ï∞‚îÄ‚îÄ‚îÄ‚ïØ
'bold'
‚îè‚îÅ‚îÅ‚îÅ‚îì
‚îÉfoo‚îÉ
‚îó‚îÅ‚îÅ‚îÅ‚îõ
'singleDouble' ('single' on top and bottom, 'double' on right and left)
‚ïì‚îÄ‚îÄ‚îÄ‚ïñ
‚ïëfoo‚ïë
‚ïô‚îÄ‚îÄ‚îÄ‚ïú
'doubleSingle' ('double' on top and bottom, 'single' on right and left)
‚ïí‚ïê‚ïê‚ïê‚ïï
‚îÇfoo‚îÇ
‚ïò‚ïê‚ïê‚ïê‚ïõ
'classic'
+---+
|foo|
+---+
'arrow'
‚Üò‚Üì‚Üì‚Üì‚Üô
‚Üífoo‚Üê
‚Üó‚Üë‚Üë‚Üë‚Üñ
'none'
foo
Style of the box border.

Can be any of the above predefined styles or an object with the following keys:

{
 topLeft: '+',
 topRight: '+',
 bottomLeft: '+',
 bottomRight: '+',
 top: '-',
 bottom: '-',
 left: '|',
 right: '|'
}
dimBorder
Type: boolean
Default: false

Reduce opacity of the border.

title
Type: string

Display a title at the top of the box. If needed, the box will horizontally expand to fit the title.

Example:

console.log(boxen('foo bar', {title: 'example'}));
/*
‚îå example ‚îê
‚îÇfoo bar ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/
titleAlignment
Type: string
Default: 'left'

Align the title in the top bar.

Values:

'left'
/*
‚îå example ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇfoo bar foo bar‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/
'center'
/*
‚îå‚îÄ‚îÄ‚îÄ example ‚îÄ‚îÄ‚îÄ‚îê
‚îÇfoo bar foo bar‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/
'right'
/*
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ example ‚îê
‚îÇfoo bar foo bar‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
*/
width
Type: number

Set a fixed width for the box.

Note: This disables terminal overflow handling and may cause the box to look broken if the user's terminal is not wide enough.

import boxen from 'boxen';

console.log(boxen('foo bar', {width: 15}));
// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
// ‚îÇfoo bar ‚îÇ
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
height
Type: number

Set a fixed height for the box.

Note: This option will crop overflowing content.

import boxen from 'boxen';

console.log(boxen('foo bar', {height: 5}));
// ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
// ‚îÇfoo bar‚îÇ
// ‚îÇ ‚îÇ
// ‚îÇ ‚îÇ
// ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
fullscreen
Type: boolean | (width: number, height: number) => [width: number, height: number]

Whether or not to fit all available space within the terminal.

Pass a callback function to control box dimensions:

import boxen from 'boxen';

console.log(boxen('foo bar', {
 fullscreen: (width, height) => [width, height - 1],
}));
padding
Type: number | object
Default: 0

Space between the text and box border.

Accepts a number or an object with any of the top, right, bottom, left properties. When a number is specified, the left/right padding is 3 times the top/bottom to make it look nice.

margin
Type: number | object
Default: 0

Space around the box.

Accepts a number or an object with any of the top, right, bottom, left properties. When a number is specified, the left/right margin is 3 times the top/bottom to make it look nice.

float
Type: string
Default: 'left'
Values: 'right' 'center' 'left'

Float the box on the available terminal screen space.

backgroundColor
Type: string
Values: 'black' 'red' 'green' 'yellow' 'blue' 'magenta' 'cyan' 'white' 'gray' or a hex value like '#ff0000'

Color of the background.

textAlignment
Type: string
Default: 'left'
Values: 'left' 'center' 'right'

Align the text in the box based on the widest line.

Maintainer
Sindre Sorhus
Caesarovich
Related
boxen-cli - CLI for this module
cli-boxes - Boxes for use in the terminal



Terminal-Link.

terminal-link
Create clickable links in the terminal.

Install
npm install terminal-link
Usage
import terminalLink from 'terminal-link';

const link = terminalLink('My Website', 'https://sindresorhus.com');
console.log(link);
API
terminalLink(text, url, options?)
Create a link for use in stdout.

Supported terminals.

For unsupported terminals, by default the link will be printed in parens after the text: My website (https://sindresorhus.com).

text
Type: string

Text to linkify.

url
Type: string

URL to link to.

options
Type: object

fallback
Type: Function | boolean

Override the default fallback. The function receives the text and url as parameters and is expected to return a string.

If set to false, the text will be returned as-is when a terminal is unsupported.

terminalLink.isSupported
Type: boolean

Check whether the terminal's stdout supports links.

Prefer just using the default fallback or the fallback option whenever possible.

terminalLink.stderr(text, url, options?)
Create a link for use in stderr.

Same arguments as terminalLink().

terminalLink.stderr.isSupported
Type: boolean

Check whether the terminal's stderr supports links.

Prefer just using the default fallback or the fallback option whenever possible.

Related
terminal-link-cli - CLI for this module
ink-link - Link component for Ink
chalk - Terminal string styling done right.



TerminaL-Image.

terminal-image
Display images in the terminal

Works in any terminal that supports colors.


In iTerm, the image will be displayed in full resolution, since iTerm has special image support.

Install
npm install terminal-image
Usage
import terminalImage from 'terminal-image';

console.log(await terminalImage.file('unicorn.jpg'));
Optionally, you can specify the height and/or width to scale the image. That can be either the percentage of the terminal window or number of rows and/or columns. Please note that the image will always be scaled to fit the size of the terminal. If width and height are not defined, by default the image will take the width and height of the terminal.

It is recommended to use the percentage option.

import terminalImage from 'terminal-image';

console.log(await terminalImage.file('unicorn.jpg', {width: '50%', height: '50%'}));
You can set width and/or height as columns and/or rows of the terminal window as well.

import terminalImage from 'terminal-image';

console.log(await terminalImage.file('unicorn.jpg', {width: 50}));
By default, aspect ratio is always maintained. If you don't want to maintain aspect ratio, set preserveAspectRatio to false. However, your image will be scaled to fit the size of the terminal.

import terminalImage from 'terminal-image';

console.log(await terminalImage.file('unicorn.jpg', {width: 70, height: 50, preserveAspectRatio: false}));
API
Supports PNG and JPEG images. Animated GIFs are also supported with .gifBuffer and .gifFile.

terminalImage.buffer(imageBuffer, options?)
terminalImage.file(filePath, options?)
Returns a Promise<string> with the ANSI escape codes to display the image.

terminalImage.gifBuffer(imageBuffer, options?)
terminalImage.gifFile(filePath, options?)
Returns a function that can be called to stop the GIF animation.

options
Type: object

height
Type: string | number

Custom image height.

Can be set as percentage or number of rows of the terminal. It is recommended to use the percentage options.

width
Type: string | number

Custom image width.

Can be set as percentage or number of columns of the terminal. It is recommended to use the percentage options.

preserveAspectRatio
Type: boolean
Default: true

Whether to maintain image aspect ratio or not.

maximumFrameRate
Only works for terminalImage.gifBuffer or terminalImage.gifFile

Type: number
Default: 30

Maximum framerate to render the GIF. This option is ignored when using iTerm.

renderFrame
Only works for terminalImage.gifBuffer or terminalImage.gifFile

Type: (text: string) => void
Default: log-update

Custom handler which is run for each frame of the GIF.

This can be set to change how each frame is shown.

renderFrame.done
Only works for terminalImage.gifBuffer or terminalImage.gifFile

Type: () => void
Default: log-update

Custom handler which is run when the animation playback is stopped.

This can be set to perform a cleanup when playback has finished.

Tip
Display a remote image
import terminalImage from 'terminal-image';
import got from 'got';

const body = await got('https://sindresorhus.com/unicorn').buffer();
console.log(await terminalImage.buffer(body));
Related
terminal-image-cli - CLI for this module
terminal-link - Create clickable links in the terminal
chalk - Style and color text in the terminal.


String-Width.

string-width
Get the visual width of a string - the number of columns required to display it

Some Unicode characters are fullwidth and use double the normal width. ANSI escape codes are stripped and doesn't affect the width.

Useful to be able to measure the actual width of command-line output.

Install
npm install string-width
Usage
import stringWidth from 'string-width';

stringWidth('a');
//=> 1

stringWidth('Âè§');
//=> 2

stringWidth('\u001B[1mÂè§\u001B[22m');
//=> 2
API
stringWidth(string, options?)
string
Type: string

The string to be counted.

options
Type: object

ambiguousIsNarrow
Type: boolean
Default: true

Count ambiguous width characters as having narrow width (count of 1) instead of wide width (count of 2).

Ambiguous characters behave like wide or narrow characters depending on the context (language tag, script identification, associated font, source of data, or explicit markup; all can provide the context). If the context cannot be established reliably, they should be treated as narrow characters by default.

http://www.unicode.org/reports/tr11/
countAnsiEscapeCodes
Type: boolean
Default: false

Whether ANSI escape codes should be counted.

Related
string-width-cli - CLI for this module
string-length - Get the real length of a string
widest-line - Get the visual width of the widest line in a string
get-east-asian-width - Determine the East Asian Width of a Unicode character.


Cli-Truncate.

cli-truncate
Truncate a string to a specific width in the terminal

Gracefully handles ANSI escapes. Like a string styled with chalk. It also supports Unicode surrogate pairs and fullwidth characters.

Install
npm install cli-truncate
Usage
import cliTruncate from 'cli-truncate';

cliTruncate('unicorn', 4);
//=> 'uni‚Ä¶'

// Truncate at different positions
cliTruncate('unicorn', 4, {position: 'start'});
//=> '‚Ä¶orn'

cliTruncate('unicorn', 4, {position: 'middle'});
//=> 'un‚Ä¶n'

cliTruncate('unicorns rainbow dragons', 6, {position: 'end'})
//=> 'unico‚Ä¶'

cliTruncate('\u001B[31municorn\u001B[39m', 4);
//=> '\u001B[31muni\u001B[39m‚Ä¶'

// Truncate Unicode surrogate pairs
cliTruncate('uni\uD83C\uDE00corn', 5);
//=> 'uni\uD83C\uDE00‚Ä¶'

// Truncate fullwidth characters
cliTruncate('ÏïàÎÖïÌïòÏÑ∏Ïöî', 3);
//=> 'Ïïà‚Ä¶'

// Truncate the paragraph to the terminal width
const paragraph = 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.';
cliTruncate(paragraph, process.stdout.columns);
//=> 'Lorem ipsum dolor sit amet, consectetuer adipiscing‚Ä¶'
API
cliTruncate(text, columns, options?)
text
Type: string

The text to truncate.

columns
Type: number

The number of columns to occupy in the terminal.

options
Type: object

position
Type: string
Default: 'end'
Values: 'start' | 'middle' | 'end'

The position to truncate the string.

space
Type: boolean
Default: false

Add a space between the text and the ellipsis.

import cliTruncate from 'cli-truncate';

cliTruncate('unicorns', 5, {space: false});
//=> 'unic‚Ä¶'

cliTruncate('unicorns', 5, {space: true});
//=> 'uni ‚Ä¶'

cliTruncate('unicorns', 6, {position: 'start', space: true});
//=> '‚Ä¶ orns'

cliTruncate('unicorns', 7, {position: 'middle', space: true});
//=> 'uni ‚Ä¶ s'
preferTruncationOnSpace
Type: boolean
Default: false

Truncate the string from a whitespace if it is within 3 characters from the actual breaking point.

import cliTruncate from 'cli-truncate';

cliTruncate('unicorns rainbow dragons', 20, {position: 'start', preferTruncationOnSpace: true})
//=> '‚Ä¶rainbow dragons'

// without preferTruncationOnSpace
cliTruncate('unicorns rainbow dragons', 20, {position: 'start'})
//=> '‚Ä¶rns rainbow dragons'

cliTruncate('unicorns rainbow dragons', 20, {position: 'middle', preferTruncationOnSpace: true})
//=> 'unicorns‚Ä¶dragons'

cliTruncate('unicorns rainbow dragons', 6, {position: 'end', preferTruncationOnSpace: true})
//=> 'unico‚Ä¶'

// preferTruncationOnSpace would have no effect if space isn't found within next 3 indexes
cliTruncate('unicorns rainbow dragons', 6, {position: 'middle', preferTruncationOnSpace: true})
//=> 'uni‚Ä¶ns'
truncationCharacter
Type: string
Default: ‚Ä¶

The character to use at the breaking point.

import cliTruncate from 'cli-truncate';

cliTruncate('unicorns', 5, {position: 'end'});
//=> 'unic‚Ä¶'

cliTruncate('unicorns', 5, {position: 'end', truncationCharacter: '.'});
//=> 'unic.'

cliTruncate('unicorns', 5, {position: 'end', truncationCharacter: ''});
//=> 'unico'
Related
wrap-ansi - Wordwrap a string with ANSI escape codes
slice-ansi - Slice a string with ANSI escape codes


BLessed.
blessed.
A curses-like library with a high level terminal interface API for node.js.

blessed

Blessed is over 16,000 lines of code and terminal goodness. It's completely implemented in javascript, and its goal consists of two things:

Reimplement ncurses entirely by parsing and compiling terminfo and termcap, and exposing a Program object which can output escape sequences compatible with any terminal.

Implement a widget API which is heavily optimized for terminals.

The blessed renderer makes use of CSR (change-scroll-region), and BCE (back-color-erase). It draws the screen using the painter's algorithm and is sped up with smart cursor movements and a screen damage buffer. This means rendering of your application will be extremely efficient: blessed only draws the changes (damage) to the screen.

Blessed is arguably as accurate as ncurses, but even more optimized in some ways. The widget library gives you an API which is reminiscent of the DOM. Anyone is able to make an awesome terminal application with blessed. There are terminal widget libraries for other platforms (primarily python and perl), but blessed is possibly the most DOM-like (dare I say the most user-friendly?).

Blessed has been used to implement other popular libraries and programs. Examples include: the slap text editor and blessed-contrib. The blessed API itself has gone on to inspire termui for Go.

Install
$ npm install blessed
Example
This will render a box with line borders containing the text 'Hello world!', perfectly centered horizontally and vertically.

NOTE: It is recommend you use either smartCSR or fastCSR as a blessed.screen option. This will enable CSR when scrolling text in elements or when manipulating lines.

var blessed = require('blessed');

// Create a screen object.
var screen = blessed.screen({
  smartCSR: true
});

screen.title = 'my window title';

// Create a box perfectly centered horizontally and vertically.
var box = blessed.box({
  top: 'center',
  left: 'center',
  width: '50%',
  height: '50%',
  content: 'Hello {bold}world{/bold}!',
  tags: true,
  border: {
    type: 'line'
  },
  style: {
    fg: 'white',
    bg: 'magenta',
    border: {
      fg: '#f0f0f0'
    },
    hover: {
      bg: 'green'
    }
  }
});

// Append our box to the screen.
screen.append(box);

// Add a png icon to the box
var icon = blessed.image({
  parent: box,
  top: 0,
  left: 0,
  type: 'overlay',
  width: 'shrink',
  height: 'shrink',
  file: __dirname + '/my-program-icon.png',
  search: false
});

// If our box is clicked, change the content.
box.on('click', function(data) {
  box.setContent('{center}Some different {red-fg}content{/red-fg}.{/center}');
  screen.render();
});

// If box is focused, handle `enter`/`return` and give us some more content.
box.key('enter', function(ch, key) {
  box.setContent('{right}Even different {black-fg}content{/black-fg}.{/right}\n');
  box.setLine(1, 'bar');
  box.insertLine(1, 'foo');
  screen.render();
});

// Quit on Escape, q, or Control-C.
screen.key(['escape', 'q', 'C-c'], function(ch, key) {
  return process.exit(0);
});

// Focus our element.
box.focus();

// Render the screen.
screen.render();
Documentation
Widgets
Base Nodes
Node (abstract)
Screen
Element (abstract)
Boxes
Box
Text
Line
ScrollableBox (deprecated)
ScrollableText (deprecated)
BigText
Lists
List
FileManager
ListTable
Listbar
Forms
Form
Input (abstract)
Textarea
Textbox
Button
Checkbox
RadioSet
RadioButton
Prompts
Prompt
Question
Message
Loading
Data Display
ProgressBar
Log
Table
Special Elements
Terminal
Image
ANSIImage
OverlayImage
Video
Layout
Other
Helpers
Mechanics
Content & Tags
Colors
Attributes
Alignment
Escaping
SGR Sequences
Style
Colors
Attributes
Transparency
Shadow
Effects
Events
Event Bubbling
Poisitioning
Rendering
Artificial Cursors
Multiple Screens
Server Side Usage
Notes
Windows Compatibility
Low-level Usage
Testing
Examples
Widgets
Blessed comes with a number of high-level widgets so you can avoid all the nasty low-level terminal stuff.

Base Nodes
Node (from EventEmitter)
The base node which everything inherits from.

Options:
screen - The screen to be associated with.
parent - The desired parent.
children - An arrray of children.
Properties:
Inherits all from EventEmitter.
type - Type of the node (e.g. box).
options - Original options object.
parent - Parent node.
screen - Parent screen.
children - Array of node's children.
_data, , $ - An object for any miscellanous user data.
index - Render index (document order index) of the last render call.
Events:
Inherits all from EventEmitter.
adopt - Received when node is added to a parent.
remove - Received when node is removed from it's current parent.
reparent - Received when node gains a new parent.
attach - Received when node is attached to the screen directly or somewhere in its ancestry.
detach - Received when node is detached from the screen directly or somewhere in its ancestry.
Methods:
Inherits all from EventEmitter.
prepend(node) - Prepend a node to this node's children.
append(node) - Append a node to this node's children.
remove(node) - Remove child node from node.
insert(node, i) - Insert a node to this node's children at index i.
insertBefore(node, refNode) - Insert a node to this node's children before the reference node.
insertAfter(node, refNode) - Insert a node from node after the reference node.
detach() - Remove node from its parent.
emitDescendants(type, args..., [iterator]) - Emit event for element, and recursively emit same event for all descendants.
get(name, [default]) - Get user property with a potential default value.
set(name, value) - Set user property to value.
Screen (from Node)
The screen on which every other node renders.

Options:
program - The blessed Program to be associated with. Will be automatically instantiated if none is provided.
smartCSR - Attempt to perform CSR optimization on all possible elements (not just full-width ones, elements with uniform cells to their sides). This is known to cause flickering with elements that are not full-width, however, it is more optimal for terminal rendering.
fastCSR - Do CSR on any element within 20 cols of the screen edge on either side. Faster than smartCSR, but may cause flickering depending on what is on each side of the element.
useBCE - Attempt to perform back_color_erase optimizations for terminals that support it. It will also work with terminals that don't support it, but only on lines with the default background color. As it stands with the current implementation, it's uncertain how much terminal performance this adds at the cost of overhead within node.
resizeTimeout - Amount of time (in ms) to redraw the screen after the terminal is resized (Default: 300).
tabSize - The width of tabs within an element's content.
autoPadding - Automatically position child elements with border and padding in mind (NOTE: this is a recommended option. It may become default in the future).
cursor.artificial - Have blessed draw a custom cursor and hide the terminal cursor (experimental).
cursor.shape - Shape of the cursor. Can be: block, underline, or line.
cursor.blink - Whether the cursor blinks.
cursor.color - Color of the color. Accepts any valid color value (null is default).
log - Create a log file. See log method.
dump - Dump all output and input to desired file. Can be used together with log option if set as a boolean.
debug - Debug mode. Enables usage of the debug method. Also creates a debug console which will display when pressing F12. It will display all log and debug messages.
ignoreLocked - Array of keys in their full format (e.g. C-c) to ignore when keys are locked or grabbed. Useful for creating a key that will always exit no matter whether the keys are locked.
dockBorders - Automatically "dock" borders with other elements instead of overlapping, depending on position (experimental). For example: These border-overlapped elements:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ box1 ‚îÇ box2 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
Become:

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ box1 ‚îÇ box2 ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
ignoreDockContrast - Normally, dockable borders will not dock if the colors or attributes are different. This option will allow them to dock regardless. It may produce some odd looking multi-colored borders though.
fullUnicode - Allow for rendering of East Asian double-width characters, utf-16 surrogate pairs, and unicode combining characters. This allows you to display text above the basic multilingual plane. This is behind an option because it may affect performance slightly negatively. Without this option enabled, all double-width, surrogate pair, and combining characters will be replaced by '??', '?', '' respectively. (NOTE: iTerm2 cannot display combining characters properly. Blessed simply removes them from an element's content if iTerm2 is detected).
sendFocus - Send focus events after mouse is enabled.
warnings - Display warnings (such as the output not being a TTY, similar to ncurses).
forceUnicode - Force blessed to use unicode even if it is not detected via terminfo, env variables, or windows code page. If value is true unicode is forced. If value is false non-unicode is forced (default: null).
input/output - Input and output streams. process.stdin/process.stdout by default, however, it could be a net.Socket if you want to make a program that runs over telnet or something of that nature.
terminal - TERM name used for terminfo parsing. The $TERM env variable is used by default.
title - Set the terminal window title if possible.
Properties:
Inherits all from Node.
program - The blessed Program object.
tput - The blessed Tput object (only available if you passed tput: true to the Program constructor.)
focused - Top of the focus history stack.
width - Width of the screen (same as program.cols).
height - Height of the screen (same as program.rows).
cols - Same as screen.width.
rows - Same as screen.height.
left - Relative left offset, always zero.
right - Relative right offset, always zero.
top - Relative top offset, always zero.
bottom - Relative bottom offset, always zero.
aleft - Absolute left offset, always zero.
aright - Absolute right offset, always zero.
atop - Absolute top offset, always zero.
abottom - Absolute bottom offset, always zero.
grabKeys - Whether the focused element grabs all keypresses.
lockKeys - Prevent keypresses from being received by any element.
hover - The currently hovered element. Only set if mouse events are bound.
terminal - Set or get terminal name. Set calls screen.setTerminal() internally.
title - Set or get window title.
Events:
Inherits all from Node.
resize - Received on screen resize.
mouse - Received on mouse events.
keypress - Received on key events.
element [name] - Global events received for all elements.
key [name] - Received on key event for [name].
focus, blur - Received when the terminal window focuses/blurs. Requires a terminal supporting the focus protocol and focus needs to be passed to program.enableMouse().
prerender - Received before render.
render - Received on render.
warning - Received when blessed notices something untoward (output is not a tty, terminfo not found, etc).
destroy - Received when the screen is destroyed (only useful when using multiple screens).
Methods:
Inherits all from Node.
log(msg, ...) - Write string to the log file if one was created.
debug(msg, ...) - Same as the log method, but only gets called if the debug option was set.
alloc() - Allocate a new pending screen buffer and a new output screen buffer.
realloc() - Reallocate the screen buffers and clear the screen.
draw(start, end) - Draw the screen based on the contents of the screen buffer.
render() - Render all child elements, writing all data to the screen buffer and drawing the screen.
clearRegion(x1, x2, y1, y2) - Clear any region on the screen.
fillRegion(attr, ch, x1, x2, y1, y2) - Fill any region with a character of a certain attribute.
focusOffset(offset) - Focus element by offset of focusable elements.
focusPrevious() - Focus previous element in the index.
focusNext() - Focus next element in the index.
focusPush(element) - Push element on the focus stack (equivalent to screen.focused = el).
focusPop() - Pop element off the focus stack.
saveFocus() - Save the focused element.
restoreFocus() - Restore the saved focused element.
rewindFocus() - "Rewind" focus to the last visible and attached element.
key(name, listener) - Bind a keypress listener for a specific key.
onceKey(name, listener) - Bind a keypress listener for a specific key once.
unkey(name, listener) - Remove a keypress listener for a specific key.
spawn(file, args, options) - Spawn a process in the foreground, return to blessed app after exit.
exec(file, args, options, callback) - Spawn a process in the foreground, return to blessed app after exit. Executes callback on error or exit.
readEditor([options], callback) - Read data from text editor.
setEffects(el, fel, over, out, effects, temp) - Set effects based on two events and attributes.
insertLine(n, y, top, bottom) - Insert a line into the screen (using csr: this bypasses the output buffer).
deleteLine(n, y, top, bottom) - Delete a line from the screen (using csr: this bypasses the output buffer).
insertBottom(top, bottom) - Insert a line at the bottom of the screen.
insertTop(top, bottom) - Insert a line at the top of the screen.
deleteBottom(top, bottom) - Delete a line at the bottom of the screen.
deleteTop(top, bottom) - Delete a line at the top of the screen.
enableMouse([el]) - Enable mouse events for the screen and optionally an element (automatically called when a form of on('mouse') is bound).
enableKeys([el]) - Enable keypress events for the screen and optionally an element (automatically called when a form of on('keypress') is bound).
enableInput([el]) - Enable key and mouse events. Calls bot enableMouse and enableKeys.
copyToClipboard(text) - Attempt to copy text to clipboard using iTerm2's proprietary sequence. Returns true if successful.
cursorShape(shape, blink) - Attempt to change cursor shape. Will not work in all terminals (see artificial cursors for a solution to this). Returns true if successful.
cursorColor(color) - Attempt to change cursor color. Returns true if successful.
cursorReset() - Attempt to reset cursor. Returns true if successful.
screenshot([xi, xl, yi, yl]) - Take an SGR screenshot of the screen within the region. Returns a string containing only characters and SGR codes. Can be displayed by simply echoing it in a terminal.
destroy() - Destroy the screen object and remove it from the global list. Also remove all global events relevant to the screen object. If all screen objects are destroyed, the node process is essentially reset to its initial state.
setTerminal(term) - Reset the terminal to term. Reloads terminfo.
Element (from Node)
The base element.

Options:
fg, bg, bold, underline - Attributes.
style - May contain attributes in the format of:
  {
    fg: 'blue',
    bg: 'black',
    border: {
      fg: 'blue'
    },
    scrollbar: {
      bg: 'blue'
    },
    focus: {
      bg: 'red'
    },
    hover: {
      bg: 'red'
    }
  }
border - Border object, see below.
content - Element's text content.
clickable - Element is clickable.
input, keyable - Element is focusable and can receive key input.
focused - Element is focused.
hidden - Whether the element is hidden.
label - A simple text label for the element.
hoverText - A floating text label for the element which appears on mouseover.
align - Text alignment: left, center, or right.
valign - Vertical text alignment: top, middle, or bottom.
shrink - Shrink/flex/grow to content and child elements. Width/height during render.
padding - Amount of padding on the inside of the element. Can be a number or an object containing the properties: left, right, top, and bottom.
width, height - Width/height of the element, can be a number, percentage (0-100%), or keyword (half or shrink). Percentages can also have offsets (50%+1, 50%-1).
left, right, top, bottom - Offsets of the element relative to its parent. Can be a number, percentage (0-100%), or keyword (center). right and bottom do not accept keywords. Percentages can also have offsets (50%+1, 50%-1).
position - Can contain the above options.
scrollable - Whether the element is scrollable or not.
ch - Background character (default is whitespace ).
draggable - Allow the element to be dragged with the mouse.
shadow - Draw a translucent offset shadow behind the element.
Properties:
Inherits all from Node.
name - Name of the element. Useful for form submission.
border - Border object.
type - Type of border (line or bg). bg by default.
ch - Character to use if bg type, default is space.
bg, fg - Border foreground and background, must be numbers (-1 for default).
bold, underline - Border attributes.
style - Contains attributes (e.g. fg/bg/underline). See above.
position - Raw width, height, and offsets.
content - Raw text content.
hidden - Whether the element is hidden or not.
visible - Whether the element is visible or not.
detached - Whether the element is attached to a screen in its ancestry somewhere.
fg, bg - Foreground and background, must be numbers (-1 for default).
bold, underline - Attributes.
width - Calculated width.
height - Calculated height.
left - Calculated relative left offset.
right - Calculated relative right offset.
top - Calculated relative top offset.
bottom - Calculated relative bottom offset.
aleft - Calculated absolute left offset.
aright - Calculated absolute right offset.
atop - Calculated absolute top offset.
abottom - Calculated absolute bottom offset.
draggable - Whether the element is draggable. Set to true to allow dragging.
Events:
Inherits all from Node.
blur, focus - Received when an element is focused or unfocused.
mouse - Received on mouse events for this element.
mousedown, mouseup - Mouse button was pressed or released.
wheeldown, wheelup - Wheel was scrolled down or up.
mouseover, mouseout - Element was hovered or unhovered.
mousemove - Mouse was moved somewhere on this element.
click - Element was clicked (slightly smarter than mouseup).
keypress - Received on key events for this element.
move - Received when the element is moved.
resize - Received when the element is resized.
key [name] - Received on key event for [name].
prerender - Received before a call to render.
render - Received after a call to render.
hide - Received when element becomes hidden.
show - Received when element is shown.
destroy - Received when element is destroyed.
Methods:
Inherits all from Node.
Note: If the scrollable option is enabled, Element inherits all methods from ScrollableBox.
render() - Write content and children to the screen buffer.
hide() - Hide element.
show() - Show element.
toggle() - Toggle hidden/shown.
focus() - Focus element.
key(name, listener) - Bind a keypress listener for a specific key.
onceKey(name, listener) - Bind a keypress listener for a specific key once.
unkey(name, listener) - Remove a keypress listener for a specific key.
onScreenEvent(type, handler) - Same asel.on('screen', ...) except this will automatically keep track of which listeners are bound to the screen object. For use with removeScreenEvent(), free(), and destroy().
removeScreenEvent(type, handler) - Same asel.removeListener('screen', ...) except this will automatically keep track of which listeners are bound to the screen object. For use with onScreenEvent(), free(), and destroy().
free() - Free up the element. Automatically unbind all events that may have been bound to the screen object. This prevents memory leaks. For use with onScreenEvent(), removeScreenEvent(), and destroy().
destroy() - Same as the detach() method, except this will automatically call free() and unbind any screen events to prevent memory leaks. for use with onScreenEvent(), removeScreenEvent(), and free().
setIndex(z) - Set the z-index of the element (changes rendering order).
setFront() - Put the element in front of its siblings.
setBack() - Put the element in back of its siblings.
setLabel(text/options) - Set the label text for the top-left corner. Example options: {text:'foo',side:'left'}
removeLabel() - Remove the label completely.
setHover(text/options) - Set a hover text box to follow the cursor. Similar to the "title" DOM attribute in the browser. Example options: {text:'foo'}
removeHover() - Remove the hover label completely.
enableMouse() - Enable mouse events for the element (automatically called when a form of on('mouse') is bound).
enableKeys() - Enable keypress events for the element (automatically called when a form of on('keypress') is bound).
enableInput() - Enable key and mouse events. Calls bot enableMouse and enableKeys.
enableDrag() - Enable dragging of the element.
disableDrag() - Disable dragging of the element.
screenshot([xi, xl, yi, yl]) - Take an SGR screenshot of the element within the region. Returns a string containing only characters and SGR codes. Can be displayed by simply echoing it in a terminal.
Content Methods
Methods for dealing with text content, line by line. Useful for writing a text editor, irc client, etc.

Note: All of these methods deal with pre-aligned, pre-wrapped text. If you use deleteTop() on a box with a wrapped line at the top, it may remove 3-4 "real" lines (rows) depending on how long the original line was.

The lines parameter can be a string or an array of strings. The line parameter must be a string.

setContent(text) - Set the content. Note: When text is input, it will be stripped of all non-SGR escape codes, tabs will be replaced with 8 spaces, and tags will be replaced with SGR codes (if enabled).
getContent() - Return content, slightly different from el.content. Assume the above formatting.
setText(text) - Similar to setContent, but ignore tags and remove escape codes.
getText() - Similar to getContent, but return content with tags and escape codes removed.
insertLine(i, lines) - Insert a line into the box's content.
deleteLine(i) - Delete a line from the box's content.
getLine(i) - Get a line from the box's content.
getBaseLine(i) - Get a line from the box's content from the visible top.
setLine(i, line) - Set a line in the box's content.
setBaseLine(i, line) - Set a line in the box's content from the visible top.
clearLine(i) - Clear a line from the box's content.
clearBaseLine(i) - Clear a line from the box's content from the visible top.
insertTop(lines) - Insert a line at the top of the box.
insertBottom(lines) - Insert a line at the bottom of the box.
deleteTop() - Delete a line at the top of the box.
deleteBottom() - Delete a line at the bottom of the box.
unshiftLine(lines) - Unshift a line onto the top of the content.
shiftLine(i) - Shift a line off the top of the content.
pushLine(lines) - Push a line onto the bottom of the content.
popLine(i) - Pop a line off the bottom of the content.
getLines() - An array containing the content lines.
getScreenLines() - An array containing the lines as they are displayed on the screen.
strWidth(text) - Get a string's displayed width, taking into account double-width, surrogate pairs, combining characters, tags, and SGR escape codes.
Boxes
Box (from Element)
A box element which draws a simple box containing content or other elements.

Options:
Inherits all from Element.
Properties:
Inherits all from Element.
Events:
Inherits all from Element.
Methods:
Inherits all from Element.
Text (from Element)
An element similar to Box, but geared towards rendering simple text elements.

Options:
Inherits all from Element.
fill - Fill the entire line with chosen bg until parent bg ends, even if there is not enough text to fill the entire width. (deprecated)
align - Text alignment: left, center, or right.
Inherits all options, properties, events, and methods from Element.

Line (from Box)
A simple line which can be line or bg styled.

Options:
Inherits all from Box.
orientation - Can be vertical or horizontal.
type, bg, fg, ch - Treated the same as a border object. (attributes can be contained in style).
Inherits all options, properties, events, and methods from Box.

ScrollableBox (from Box)
DEPRECATED - Use Box with the scrollable option instead.

A box with scrollable content.

Options:
Inherits all from Box.
baseLimit - A limit to the childBase. Default is Infinity.
alwaysScroll - A option which causes the ignoring of childOffset. This in turn causes the childBase to change every time the element is scrolled.
scrollbar - Object enabling a scrollbar.
scrollbar.style - Style of the scrollbar.
scrollbar.track - Style of the scrollbar track if present (takes regular style options).
Properties:
Inherits all from Box.
childBase - The offset of the top of the scroll content.
childOffset - The offset of the chosen item/line.
Events:
Inherits all from Box.
scroll - Received when the element is scrolled.
Methods:
scroll(offset) - Scroll the content by a relative offset.
scrollTo(index) - Scroll the content to an absolute index.
setScroll(index) - Same as scrollTo.
setScrollPerc(perc) - Set the current scroll index in percentage (0-100).
getScroll() - Get the current scroll index in lines.
getScrollHeight() - Get the actual height of the scrolling area.
getScrollPerc() - Get the current scroll index in percentage.
resetScroll() - Reset the scroll index to its initial state.
ScrollableText (from ScrollableBox)
DEPRECATED - Use Box with the scrollable and alwaysScroll options instead.

A scrollable text box which can display and scroll text, as well as handle pre-existing newlines and escape codes.

Options:
Inherits all from ScrollableBox.
mouse - Whether to enable automatic mouse support for this element.
keys - Use predefined keys for navigating the text.
vi - Use vi keys with the keys option.
Properties:
Inherits all from ScrollableBox.
Events:
Inherits all from ScrollableBox.
Methods:
Inherits all from ScrollableBox.
BigText (from Box)
A box which can render content drawn as 8x14 cell characters using the terminus font.

Options:
Inherits all from Box.
font - bdf->json font file to use (see ttystudio for instructions on compiling BDFs to JSON).
fontBold - bdf->json bold font file to use (see ttystudio for instructions on compiling BDFs to JSON).
fch - foreground character. (default: ' ')
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
Lists
List (from Box)
A scrollable list which can display selectable items.

Options:
Inherits all from Box.
style.selected - Style for a selected item.
style.item - Style for an unselected item.
mouse - Whether to automatically enable mouse support for this list (allows clicking items).
keys - Use predefined keys for navigating the list.
vi - Use vi keys with the keys option.
items - An array of strings which become the list's items.
search - A function that is called when vi mode is enabled and the key / is pressed. This function accepts a callback function which should be called with the search string. The search string is then used to jump to an item that is found in items.
interactive - Whether the list is interactive and can have items selected (Default: true).
invertSelected - Whether to automatically override tags and invert fg of item when selected (Default: true).
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
select - Received when an item is selected.
cancel - List was canceled (when esc is pressed with the keys option).
action - Either a select or a cancel event was received.
Methods:
Inherits all from Box.
add/addItem(text) - Add an item based on a string.
removeItem(child) - Removes an item from the list. Child can be an element, index, or string.
pushItem(child) - Push an item onto the list.
popItem() - Pop an item off the list.
unshiftItem(child) - Unshift an item onto the list.
shiftItem() - Shift an item off the list.
insertItem(i, child) - Inserts an item to the list. Child can be an element, index, or string.
getItem(child) - Returns the item element. Child can be an element, index, or string.
setItem(child, content) - Set item to content.
spliceItem(i, n, item1, ...) - Remove and insert items to the list.
clearItems() - Clears all items from the list.
setItems(items) - Sets the list items to multiple strings.
getItemIndex(child) - Returns the item index from the list. Child can be an element, index, or string.
select(index) - Select an index of an item.
move(offset) - Select item based on current offset.
up(amount) - Select item above selected.
down(amount) - Select item below selected.
pick(callback) - Show/focus list and pick an item. The callback is executed with the result.
fuzzyFind([string/regex/callback]) - Find an item based on its text content.
FileManager (from List)
A very simple file manager for selecting files.

Options:
Inherits all from List.
cwd - Current working directory.
Properties:
Inherits all from List.
cwd - Current working directory.
Events:
Inherits all from List.
cd - Directory was selected and navigated to.
file - File was selected.
Methods:
Inherits all from List.
refresh([cwd], [callback]) - Refresh the file list (perform a readdir on cwd and update the list items).
pick([cwd], callback) - Pick a single file and return the path in the callback.
reset([cwd], [callback]) - Reset back to original cwd.
ListTable (from List)
A stylized table of text elements with a list.

Options:
Inherits all from List.
rows/data - Array of array of strings representing rows.
pad - Spaces to attempt to pad on the sides of each cell. 2 by default: one space on each side (only useful if the width is shrunken).
noCellBorders - Do not draw inner cells.
style.header - Header style.
style.cell - Cell style.
Properties:
Inherits all from List.
Events:
Inherits all from List.
Methods:
Inherits all from List.
setRows/setData(rows) - Set rows in table. Array of arrays of strings.
  table.setData([
    [ 'Animals', 'Foods' ],
    [ 'Elephant', 'Apple' ],
    [ 'Bird', 'Orange' ]
  ]);
Listbar (from Box)
A horizontal list. Useful for a main menu bar.

Options:
Inherits all from Box.
style.selected - Style for a selected item.
style.item - Style for an unselected item.
commands/items - Set buttons using an object with keys as titles of buttons, containing of objects containing keys of keys and callback.
autoCommandKeys - Automatically bind list buttons to keys 0-9.
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
setItems(commands) - Set commands (see commands option above).
add/addItem/appendItem(item, callback) - Append an item to the bar.
select(offset) - Select an item on the bar.
removeItem(child) - Remove item from the bar.
move(offset) - Move relatively across the bar.
moveLeft(offset) - Move left relatively across the bar.
moveRight(offset) - Move right relatively across the bar.
selectTab(index) - Select button and execute its callback.
Forms
Form (from Box)
A form which can contain form elements.

Options:
Inherits all from Box.
keys - Allow default keys (tab, vi keys, enter).
vi - Allow vi keys.
Properties:
Inherits all from Box.
submission - Last submitted data.
Events:
Inherits all from Box.
submit - Form is submitted. Receives a data object.
cancel - Form is discarded.
reset - Form is cleared.
Methods:
Inherits all from Box.
focusNext() - Focus next form element.
focusPrevious() - Focus previous form element.
submit() - Submit the form.
cancel() - Discard the form.
reset() - Clear the form.
Input (from Box)
A form input.

Textarea (from Input)
A box which allows multiline text input.

Options:
Inherits all from Input.
keys - Use pre-defined keys (i or enter for insert, e for editor, C-e for editor while inserting).
mouse - Use pre-defined mouse events (right-click for editor).
inputOnFocus - Call readInput() when the element is focused. Automatically unfocus.
Properties:
Inherits all from Input.
value - The input text. read-only.
Events:
Inherits all from Input.
submit - Value is submitted (enter).
cancel - Value is discared (escape).
action - Either submit or cancel.
Methods:
Inherits all from Input.
submit - Submit the textarea (emits submit).
cancel - Cancel the textarea (emits cancel).
readInput(callback) - Grab key events and start reading text from the keyboard. Takes a callback which receives the final value.
readEditor(callback) - Open text editor in $EDITOR, read the output from the resulting file. Takes a callback which receives the final value.
getValue() - The same as this.value, for now.
clearValue() - Clear input.
setValue(text) - Set value.
Textbox (from Textarea)
A box which allows text input.

Options:
Inherits all from Textarea.
secret - Completely hide text.
censor - Replace text with asterisks (*).
Properties:
Inherits all from Textarea.
secret - Completely hide text.
censor - Replace text with asterisks (*).
Events:
Inherits all from Textarea.
Methods:
Inherits all from Textarea.
Button (from Input)
A button which can be focused and allows key and mouse input.

Options:
Inherits all from Input.
Properties:
Inherits all from Input.
Events:
Inherits all from Input.
press - Received when the button is clicked/pressed.
Methods:
Inherits all from Input.
press() - Press button. Emits press.
Checkbox (from Input)
A checkbox which can be used in a form element.

Options:
Inherits all from Input.
checked - Whether the element is checked or not.
mouse - Enable mouse support.
Properties:
Inherits all from Input.
text - The text next to the checkbox (do not use setContent, use check.text = '').
checked - Whether the element is checked or not.
value - Same as checked.
Events:
Inherits all from Input.
check - Received when element is checked.
uncheck received when element is unchecked.
Methods:
Inherits all from Input.
check() - Check the element.
uncheck() - Uncheck the element.
toggle() - Toggle checked state.
RadioSet (from Box)
An element wrapping RadioButtons. RadioButtons within this element will be mutually exclusive with each other.

Options:
Inherits all from Box.
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
RadioButton (from Checkbox)
A radio button which can be used in a form element.

Options:
Inherits all from Checkbox.
Properties:
Inherits all from Checkbox.
Events:
Inherits all from Checkbox.
Methods:
Inherits all from Checkbox.
Prompts
Prompt (from Box)
A prompt box containing a text input, okay, and cancel buttons (automatically hidden).

Options:
Inherits all from Box.
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
input/setInput/readInput(text, value, callback) - Show the prompt and wait for the result of the textbox. Set text and initial value.
Question (from Box)
A question box containing okay and cancel buttons (automatically hidden).

Options:
Inherits all from Box.
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
ask(question, callback) - Ask a question. callback will yield the result.
Message (from Box)
A box containing a message to be displayed (automatically hidden).

Options:
Inherits all from Box.
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
log/display(text, [time], callback) - Display a message for a time (default is 3 seconds). Set time to 0 for a perpetual message that is dismissed on keypress.
error(text, [time], callback) - Display an error in the same way.
Loading (from Box)
A box with a spinning line to denote loading (automatically hidden).

Options:
Inherits all from Box.
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
load(text) - Display the loading box with a message. Will lock keys until stop is called.
stop() - Hide loading box. Unlock keys.
Data Display
ProgressBar (from Input)
A progress bar allowing various styles. This can also be used as a form input.

Options:
Inherits all from Input.
orientation - Can be horizontal or vertical.
style.bar - Style of the bar contents itself.
pch - The character to fill the bar with (default is space).
filled - The amount filled (0 - 100).
value - Same as filled.
keys - Enable key support.
mouse - Enable mouse support.
Properties:
Inherits all from Input.
Events:
Inherits all from Input.
reset - Bar was reset.
complete - Bar has completely filled.
Methods:
Inherits all from Input.
progress(amount) - Progress the bar by a fill amount.
setProgress(amount) - Set progress to specific amount.
reset() - Reset the bar.
Log (from ScrollableText)
A log permanently scrolled to the bottom.

Options:
Inherits all from ScrollableText.
scrollback - Amount of scrollback allowed. Default: Infinity.
scrollOnInput - Scroll to bottom on input even if the user has scrolled up. Default: false.
Properties:
Inherits all from ScrollableText.
scrollback - Amount of scrollback allowed. Default: Infinity.
scrollOnInput - Scroll to bottom on input even if the user has scrolled up. Default: false.
Events:
Inherits all from ScrollableText.
log - Emitted on a log line. Passes in line.
Methods:
Inherits all from ScrollableText.
log/add(text) - Add a log line.
Table (from Box)
A stylized table of text elements.

Options:
Inherits all from Box.
rows/data - Array of array of strings representing rows.
pad - Spaces to attempt to pad on the sides of each cell. 2 by default: one space on each side (only useful if the width is shrunken).
noCellBorders - Do not draw inner cells.
fillCellBorders - Fill cell borders with the adjacent background color.
style.header - Header style.
style.cell - Cell style.
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
setRows/setData(rows) - Set rows in table. Array of arrays of strings.
  table.setData([
    [ 'Animals', 'Foods' ],
    [ 'Elephant', 'Apple' ],
    [ 'Bird', 'Orange' ]
  ]);
Special Elements
Terminal (from Box)
A box which spins up a pseudo terminal and renders the output. Useful for writing a terminal multiplexer, or something similar to an mc-like file manager. Requires term.js and pty.js to be installed. See example/multiplex.js for an example terminal multiplexer.

Options:
Inherits all from Box.
handler - Handler for input data.
shell - Name of shell. $SHELL by default.
args - Args for shell.
cursor - Can be line, underline, and block.
terminal - Terminal name (Default: xterm).
env - Object for process env.
Other options similar to term.js'.
Properties:
Inherits all from Box.
term - Reference to the headless term.js terminal.
pty - Reference to the pty.js pseudo terminal.
Events:
Inherits all from Box.
title - Window title from terminal.
Other events similar to ScrollableBox.
Methods:
Inherits all from Box.
write(data) - Write data to the terminal.
screenshot([xi, xl, yi, xl]) - Nearly identical to element.screenshot, however, the specified region includes the terminal's entire scrollback, rather than just what is visible on the screen.
Other methods similar to ScrollableBox.
Image (from Box)
Display an image in the terminal (jpeg, png, gif) using either blessed's internal png/gif-to-terminal renderer (using a ANSIImage element) or using w3mimgdisplay (using a OverlayImage element).

Options:
Inherits all from Box.
file - Path to image.
type - ansi or overlay. Whether to render the file as ANSI art or using w3m to overlay. See the ANSIImage element for more information/options. (default: ansi).
Properties:
Inherits all from Box.
See ANSIImage element
See OverlayImage element
Events:
Inherits all from Box.
See ANSIImage element
See OverlayImage element
Methods:
Inherits all from Box.
See ANSIImage element
See OverlayImage element
ANSIImage (from Box)
Convert any .png file (or .gif, see below) to an ANSI image and display it as an element. This differs from the OverlayImage element in that it uses blessed's internal PNG/GIF parser and does not require external dependencies.

Blessed uses an internal from-scratch PNG/GIF reader because no other javascript PNG reader supports Adam7 interlaced images (much less pass the png test suite).

The blessed PNG reader supports adam7 deinterlacing, animation (APNG), all color types, bit depths 1-32, alpha, alpha palettes, and outputs scaled bitmaps (cellmaps) in blessed for efficient rendering to the screen buffer. It also uses some code from libcaca/libcucul to add density ASCII characters in order to give the image more detail in the terminal.

If a corrupt PNG or a non-PNG is passed in, blessed will display error text in the element.

.gif files are also supported via a javascript implementation (they are internally converted to bitmaps and fed to the PNG renderer). Any other image format is support only if the user has imagemagick (convert and identify) installed.

Options:
Inherits all from Box.
file - URL or path to PNG/GIF file. Can also be a buffer.
scale - Scale cellmap down (0-1.0) from its original pixel width/height (Default: 1.0).
width/height - This differs from other element's width or height in that only one of them is needed: blessed will maintain the aspect ratio of the image as it scales down to the proper number of cells. NOTE: PNG/GIF's are always automatically shrunken to size (based on scale) if a width or height is not given.
ascii - Add various "density" ASCII characters over the rendering to give the image more detail, similar to libcaca/libcucul (the library mplayer uses to display videos in the terminal).
animate - Whether to animate if the image is an APNG/animating GIF. If false, only display the first frame or IDAT (Default: true).
speed - Set the speed of animation. Slower: 0.0-1.0. Faster: 1-1000. It cannot go faster than 1 frame per millisecond, so 1000 is the fastest. (Default: 1.0)
optimization - mem or cpu. If optimizing for memory, animation frames will be rendered to bitmaps as the animation plays, using less memory. Optimizing for cpu will precompile all bitmaps beforehand, which may be faster, but might also OOM the process on large images. (Default: mem).
Properties:
Inherits all from Box.
img - Image object from the png reader.
img.width - Pixel width.
img.height - Pixel height.
img.bmp - Image bitmap.
img.cellmap - Image cellmap (bitmap scaled down to cell size).
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
setImage(file) - Set the image in the box to a new path. File can be a path, url, or buffer.
clearImage() - Clear the image.
play() - Play animation if it has been paused or stopped.
pause() - Pause animation.
stop() - Stop animation.
OverlayImage (from Box)
Display an image in the terminal (jpeg, png, gif) using w3mimgdisplay. Requires w3m to be installed. X11 required: works in xterm, urxvt, and possibly other terminals.

Options:
Inherits all from Box.
file - Path to image.
ansi - Render the file as ANSI art instead of using w3m to overlay Internally uses the ANSIImage element. See the ANSIImage element for more information/options. (Default: true).
w3m - Path to w3mimgdisplay. If a proper w3mimgdisplay path is not given, blessed will search the entire disk for the binary.
search - Whether to search /usr, /bin, and /lib for w3mimgdisplay (Default: true).
Properties:
Inherits all from Box.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
setImage(img, [callback]) - Set the image in the box to a new path.
clearImage([callback]) - Clear the current image.
imageSize(img, [callback]) - Get the size of an image file in pixels.
termSize([callback]) - Get the size of the terminal in pixels.
getPixelRatio([callback]) - Get the pixel to cell ratio for the terminal.
Note: All methods above can be synchronous as long as the host version of node supports spawnSync.
Video (from Box)
A box which spins up a pseudo terminal in order to render a video via mplayer -vo caca or mpv --vo caca. Requires mplayer or mpv to be installed with libcaca support.

Options:
Inherits all from Box.
file - Video to play.
start - Start time in seconds.
Properties:
Inherits all from Box.
tty - The terminal element running mplayer or mpv.
Events:
Inherits all from Box.
Methods:
Inherits all from Box.
Layout (from Element)
A layout which can position children automatically based on a renderer method (experimental - the mechanics of this element may be changed in the future!).

By default, the Layout element automatically positions children as if they were display: inline-block; in CSS.

Options:
Inherits all from Element.
renderer - A callback which is called right before the children are iterated over to be rendered. Should return an iterator callback which is called on each child element: iterator(el, i).
layout - Using the default renderer, it provides two layouts: inline, and grid. inline is the default and will render akin to inline-block. grid will create an automatic grid based on element dimensions. The grid cells' width and height are always determined by the largest children in the layout.
Properties:
Inherits all from Element.
Events:
Inherits all from Element.
Methods:
Inherits all from Element.
renderer(coords) - A callback which is called right before the children are iterated over to be rendered. Should return an iterator callback which is called on each child element: iterator(el, i).
isRendered(el) - Check to see if a previous child element has been rendered and is visible on screen. This is only useful for checking child elements that have already been attempted to be rendered! see the example below.
getLast(i) - Get the last rendered and visible child element based on an index. This is useful for basing the position of the current child element on the position of the last child element.
getLastCoords(i) - Get the last rendered and visible child element coords based on an index. This is useful for basing the position of the current child element on the position of the last child element. See the example below.
Rendering a Layout for child elements
Notes
You must always give Layout a width and height. This is a chicken-and-egg problem: blessed cannot calculate the width and height dynamically before the children are positioned.

border and padding are already calculated into the coords object the renderer receives, so there is no need to account for it in your renderer.

Try to set position for children using el.position. el.position is the most primitive "to-be-rendered" way to set coordinates. Setting el.left directly has more dynamic behavior which may interfere with rendering.

Some definitions for coords (otherwise known as el.lpos):

coords.xi - the absolute x coordinate of the left side of a rendered element. It is absolute: relative to the screen itself.
coords.xl - the absolute x coordinate of the right side of a rendered element. It is absolute: relative to the screen itself.
coords.yi - the absolute y coordinate of the top side of a rendered element. It is absolute: relative to the screen itself.
coords.yl - the absolute y coordinate of the bottom side of a rendered element. It is absolute: relative to the screen itself.
Note again: the coords the renderer receives for the Layout already has border and padding subtracted, so you do not have to account for these. The children do not.

Example
Here is an example of how to provide a renderer. Note that this is also the default renderer if none is provided. This renderer will render each child as though they were display: inline-block; in CSS, as if there were a dynamically sized horizontal grid from left to right.

var layout = blessed.layout({
  parent: screen,
  top: 'center',
  left: 'center',
  width: '50%',
  height: '50%',
  border: 'line',
  style: {
    bg: 'red',
    border: {
      fg: 'blue'
    }
  },
  // NOTE: This is already the default renderer if none is provided!
  renderer: function(coords) {
    var self = this;

    // The coordinates of the layout element
    var width = coords.xl - coords.xi
      , height = coords.yl - coords.yi
      , xi = coords.xi
      , xl = coords.xl
      , yi = coords.yi
      , yl = coords.yl;

    // The current row offset in cells (which row are we on?)
    var rowOffset = 0;

    // The index of the first child in the row
    var rowIndex = 0;

    return function iterator(el, i) {
      // Make our children shrinkable. If they don't have a height, for
      // example, calculate it for them.
      el.shrink = true;

      // Find the previous rendered child's coordinates
      var last = self.getLastCoords(i);

      // If there is no previously rendered element, we are on the first child.
      if (!last) {
        el.position.left = 0;
        el.position.top = 0;
      } else {
        // Otherwise, figure out where to place this child. We'll start by
        // setting it's `left`/`x` coordinate to right after the previous
        // rendered element. This child will end up directly to the right of it.
        el.position.left = last.xl - xi;

        // If our child does not overlap the right side of the Layout, set it's
        // `top`/`y` to the current `rowOffset` (the coordinate for the current
        // row).
        if (el.position.left + el.width <= width) {
          el.position.top = rowOffset;
        } else {
          // Otherwise we need to start a new row and calculate a new
          // `rowOffset` and `rowIndex` (the index of the child on the current
          // row).
          rowOffset += self.children.slice(rowIndex, i).reduce(function(out, el) {
            if (!self.isRendered(el)) return out;
            out = Math.max(out, el.lpos.yl - el.lpos.yi);
            return out;
          }, 0);
          rowIndex = i;
          el.position.left = 0;
          el.position.top = rowOffset;
        }
      }

      // If our child overflows the Layout, do not render it!
      // Disable this feature for now.
      if (el.position.top + el.height > height) {
        // Returning false tells blessed to ignore this child.
        // return false;
      }
    };
  }
});

for (var i = 0; i < 10; i++) {
  blessed.box({
    parent: layout,
    width: i % 2 === 0 ? 10 : 20,
    height: i % 2 === 0 ? 5 : 10,
    border: 'line'
  });
}
Other
Helpers
All helpers reside on blessed.helpers or blessed.

merge(a, b) - Merge objects a and b into object a.
asort(obj) - Sort array alphabetically by name prop.
hsort(obj) - Sort array numerically by index prop.
findFile(start, target) - Find a file at start directory with name target.
escape(text) - Escape content's tags to be passed into el.setContent(). Example: box.setContent('escaped tag: ' + blessed.escape('{bold}{/bold}'));
parseTags(text) - Parse tags into SGR escape codes.
generateTags(style, text) - Generate text tags based on style object.
attrToBinary(style, element) - Convert style attributes to binary format.
stripTags(text) - Strip text of tags and SGR sequences.
cleanTags(text) - Strip text of tags, SGR escape code, and leading/trailing whitespace.
dropUnicode(text) - Drop text of any >U+FFFF characters.
Mechanics
Content & Tags
Every element can have text content via setContent. If tags: true was passed to the element's constructor, the content can contain tags. For example:

box.setContent('hello {red-fg}{green-bg}{bold}world{/bold}{/green-bg}{/red-fg}');
To make this more concise {/} cancels all character attributes.

box.setContent('hello {red-fg}{green-bg}{bold}world{/}');
Colors
Blessed tags support the basic 16 colors for colors, as well as up to 256 colors.

box.setContent('hello {red-fg}{green-bg}world{/}');
Tags can also use hex colors (which will be reduced to the most accurate terminal color):

box.setContent('hello {#ff0000-fg}{#00ff00-bg}world{/}');
Attributes
Blessed supports all terminal attributes, including bold, underline, blink, inverse, and invisible.

box.setContent('hello {bold}world{/bold}');
Alignment
Newlines and alignment are also possible in content.

box.setContent('hello\n'
  + '{right}world{/right}\n'
  + '{center}foo{/center}\n');
  + 'left{|}right');
This will produce a box that looks like:

| hello |
| world |
| foo |
| left right |
Escaping
Escaping can either be done using blessed.escape()

box.setContent('here is an escaped tag: ' + blessed.escape('{bold}{/bold}'));
Or with the special {open} and {close} tags:

box.setContent('here is an escaped tag: {open}bold{close}{open}/bold{close}');
Either will produce:

here is an escaped tag: {bold}{/bold}
SGR Sequences
Content can also handle SGR escape codes. This means if you got output from a program, say git log for example, you can feed it directly to an element's content and the colors will be parsed appropriately.

This means that while {red-fg}foo{/red-fg} produces ^[[31mfoo^[[39m, you could just feed ^[[31mfoo^[[39m directly to the content.

Style
The style option controls most of the visual aspects of an element.

  style: {
    fg: 'blue',
    bg: 'black',
    bold: true,
    underline: false,
    blink: false,
    inverse: false,
    invisible: false,
    transparent: false,
    border: {
      fg: 'blue',
      bg: 'red'
    },
    scrollbar: {
      bg: 'blue'
    },
    focus: {
      bg: 'red'
    },
    hover: {
      bg: 'red'
    }
  }
Colors
Colors can be the names of any of the 16 basic terminal colors, along with hex values (e.g. #ff0000) for 256 color terminals. If 256 or 88 colors is not supported. Blessed with reduce the color to whatever is available.

Attributes
Blessed supports all terminal attributes, including bold, underline, blink, inverse, and invisible. Attributes are represented as bools in the style object.

Transparency
Blessed can set the opacity of an element to 50% using style.transparent = true;. While this seems like it normally shouldn't be possible in a terminal, blessed will use a color blending algorithm to blend the element of the foremost element with the background behind it. Obviously characters cannot be blended, but background colors can.

Shadow
Translucent shadows are also an option when it comes to styling an element. This option will create a 50% opacity 2-cell wide, 1-cell high shadow offset to the bottom-right.

shadow: true
Effects
Blessed supports hover and focus styles. (Hover is only useful is mouse input is enabled).

  style: {
    hover: {
      bg: 'red'
    },
    focus: {
      border: {
        fg: 'blue'
      }
    }
  }
Scrollbar
On scrollable elements, blessed will support style options for the scrollbar, such as:

style: {
  scrollbar: {
    bg: 'red',
    fg: 'blue'
  }
}
As a main option, scrollbar will either take a bool or an object:

scrollbar: {
  ch: ' '
}
Or:

scrollbar: true
Events
Events in Blessed work similar to the traditional node.js model, with one important difference: they have a concept of a tree and event bubbling.

Event Bubbling
Events can bubble in blessed. For example:

Receiving all click events for box (a normal event listener):

box.on('click', function(mouse) {
  box.setContent('You clicked ' + mouse.x + ', ' + mouse.y + '.');
  screen.render();
});
Receiving all click events for box, as well as all of its children:

box.on('element click', function(el, mouse) {
  box.setContent('You clicked '
    + el.type + ' at ' + mouse.x + ', ' + mouse.y + '.');
  screen.render();
  if (el === box) {
    return false; // Cancel propagation.
  }
});
el gets passed in as the first argument. It refers to the target element the event occurred on. Returning false will cancel propagation up the tree.

Positioning
Offsets may be a number, a percentage (e.g. 50%), or a keyword (e.g. center).

Dimensions may be a number, or a percentage (e.g. 50%).

Positions are treated almost exactly the same as they are in CSS/CSSOM when an element has the position: absolute CSS property.

When an element is created, it can be given coordinates in its constructor:

var box = blessed.box({
  left: 'center',
  top: 'center',
  bg: 'yellow',
  width: '50%',
  height: '50%'
});
This tells blessed to create a box, perfectly centered relative to its parent, 50% as wide and 50% as tall as its parent.

Percentages can also have offsets applied to them:

  ...
  height: '50%-1',
  left: '45%+1',
  ...
To access the calculated offsets, relative to the parent:

console.log(box.left);
console.log(box.top);
To access the calculated offsets, absolute (relative to the screen):

console.log(box.aleft);
console.log(box.atop);
Overlapping offsets and dimensions greater than parents'
This still needs to be tested a bit, but it should work.

Rendering
To actually render the screen buffer, you must call render.

box.setContent('Hello {#0fe1ab-fg}world{/}.');
screen.render();
Elements are rendered with the lower elements in the children array being painted first. In terms of the painter's algorithm, the lowest indicies in the array are the furthest away, just like in the DOM.

Artificial Cursors
Terminal cursors can be tricky. They all have different custom escape codes to alter. As an experimental alternative, blessed can draw a cursor for you, allowing you to have a custom cursor that you control.

var screen = blessed.screen({
  cursor: {
    artificial: true,
    shape: 'line',
    blink: true,
    color: null // null for default
  }
});
That's it. It's controlled the same way as the regular cursor.

To create a custom cursor:

var screen = blessed.screen({
  cursor: {
    artificial: true,
    shape: {
      bg: 'red',
      fg: 'white',
      bold: true,
      ch: '#'
    },
    blink: true
  }
});
Multiple Screens
Blessed supports the ability to create multiple screens. This may not seem useful at first, but if you're writing a program that serves terminal interfaces over http, telnet, or any other protocol, this can be very useful.

Server Side Usage
A simple telnet server might look like this (see examples/blessed-telnet.js for a full example):

var blessed = require('blessed');
var telnet = require('telnet2');

telnet({ tty: true }, function(client) {
  client.on('term', function(terminal) {
    screen.terminal = terminal;
    screen.render();
  });

  client.on('size', function(width, height) {
    client.columns = width;
    client.rows = height;
    client.emit('resize');
  });

  var screen = blessed.screen({
    smartCSR: true,
    input: client,
    output: client,
    terminal: 'xterm-256color',
    fullUnicode: true
  });

  client.on('close', function() {
    if (!screen.destroyed) {
      screen.destroy();
    }
  });

  screen.key(['C-c', 'q'], function(ch, key) {
    screen.destroy();
  });

  screen.on('destroy', function() {
    if (client.writable) {
      client.destroy();
    }
  });

  screen.data.main = blessed.box({
    parent: screen,
    left: 'center',
    top: 'center',
    width: '80%',
    height: '90%',
    border: 'line',
    content: 'Welcome to my server. Here is your own private session.'
  });

  screen.render();
}).listen(2300);
Once you've written something similar and started it, you can simply telnet into your blessed app:

$ telnet localhost 2300
Creating a netcat server would also work as long as you disable line buffering and terminal echo on the commandline via stty: $ stty -icanon -echo; ncat localhost 2300; stty icanon echo

Or by using netcat's -t option: $ ncat -t localhost 2300

Creating a streaming http 1.1 server than runs in the terminal is possible by curling it with special arguments: $ curl -sSNT. localhost:8080.

There are currently no examples of netcat/nc/ncat or http->curl servers yet.

The blessed.screen constructor can accept input, output, and term arguments to aid with this. The multiple screens will be managed internally by blessed. The programmer just has to keep track of the references, however, to avoid ambiguity, it's possible to explicitly dictate which screen a node is part of by using the screen option when creating an element.

The screen.destroy() method is also crucial: this will clean up all event listeners the screen has bound and make sure it stops listening on the event loop. Make absolutely certain to remember to clean up your screens once you're done with them.

A tricky part is making sure to include the ability for the client to send the TERM which is reset on the serverside, and the terminal size, which is should also be reset on the serverside. Both of these capabilities are demonstrated above.

For a working example of a blessed telnet server, see examples/blessed-telnet.js.

Notes
Windows Compatibility
Currently there is no mouse or resize event support on Windows.

Windows users will need to explicitly set term when creating a screen like so (NOTE: This is no longer necessary as of the latest versions of blessed. This is now handled automatically):

var screen = blessed.screen({ terminal: 'windows-ansi' });
Low-level Usage
This will actually parse the xterm terminfo and compile every string capability to a javascript function:

var blessed = require('blessed');

var tput = blessed.tput({
  terminal: 'xterm-256color',
  extended: true
});

process.stdout.write(tput.setaf(4) + 'Hello' + tput.sgr0() + '\n');
To play around with it on the command line, it works just like tput:

$ tput.js setaf 2
$ tput.js sgr0
$ echo "$(tput.js setaf 2)Hello World$(tput.js sgr0)"
The main functionality is exposed in the main blessed module:

var blessed = require('blessed')
  , program = blessed.program();

program.key('q', function(ch, key) {
  program.clear();
  program.disableMouse();
  program.showCursor();
  program.normalBuffer();
  process.exit(0);
});

program.on('mouse', function(data) {
  if (data.action === 'mousemove') {
    program.move(data.x, data.y);
    program.bg('red');
    program.write('x');
    program.bg('!red');
  }
});

program.alternateBuffer();
program.enableMouse();
program.hideCursor();
program.clear();

program.move(1, 1);
program.bg('black');
program.write('Hello world', 'blue fg');
program.setx((program.cols / 2 | 0) - 4);
program.down(5);
program.write('Hi again!');
program.bg('!black');
program.feed();
Testing
Most tests contained in the test/ directory are interactive. It's up to the programmer to determine whether the test is properly displayed. In the future it might be better to do something similar to vttest.

Examples
Examples can be found in examples/.

Linux console render lines correctly on Ubuntu.
You need to install the ncurses-base package and the ncurses-term package. (#98)
Why do vertical lines look chopped up in iTerm2?
All ACS vertical lines look this way in iTerm2 with the default font.
Why can't I use my mouse in Terminal.app?
Terminal.app does not support mouse events.
Why doesn't the OverlayImage element appear in my terminal?
The OverlayImage element uses w3m to display images. This generally only works on X11+xterm/urxvt, but it may work on other unix terminals.
Why can't my mouse clicks register beyond 255 cells?
Older versions of VTE do not support any modern mouse protocol. On top of that, the old X10 protocol it does implement is bugged. Through several workarounds we've managed to get the cell limit from 127 to 255. If you're not happy with this, you may want to look into using xterm or urxvt, or a terminal which uses a modern VTE, like gnome-terminal.
Is blessed efficient?
Yes. Blessed implements CSR and uses the painter's algorithm to render the screen. It maintains two screen buffers so it only needs to render what has changed on the terminal screen.
Will blessed work with all terminals?
Yes. Blessed has a terminfo/termcap parser and compiler that was written from scratch. It should work with every terminal as long as a terminfo file is provided. If you notice any compatibility issues in your termial, do not hesitate to post an issue.
What is "curses" and "ncurses"?
"curses" was an old library written in the early days of unix which allowed a programmer to easily manipulate the cursor in order to render the screen. "ncurses" is a free reimplementation of curses. It improved upon it quite a bit by focusing more on terminal compatibility and is now the standard library for implementing terminal programs. Blessed uses neither of these, and instead handles terminal compatibility itself.
What is the difference between blessed and blessed-contrib?
blessed is a major piece of code which reimplements curses from the ground up. A UI API is then layered on top of this. blessed-contrib is a popular library built on top of blessed which makes clever use of modules to implement useful widgets like graphs, ascii art, and so on.
Are there blessed-like solutions for non-javascript platforms?
Yes. There are some fantastic solutions out there.
Perl: Curses::UI
Python: Urwid
Go: termui & termbox-go
Contribution and License Agreement
If you contribute code to this project, you are implicitly allowing your code to be distributed under the MIT license. You are also implicitly verifying that all code is your original work. </legalese>

License
Copyright (c) 2013-2015, Christopher Jeffrey. (MIT License)

See LICENSE for more info.



Inquirer.js.

Documentation
npm
Search packages
Search
inquirer
TypeScript icon, indicating that this package has built-in type declarations
12.6.3 ‚Ä¢ Public ‚Ä¢ Published 22 days ago
Inquirer Logo

Inquirer.js
npm FOSSA Status

A collection of common interactive command line user interfaces.

[!IMPORTANT] This is the legacy version of Inquirer.js. While it still receives maintenance, it is not actively developed. For the new Inquirer, see @inquirer/prompts.

Special Thanks
Graphite

Graphite is the AI developer productivity platform helping teams on GitHub ship higher quality software, faster
Table of Contents
Documentation
Installation
Examples
Methods
Objects
Question
Answers
Separator
Prompt Types
User Interfaces and Layouts
Reactive Interface
Support
Known issues
News
Contributing
License
Plugins
Goal and Philosophy
Inquirer.js strives to be an easily embeddable and beautiful command line interface for Node.js (and perhaps the "CLI Xanadu").

Inquirer.js should ease the process of

providing error feedback
asking questions
parsing input
validating answers
managing hierarchical prompts
Note: Inquirer.js provides the user interface and the inquiry session flow. If you're searching for a full blown command line program utility, then check out commander, vorpal or args.

Documentation

Installation

npm yarn
npm install inquirer
yarn add inquirer
import inquirer from 'inquirer';

inquirer
  .prompt([
    /* Pass your questions in here */
  ])
  .then((answers) => {
    // Use user feedback for... whatever!!
  })
  .catch((error) => {
    if (error.isTtyError) {
      // Prompt couldn't be rendered in the current environment
    } else {
      // Something else went wrong
    }
  });

Examples (Run it and see it)
Check out the packages/inquirer/examples/ folder for code and interface examples.

yarn node packages/inquirer/examples/pizza.js
yarn node packages/inquirer/examples/checkbox.js
# etc...
Methods

[!WARNING] Those interfaces are not necessary for modern Javascript, while still maintained, they're depreciated. We highly encourage you to adopt the more ergonomic and modern API with @inquirer/prompts. Both inquirer and @inquirer/prompts are usable at the same time, so you can progressively migrate.

inquirer.prompt(questions, answers) -> promise
Launch the prompt interface (inquiry session)

questions (Array) containing Question Object (using the reactive interface, you can also pass a Rx.Observable instance)
answers (object) contains values of already answered questions. Inquirer will avoid asking answers already provided here. Defaults {}.
returns a Promise
inquirer.registerPrompt(name, prompt)
Register prompt plugins under name.

name (string) name of the this new prompt. (used for question type)
prompt (object) the prompt object itself (the plugin)
inquirer.createPromptModule() -> prompt function
Create a self contained inquirer module. If you don't want to affect other libraries that also rely on inquirer when you overwrite or add new prompt types.

const prompt = inquirer.createPromptModule();

prompt(questions).then(/* ... */);
Objects

Question
A question object is a hash containing question related values:

type: (String) Type of the prompt. Defaults: input - Possible values: input, number, confirm, list, rawlist, expand, checkbox, password, editor
name: (String) The name to use when storing the answer in the answers hash. If the name contains periods, it will define a path in the answers hash.
message: (String|Function) The question to print. If defined as a function, the first parameter will be the current inquirer session answers. Defaults to the value of name (followed by a colon).
default: (String|Number|Boolean|Array|Function) Default value(s) to use if nothing is entered, or a function that returns the default value(s). If defined as a function, the first parameter will be the current inquirer session answers.
choices: (Array|Function) Choices array or a function returning a choices array. If defined as a function, the first parameter will be the current inquirer session answers. Array values can be simple numbers, strings, or objects containing a name (to display in list), a value (to save in the answers hash), and a short (to display after selection) properties. The choices array can also contain a Separator.
validate: (Function) Receive the user input and answers hash. Should return true if the value is valid, and an error message (String) otherwise. If false is returned, a default error message is provided.
filter: (Function) Receive the user input and answers hash. Returns the filtered value to be used inside the program. The value returned will be added to the Answers hash.
transformer: (Function) Receive the user input, answers hash and option flags, and return a transformed value to display to the user. The transformation only impacts what is shown while editing. It does not modify the answers hash.
when: (Function, Boolean) Receive the current user answers hash and should return true or false depending on whether or not this question should be asked. The value can also be a simple boolean.
pageSize: (Number) Change the number of lines that will be rendered when using list, rawList, expand or checkbox.
prefix: (String) Change the default prefix message.
suffix: (String) Change the default suffix message.
askAnswered: (Boolean) Force to prompt the question if the answer already exists.
loop: (Boolean) Enable list looping. Defaults: true
waitUserInput: (Boolean) Flag to enable/disable wait for user input before opening system editor - Defaults: true
default, choices(if defined as functions), validate, filter and when functions can be called asynchronously. Either return a promise or use this.async() to get a callback you'll call with the final value.

{
  /* Preferred way: with promise */
  filter() {
    return new Promise(/* etc... */);
  },

  /* Legacy way: with this.async */
  validate: function (input) {
    // Declare function as asynchronous, and save the done callback
    const done = this.async();

    // Do async stuff
    setTimeout(function() {
      if (typeof input !== 'number') {
        // Pass the return value in the done callback
        done('You need to provide a number');
      } else {
        // Pass the return value in the done callback
        done(null, true);
      }
    }, 3000);
  }
}
Answers
A key/value hash containing the client answers in each prompt.

Key The name property of the question object
Value (Depends on the prompt)
confirm: (Boolean)
input : User input (filtered if filter is defined) (String)
number: User input (filtered if filter is defined) (Number)
rawlist, list : Selected choice value (or name if no value specified) (String)
Separator
A separator can be added to any choices array:

// In the question object
choices: [ "Choice A", new inquirer.Separator(), "choice B" ]

// Which'll be displayed this way
[?] What do you want to do?
 > Order a pizza
   Make a reservation
   --------
   Ask opening hours
   Talk to the receptionist
The constructor takes a facultative String value that'll be use as the separator. If omitted, the separator will be --------.

Separator instances have a property type equal to separator. This should allow tools fa√ßading Inquirer interface from detecting separator types in lists.


Prompt types
Note:: allowed options written inside square brackets ([]) are optional. Others are required.

List - {type: 'list'}
Take type, name, message, choices[, default, filter, loop] properties. (Note: default must be set to the index or value of one of the entries in choices)

List prompt

Raw List - {type: 'rawlist'}
Take type, name, message, choices[, default, filter, loop] properties. (Note: default must be set to the index of one of the entries in choices)

Raw list prompt

Expand - {type: 'expand'}
Take type, name, message, choices[, default] properties. Note: default must be the index of the desired default selection of the array. If default key not provided, then help will be used as default choice

Note that the choices object will take an extra parameter called key for the expand prompt. This parameter must be a single (lowercased) character. The h option is added by the prompt and shouldn't be defined by the user.

See examples/expand.js for a running example.

Expand prompt closed Expand prompt expanded

Checkbox - {type: 'checkbox'}
Take type, name, message, choices[, filter, validate, default, loop] properties. default is expected to be an Array of the checked choices value.

Choices marked as {checked: true} will be checked by default.

Choices whose property disabled is truthy will be unselectable. If disabled is a string, then the string will be outputted next to the disabled choice, otherwise it'll default to "Disabled". The disabled property can also be a synchronous function receiving the current answers as argument and returning a boolean or a string.

Checkbox prompt

Confirm - {type: 'confirm'}
Take type, name, message, [default, transformer] properties. default is expected to be a boolean if used.

Confirm prompt

Input - {type: 'input'}
Take type, name, message[, default, filter, validate, transformer] properties.

Input prompt

Input - {type: 'number'}
Take type, name, message[, default, filter, validate, transformer] properties.

Password - {type: 'password'}
Take type, name, message, mask,[, default, filter, validate] properties.

Password prompt

Note that mask is required to hide the actual user input.

Editor - {type: 'editor'}
Take type, name, message[, default, filter, validate, postfix, waitUserInput] properties

Launches an instance of the users preferred editor on a temporary file. Once the user exits their editor, the contents of the temporary file are read in as the result. The editor to use is determined by reading the $VISUAL or $EDITOR environment variables. If neither of those are present, notepad (on Windows) or vim (Linux or Mac) is used.

The postfix property is useful if you want to provide an extension.


Use in Non-Interactive Environments
prompt() requires that it is run in an interactive environment. (I.e. One where process.stdin.isTTY is true). If prompt() is invoked outside of such an environment, then prompt() will return a rejected promise with an error. For convenience, the error will have a isTtyError property to programmatically indicate the cause.


Reactive interface
Internally, Inquirer uses the JS reactive extension to handle events and async flows.

This mean you can take advantage of this feature to provide more advanced flows. For example, you can dynamically add questions to be asked:

const prompts = new Rx.Subject();
inquirer.prompt(prompts);

// At some point in the future, push new questions
prompts.next({
  /* question... */
});
prompts.next({
  /* question... */
});

// When you're done
prompts.complete();
And using the return value process property, you can access more fine grained callbacks:

inquirer.prompt(prompts).ui.process.subscribe(onEachAnswer, onError, onComplete);
Support (OS Terminals)

You should expect mostly good support for the CLI below. This does not mean we won't look at issues found on other command line - feel free to report any!

Mac OS:
Terminal.app
iTerm
Windows (Known issues):
Windows Terminal
ConEmu
cmd.exe
Powershell
Cygwin
Linux (Ubuntu, openSUSE, Arch Linux, etc):
gnome-terminal (Terminal GNOME)
konsole
Known issues

nodemon - Makes the arrow keys print gibrish on list prompts. Workaround: Add { stdin : false } in the configuration file or pass --no-stdin in the CLI. Please refer to this issue

grunt-exec - Calling a node script that uses Inquirer from grunt-exec can cause the program to crash. To fix this, add to your grunt-exec config stdio: 'inherit'. Please refer to this issue

Windows network streams - Running Inquirer together with network streams in Windows platform inside some terminals can result in process hang. Workaround: run inside another terminal. Please refer to this issue

News on the march (Release notes)

Please refer to the GitHub releases section for the changelog

Contributing

Unit test Please add a unit test for every new feature or bug fix. yarn test to run the test suite.

Documentation Add documentation for every API change. Feel free to send typo fixes and better docs!

We're looking to offer good support for multiple prompts and environments. If you want to help, we'd like to keep a list of testers for each terminal/OS so we can contact you and get feedback before release. Let us know if you want to be added to the list (just tweet to @vaxilart) or just add your name to the wiki

License

Copyright (c) 2023 Simon Boudrias (twitter: @vaxilart)
Licensed under the MIT license.

Plugins

You can build custom prompts, or use open sourced ones. See @inquirer/core documentation for building custom prompts.

You can either call the custom prompts directly (preferred), or you can register them (depreciated):

import customPrompt from '$$$/custom-prompt';

// 1. Preferred solution with new plugins
const answer = await customPrompt({ ...config });

// 2. Depreciated interface (or for old plugins)
inquirer.registerPrompt('custom', customPrompt);
const answers = await inquirer.prompt([
  {
    type: 'custom',
    ...config,
  },
]);
When using Typescript and registerPrompt, you'll also need to define your prompt signature. Since Typescript is static, we cannot infer available plugins from function calls.

import customPrompt from '$$$/custom-prompt';

declare module 'inquirer' {
  interface QuestionMap {
    // 1. Easiest option
    custom: Parameters<typeof customPrompt>[0];

    // 2. Or manually define the prompt config
    custom_alt: { message: string; option: number[] };
  }
}
Prompts
autocomplete
Presents a list of options as the user types, compatible with other packages such as fuzzy (for search)

autocomplete prompt

checkbox-plus
Checkbox list with autocomplete and other additions

checkbox-plus

inquirer-date-prompt
Customizable date/time selector with localization support

Date Prompt

datetime
Customizable date/time selector using both number pad and arrow keys

Datetime Prompt

inquirer-select-line
Prompt for selecting index in array where add new element

inquirer-select-line gif

command
Simple prompt with command history and dynamic autocomplete

inquirer-fuzzy-path
Prompt for fuzzy file/directory selection.

inquirer-fuzzy-path

inquirer-emoji
Prompt for inputting emojis.

inquirer-emoji

inquirer-chalk-pipe
Prompt for input chalk-pipe style strings

inquirer-chalk-pipe

inquirer-search-checkbox
Searchable Inquirer checkbox
inquirer-search-checkbox

inquirer-search-list
Searchable Inquirer list

inquirer-search-list

inquirer-prompt-suggest
Inquirer prompt for your less creative users.

inquirer-prompt-suggest

inquirer-s3
An S3 object selector for Inquirer.

inquirer-s3

inquirer-autosubmit-prompt
Auto submit based on your current input, saving one extra enter

inquirer-file-tree-selection-prompt
Inquirer prompt for to select a file or directory in file tree

inquirer-file-tree-selection-prompt

inquirer-tree-prompt
Inquirer prompt to select from a tree

inquirer-tree-prompt

inquirer-table-prompt
A table-like prompt for Inquirer.

inquirer-table-prompt

inquirer-table-input
A table editing prompt for Inquirer.

inquirer-table-prompt

inquirer-interrupted-prompt
Turning any existing inquirer and its plugin prompts into prompts that can be interrupted with a custom key.

inquirer-interrupted-prompt

inquirer-press-to-continue
A "press any key to continue" prompt for Inquirer.js

inquirer-press-to-continue

Readme
Keywords
answeranswersaskbaseclicommandcommand-lineconfirmenquirergenerategeneratorhyperinputinquireinquirerinterfaceitermjavascriptmenunodenodejspromptpromptlypromptsquestionreadlinescaffoldscaffolderscaffoldingstdinstdoutterminalttyuiyeomanyozsh
Package Sidebar
Install
npm i inquirer

Repository
github.com/SBoudrias/Inquirer.js

Homepage
github.com/SBoudrias/Inquirer.js/blob/main/packages/inquirer/README.

Version 12.6.3 License
MIT.



YN.

yn
Parse yes/no like values.

Useful for validating answers of a CLI prompt.

The following case-insensitive values are recognized:

'y', 'yes', 'true', true, '1', 1, 'n', 'no', 'false', false, '0', 0, 'on', 'off'
Enable lenient mode to gracefully handle typos.

Install
$ npm install yn
Usage
import yn from 'yn';

yn('y');
//=> true

yn('NO');
//=> false

yn(true);
//=> true

yn('abomasum');
//=> undefined

yn('abomasum', {default: false});
//=> false

yn('mo', {lenient: true});
//=> false
Unrecognized values return undefined.

API
yn(input, options?)
input
Type: unknown

The value that should be converted.

options
Type: object

lenient
Type: boolean
Default: false

Use a key distance-based score to leniently accept typos of yes and no.

default
Type: boolean
Default: undefined

The default value if no match was found.



CLi-table3.

cli-table3
npm version Build Status

This utility allows you to render unicode-aided tables on the command line from your node.js scripts.

cli-table3 is based on (and api compatible with) the original cli-table, and cli-table2, which are both unmaintained. cli-table3 includes all the additional features from cli-table2.

Screenshot

Features not in the original cli-table
Ability to make cells span columns and/or rows.
Ability to set custom styles per cell (border characters/colors, padding, etc).
Vertical alignment (top, bottom, center).
Word wrapping options.
More robust truncation of cell text that contains ansi color characters.
Better handling of text color that spans multiple lines.
API compatible with the original cli-table.
Exhaustive test suite including the entire original cli-table test suite.
Lots of examples auto-generated from the tests (basic, advanced).
Features
Customizable characters that constitute the table.
Color/background styling in the header through colors.js @colors/colors
Column width customization
Text truncation based on predefined widths
Text alignment (left, right, center)
Padding (left, right)
Easy-to-use API
Installation
npm install cli-table3
How to use
A portion of the unit test suite is used to generate examples:

basic-usage - covers basic uses.
advanced - covers using the new column and row span features.
This package is api compatible with the original cli-table. So all the original documentation still applies (copied below).

Horizontal Tables
var Table = require('cli-table3');

// instantiate
var table = new Table({
    head: ['TH 1 label', 'TH 2 label']
  , colWidths: [100, 200]
});

// table is an Array, so you can `push`, `unshift`, `splice` and friends
table.push(
    ['First value', 'Second value']
  , ['First value', 'Second value']
);

console.log(table.toString());
Vertical Tables
var Table = require('cli-table3');
var table = new Table();

table.push(
    { 'Some key': 'Some value' }
  , { 'Another key': 'Another value' }
);

console.log(table.toString());
Cross Tables
Cross tables are very similar to vertical tables, with two key differences:

They require a head setting when instantiated that has an empty string as the first header
The individual rows take the general form of { "Header": ["Row", "Values"] }
var Table = require('cli-table3');
var table = new Table({ head: ["", "Top Header 1", "Top Header 2"] });

table.push(
    { 'Left Header 1': ['Value Row 1 Col 1', 'Value Row 1 Col 2'] }
  , { 'Left Header 2': ['Value Row 2 Col 1', 'Value Row 2 Col 2'] }
);

console.log(table.toString());
Custom styles
The chars property controls how the table is drawn:

var table = new Table({
  chars: { 'top': '‚ïê' , 'top-mid': '‚ï§' , 'top-left': '‚ïî' , 'top-right': '‚ïó'
         , 'bottom': '‚ïê' , 'bottom-mid': '‚ïß' , 'bottom-left': '‚ïö' , 'bottom-right': '‚ïù'
         , 'left': '‚ïë' , 'left-mid': '‚ïü' , 'mid': '‚îÄ' , 'mid-mid': '‚îº'
         , 'right': '‚ïë' , 'right-mid': '‚ï¢' , 'middle': '‚îÇ' }
});

table.push(
    ['foo', 'bar', 'baz']
  , ['frob', 'bar', 'quuz']
);

console.log(table.toString());
// Outputs:
//
//‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï§‚ïê‚ïê‚ïê‚ïê‚ïê‚ï§‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
//‚ïë foo  ‚îÇ bar ‚îÇ baz  ‚ïë
//‚ïü‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ï¢
//‚ïë frob ‚îÇ bar ‚îÇ quuz ‚ïë
//‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïß‚ïê‚ïê‚ïê‚ïê‚ïê‚ïß‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
Empty decoration lines will be skipped, to avoid vertical separator rows just set the 'mid', 'left-mid', 'mid-mid', 'right-mid' to the empty string:

var table = new Table({ chars: {'mid': '', 'left-mid': '', 'mid-mid': '', 'right-mid': ''} });
table.push(
    ['foo', 'bar', 'baz']
  , ['frobnicate', 'bar', 'quuz']
);

console.log(table.toString());
// Outputs: (note the lack of the horizontal line between rows)
//‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
//‚îÇ foo        ‚îÇ bar ‚îÇ baz  ‚îÇ
//‚îÇ frobnicate ‚îÇ bar ‚îÇ quuz ‚îÇ
//‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
By setting all chars to empty with the exception of 'middle' being set to a single space and by setting padding to zero, it's possible to get the most compact layout with no decorations:

var table = new Table({
  chars: { 'top': '' , 'top-mid': '' , 'top-left': '' , 'top-right': ''
         , 'bottom': '' , 'bottom-mid': '' , 'bottom-left': '' , 'bottom-right': ''
         , 'left': '' , 'left-mid': '' , 'mid': '' , 'mid-mid': ''
         , 'right': '' , 'right-mid': '' , 'middle': ' ' },
  style: { 'padding-left': 0, 'padding-right': 0 }
});

table.push(
    ['foo', 'bar', 'baz']
  , ['frobnicate', 'bar', 'quuz']
);

console.log(table.toString());
// Outputs:
//foo        bar baz
//frobnicate bar quuz
Debugging
Later versions of cli-table3 supporting debugging your table data.

Enable and use debugging:

var table = new Table({ debug: 1 });
table.push([{}, {},}); // etc.

console.log(table.toString());
table.messages.forEach((message) => console.log(message));
If you are rendering multiple tables with debugging on run Table.reset() after rendering each table.

Build Targets
Clone the repository and run yarn install to install all its submodules, then run one of the following commands:

Run the tests with coverage reports.
$ yarn test:coverage
Run the tests every time a file changes.
$ yarn test:watch
Update the documentation.
$ yarn docs
Credits
James Talmage - author <james.talmage@jrtechnical.com> (jamestalmage)
Guillermo Rauch - author of the original cli-table <guillermo@learnboost.com> (Rauchg)
License
(The MIT License)

Copyright (c) 2014 James Talmage <james.talmage@jrtechnical.com>

Original cli-table code/documentation: Copyright (c) 2010 LearnBoost <dev@learnboost.com>

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



Drawille.

node-drawille Build Status
drawing in terminal with unicode braille characters. The idea is based on drawille by @asciimoo.

cube

install
install the package with npm:

$ npm install --save drawille
usage
See examples.

this module provides a very basic API only, for fancy things, like drawing lines, use another module, like bresenham.

drawille-canvas provides HTML5 Canvas API for drawille.

api
Canvas(w, h)
Create a new canvas with the given dimensions. w must be multiple of 2, h must be multiple of 4. Uses columns & rows from process.stdout as default values for w and h.

canvas.set(x, y)
Draw point on canvas at the given position.

canvas.unset(x, y)
Delete point on canvas at the given position.

canvas.toggle(x, y)
Toggle point on canvas at the given position.

canvas.clear()
Clear the whole canvas (delete every point).

canvas.frame(delimiter)
return the current content of canvas, as a delimiter-delimited string. delimiter defaults to \n.

it uses braille characters to represent points, so every line has length of w/2, and the string contains h/4 lines.

projects
vtop uses it to draw CPU and memory usage charts in the terminal
datop uses it to draw dat statistics
boscillate uses it to draw baudio soundwaves in real-time
license
MIT.


ASCii-charts.

Chart
Ascii bar chart for nodejs.

Installation
$ npm install jstrace/chart
Example
When data exceeds the available width the data will "roll" to the tail-end of the array. This may become an option in the future, but that's the default behaviour for now ;)

var chart = require('chart');
var clear = require('clear');

var data = [1, 2, ...];

clear();
console.log(chart(data, {
  width: 130,
  height: 30,
  pointChar: '‚ñà',
  negativePointChar: '‚ñë'
}));
License
MIT.


Progress.

Flexible ascii progress bar.

Installation
$ npm install progress
Usage
First we create a ProgressBar, giving it a format string as well as the total, telling the progress bar when it will be considered complete. After that all we need to do is tick() appropriately.

var ProgressBar = require('progress');

var bar = new ProgressBar(':bar', { total: 10 });
var timer = setInterval(function () {
  bar.tick();
  if (bar.complete) {
    console.log('\ncomplete\n');
    clearInterval(timer);
  }
}, 100);
Options
These are keys in the options object you can pass to the progress bar along with total as seen in the example above.

curr current completed index
total total number of ticks to complete
width the displayed width of the progress bar defaulting to total
stream the output stream defaulting to stderr
head head character defaulting to complete character
complete completion character defaulting to "="
incomplete incomplete character defaulting to "-"
renderThrottle minimum time between updates in milliseconds defaulting to 16
clear option to clear the bar on completion defaulting to false
callback optional function to call when the progress bar completes
Tokens
These are tokens you can use in the format of your progress bar.

:bar the progress bar itself
:current current tick number
:total total ticks
:elapsed time elapsed in seconds
:percent completion percentage
:eta estimated completion time in seconds
:rate rate of ticks per second
Custom Tokens
You can define custom tokens by adding a {'name': value} object parameter to your method (tick(), update(), etc.) calls.

var bar = new ProgressBar(':current: :token1 :token2', { total: 3 })
bar.tick({
  'token1': "Hello",
  'token2': "World!\n"
})
bar.tick(2, {
  'token1': "Goodbye",
  'token2': "World!"
})
The above example would result in the output below.

1: Hello World!
3: Goodbye World!
Examples
Download
In our download example each tick has a variable influence, so we pass the chunk length which adjusts the progress bar appropriately relative to the total length.

var ProgressBar = require('progress');
var https = require('https');

var req = https.request({
  host: 'download.github.com',
  port: 443,
  path: '/visionmedia-node-jscoverage-0d4608a.zip'
});

req.on('response', function(res){
  var len = parseInt(res.headers['content-length'], 10);

  console.log();
  var bar = new ProgressBar(' downloading [:bar] :rate/bps :percent :etas', {
    complete: '=',
    incomplete: ' ',
    width: 20,
    total: len
  });

  res.on('data', function (chunk) {
    bar.tick(chunk.length);
  });

  res.on('end', function () {
    console.log('\n');
  });
});

req.end();
The above example result in a progress bar like the one below.

downloading [===== ] 39/bps 29% 3.7s
Interrupt
To display a message during progress bar execution, use interrupt()

var ProgressBar = require('progress');

var bar = new ProgressBar(':bar :current/:total', { total: 10 });
var timer = setInterval(function () {
  bar.tick();
  if (bar.complete) {
    clearInterval(timer);
  } else if (bar.curr === 5) {
      bar.interrupt('this message appears above the progress bar\ncurrent progress is ' + bar.curr + '/' + bar.total);
  }
}, 1000);
You can see more examples in the examples folder.

License
MIT.


Insight.


Insight
Understand how your tool is being used by anonymously reporting usage metrics to Google Analytics or Yandex.Metrica

This package is in maintenance mode. No new features will be added.

Install
npm install insight
Access data / generate dashboards
Google Analytics (GA)
Use Embed API to embed charts
Use Core Reporting API or Real Time Reporting API to access raw data, then build custom visualization, e.g. metrics from Bower
Use GA's dashboards directly, e.g. metrics from Yeoman:
analytics screenshot

Provider Setup
Google Analytics (GA)
Currently, Insight should be used with GA set up as web tracking due to use of URLs. Future plans include refactoring to work with GA set up for app-based tracking and the Measurement Protocol.

For debugging, Insight can track OS version, Node.js version, and version of the app that implements Insight. Please set up custom dimensions per below screenshot. This is a temporary solution until Insight is refactored into app-based tracking.

GA custom dimensions screenshot

Collected Data
Insight cares deeply about the security of your user's data and strives to be fully transparent with what it tracks. All data is sent via HTTPS secure connections. Insight provides API to offer an easy way for users to opt-out at any time.

Below is what Insight is capable of tracking. Individual implementation can choose to not track some items.

The version of the module that implements Insight
Module commands/events (e.g. install / search)
Name and version of packages involved with command used
Version of node.js & OS for developer debugging
A random & absolutely anonymous ID
Usage
Google Analytics
import Insight from 'insight';
import packageJson from './package.json' with {type: 'json'};

const insight = new Insight({
 // Google Analytics tracking code
 trackingCode: 'UA-XXXXXXXX-X',
 pkg: packageJson
});

// Ask for permission the first time
if (insight.optOut === undefined) {
 insight.askPermission();
}

insight.track('foo', 'bar');
// Recorded in Analytics as `/foo/bar`

insight.trackEvent({
 category: 'eventCategory',
 action: 'eventAction',
 label: 'eventLabel',
 value: 'eventValue'
});
// Recorded in Analytics behavior/events section
Yandex.Metrica
import Insight from 'insight';
import packageJson from './package.json' with {type: 'json'};

const insight = new Insight({
 // Yandex.Metrica counter id
 trackingCode: 'XXXXXXXXX'
 trackingProvider: 'yandex',
 pkg: packageJson
});

// Ask for permission the first time
if (insight.optOut === undefined) {
 insight.askPermission();
}

insight.track('foo', 'bar');
// Recorded in Yandex.Metrica as `http://<package-name>.insight/foo/bar`
API
Insight(options)
trackingCode
Required
Type: string

Your Google Analytics trackingCode or Yandex.Metrica counter id.

trackingProvider
Type: string
Default: 'google'
Values: 'google' | 'yandex'

Tracking provider to use.

pkg
Type: object

name
Required
Type: string

version
Type: string
Default: 'undefined'

config
Type: object
Default: An instance of conf

If you want to use your own configuration mechanism instead of the default conf-based one, you can provide an object that has to implement two synchronous methods:

get(key)
set(key, value)
Instance methods
.track(keyword, ...keyword?)
Accepts keywords which ends up as a path in Analytics.

.track('init', 'backbone') becomes /init/backbone

.trackEvent(options)
Accepts event category, action, label and value as described in the GA event tracking documentation via the options object. Note: Does not work with Yandex.Metrica.

.trackEvent({
 category: 'download',
 action: 'image',
 label: 'logo-image'
});
category
Required
Type: string

Event category: Typically the object that was interacted with (e.g. 'Video').

action
Required
Type: string

Event action: The type of interaction (e.g. 'play').

label
Type: string

Event label: Useful for categorizing events (e.g. 'Fall Campaign').

value
Type: integer

Event value: A numeric value associated with the event (e.g. 42).

.askPermission(message?)
Asks the user permission to opt-in to tracking and sets the optOut property in config. You can also choose to set optOut property in config manually.

askPermission screenshot

Optionally supply your own message. If message is null, default message will be used. This also resolves with the new value of optIn when the prompt is done and is useful for when you want to continue the execution while the prompt is running.

.optOut
Returns a boolean whether the user has opted out of tracking. Should preferably only be set by a user action, eg. a prompt.


CLi-cursor.

cli-cursor
Toggle the CLI cursor

The cursor is gracefully restored if the process exits.

Install
npm install cli-cursor
Usage
import cliCursor from 'cli-cursor';

cliCursor.hide();

const unicornsAreAwesome = true;
cliCursor.toggle(unicornsAreAwesome);
API
.show(stream?)
.hide(stream?)
.toggle(force?, stream?)
force
Useful for showing or hiding the cursor based on a boolean.

stream
Type: stream.Writable
Default: process.stderr.


CLi-columns.

cli-columns
NPM version Downloads

Columnated lists for the CLI. Unicode and ANSI safe.

Install
$ npm install --save cli-columns
Usage
const columns = require('cli-columns');
const chalk = require('chalk');

const values = [
    'blue' + chalk.bgBlue('berry'),
    'Á¨îËè†Ëêù' + chalk.yellow('ËãπÊûúÁ¨î'),
    chalk.red('apple'), 'pomegranate',
    'durian', chalk.green('star fruit'),
    '„Éë„Ç§„Éä„ÉÉ„Éó„É´', 'apricot', 'banana',
    'pineapple', chalk.bgRed.yellow('orange')
];

console.log(columns(values));
screenshot
API
columns(values [, options]): String
values {Array<String>} Array of strings to display.
options {Object}
character {String} (default: ' ') Padding character.
newline {String} (default: '\n') Newline character.
padding {Number} (default: 2) Space between columns.
sort {Boolean} (default: true) Whether to sort results.
width {Number} (default: process.stdout.columns) Max width of list.
Sorts and formats a list of values into columns suitable to display in a given width.

Contribute
Standards for this project, including tests, code coverage, and semantics are enforced with a build tool. Pull requests must include passing tests with 100% code coverage and no linting errors.

Test
$ npm test
MIT ¬© Shannon Moeller.


CFONTS.

     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë
    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
cfont styles

api example

crates badge crates docs tests build status npm cfonts Coverage Status

This is a silly little command line tool for sexy ANSI fonts in the console. Give your cli some love.

Implementations
Rust
Read more in the Rust folder.

Nodejs
Read more in the Nodejs folder.

Install
Rust
homebrew
brew install cfonts
Arch User Repository
yay -S cfonts
Fedora
sudo dnf install cfonts
NixOS
nix-env -iA nixos.cfonts
MacPorts
sudo port install cfonts
cargo
cargo install cfonts
NodeJs
npm
npm i cfonts -g
yarn
yarn global add cfonts
Usage
Using the CLI is easy.

Usage: cfonts "<value>" [option1] <input1> [option2] <input1>,<input2> [option3] etc...
At any point you can run the help command to get a full list of commands and how to use them.

$ cfonts --help
Supported Characters
A P 4 $
B Q 5 %
C R 6 &
D S 7 (
E T 8 )
F U 9 /
G V ! :
H W ? ;
I X . ,
J Y + '
K Z - "
L 0 _ (space)
M 1 = 
N 2 @ 
O 3 # 
The | character will be replaced with a line break

Options
-h, --help
Type: <command>
Default value: none

This shows a list of all available options.

$ cfonts --help
Help command

-V, --version
Type: <command>
Default value: none

This shows the installed version.

$ cfonts --version
Version command

text
Type: <string>
Default value: ""

This is the "text input" to be converted into a nice font.
The | character will be replaced with a line break.

$ cfonts "Hello world"
Text command

-f, --font
Type: <string>
Default value: "block"

This is the font face you want to use. So far this plugin ships with with following font faces:

$ cfonts "text" --font "chrome"
Font command

block [colors: 2] (default) block font style
slick [colors: 2] slick font style
tiny [colors: 1] tiny font style
grid [colors: 2] grid font style
pallet [colors: 2] pallet font style
shade [colors: 2] shade font style
chrome [colors: 3] chrome font style
simple [colors: 1] simple font style
simpleBlock [colors: 1] simple-block font style
3d [colors: 2] 3d font style
simple3d [colors: 1] simple-3d font style
huge [colors: 2] huge font style
console [colors: 1] console font style
-a, --align
Type: <string>
Default value: "left"

You can align your text in the terminal with this option. Use the keywords below:

left (default)
center
right
top (Will be ignored if used with the spaceless option)
bottom (Will be ignored if used with the spaceless option)
$ cfonts "text" --align "center"
Align command

-c, --colors
Type: <string list>
Default value: ['system']

With this setting you can set the colors for your font. Use the below color strings or a hex color.
Provide colors in a comma-separated string, eg: red,blue. (no spaces)
If you use a hex color make sure you include the # prefix. (In most terminals wrap the hex in quotes)
The system color falls back to the system color of your terminal.

üí° There are environment variables that can affect the display of colors in your terminal.

system (default)
black
red
green
yellow
blue
magenta
cyan
white
gray
redBright
greenBright
yellowBright
blueBright
magentaBright
cyanBright
whiteBright
#ff8800 (any valid hex color)
#f80 (short form is supported as well)
$ cfonts "text" --colors white,"#f80"
Colors command

-g, --gradient
Type: <string list>
Default value: false

With this setting you can set a gradient over your output.
This setting supersedes the color open.
The gradient requires two colors, a start color and an end color from left to right.
(If you want to set your own colors for the gradient, use the transition option.)
cfonts will then generate a gradient through as many colors as it can find to make the output most impressive.
Provide two colors in a comma-separated string, eg: red,blue. (no spaces)
If you use a hex color make sure you include the # prefix. (In the terminal wrap the hex in quotes)

black
red
green
yellow
blue
magenta
cyan
white
gray
grey
#ff8800 (any valid hex color)
#f80 (short form is supported as well)
$ cfonts "text" --gradient red,"#f80"
Gradient command

-i, --independent-gradient
Type: <boolean>
Default value: false

Set this option to re-calculate the gradient colors for each new line.
Only works in combination with the gradient option.

$ cfonts "text|next line" --gradient red,"#f80" --independent-gradient
Independent gradient command

-t, --transition-gradient
Type: <boolean>
Default value: false

Set this option to generate your own gradients. Each color set in the gradient option will then be transitioned to directly. This option allows you to specify more than just two colors for your gradient.
Only works in combination with the gradient option.

$ cfonts "text" --gradient red,"#f80",green,blue --transition-gradient
Independent gradient command

-b, --background
Type: <string>
Default value: "transparent"

With this setting you can set the background colors for the output. Use the below color strings. Provide the background color from the below supported list, eg: 'white'

transparent (default)
black
red
green
yellow
blue
magenta
cyan
white
blackBright
redBright
greenBright
yellowBright
blueBright
magentaBright
cyanBright
whiteBright
#ff8800 (any valid hex color)
#f80 (short form is supported as well)
$ cfonts "text" --background "Green"
Background command

-l, --letter-spacing
Type: <integer>
Default value: 1

Set this option to widen the space between characters.

$ cfonts "text" --letter-spacing 2
Letter spacing command

-z, --line-height
Type: <integer>
Default value: 1

Set this option to widen the space between lines.

$ cfonts "text" --line-height 2
Line height command

-s, --spaceless
Type: <boolean>
Default value: false

Set this option to false if you don't want the plugin to insert two empty lines on top and on the bottom of the output.

$ cfonts "text" --spaceless
Spaceless command

-m, --max-length
Type: <integer>
Default value: 0

This option sets the maximum characters that will be printed on one line.
cfonts detects the size of your terminal but you can opt out and determine your own max width.
0 means no max width and the text will break at the edge of the terminal window.

$ cfonts "text" --max-length 15
Max length command

-r, --raw-mode
Type: <boolean>
Default value: false

Set this option to make sure cfonts used CRLF (\r\n) over the default LF (\n) line breaks.
This could be useful for terminal raw modes or on older windows machines.

use crossterm::terminal;
use std::io::Write;
use cfonts;

fn main() -> std::io::Result<()> {
 terminal::enable_raw_mode()?;

 cfonts::say(cfonts::Options {
  text: String::from("Hello|world"),
  raw_mode: true,
  ..cfonts::Options::default()
 });

 std::io::stdout().flush()?;
 terminal::disable_raw_mode()?;
 Ok(())
}
Raw mode command

-e, --env
Type: <string>
Default value: cli

This option lets you use cfonts to generate HTML instead of ANSI code.
Note that max-length will be set to very large.

$ cfonts "text" --env browser
Max length command

Consistency
cfonts detects what colors are supported on your platform. It sets a level of support automatically. In cfonts you can override this by passing in the FORCE_COLOR environment variable.

FORCE_COLOR=3 cfonts "hello world" -c "#0088ff"
You can also use the NO_COLOR environment variable to set no color output for environments like CI.

NO_COLOR="" cfonts "hello world" -c "#0088ff"
üí° FORCE_COLOR overrides NO_COLOR if both are set.

Color consistency via env vars

License
Copyleft (c) 2023 Dominik Wilkowski. Licensed under the GNU GPL-3.0-or-later.



Multispinner.

node-multispinner
Build Status Coverage Status

About | Installation | API | Examples | Attribution | License

About
node-multispinner is a Node.js module for managing multiple progress indicators (spinners) in CLI apps. This module is especially useful for apps that benefit from simultaneous async task execution (e.g. with Promise.all[]), as it enables live updating individual spinners, in any order, while other spinners continue spinning. Node.js 4.0 or newer is required.

demo-gif

Installation
Install and require as a standard Node module.

Install

  $ npm install --save multispinner
Require

  var Multispinner = require('multispinner')
API
Full documentation available here.

Examples
The examples discussed below can be found here. Run them in a terminal with node:

$ node <example>
Example: events.js

Creates four spinners from an array, then completes them in succession with staggered setTimeout functions. Responds to the success and err completion events.

Example: customAnimation.js

Creates a custom spinner animation with the frames option.

Example: randomInfiniteLoop.js

Creates three to seven spinners with random lorem text and completes them randomly in less than five seconds in an infinite loop. Stubs out the logUpdate.done() function to overwrite the previous output with every loop.

It's kind of mesmerising.

Example: cli-with-promises

A CLI application that reads URLs and parses HTML into text to display in a terminal. Uses meow for CLI support, html-to-text for parsing, and axios for Promise-based HTTP requests. Creates spinners for each URL, and uses Promise.all() to execute the GET requests in parallel.

There are certainly edge cases that this example doesn't account for; it is not meant to be a "real" application. Despite that, the code should be illustrative of how node-multispinner could potentially be used in a real application.

This example is unique in that it requires modules not used in node-multispinner. Before running it, cd into its directory and install the additional requirements from its package.json with npm install.

Attribution
Thanks to sindresorhus for his log-update module, which was a major inspiration for and is used extensively in this module. Log-update is MIT licensed.

License
MIT.


Omelette.


Omelette is a simple template based autocompletion tool for Node and Deno projects with super easy API.

npm version Build Status

yarn add omelette
# or
npm install omelette
You also can use Omelette with Deno:

import omelette from "https://deno.land/x/omelette/omelette.ts";
You just have to decide your program name and CLI fragments.

omelette`github ${['pull', 'push']} ${['origin', 'upstream']} ${['master', 'develop']}`.init()
...and you are almost done! The output will look like this:


Quick Start
For a step by step guide please follow this link

Implementing omelette is very easy:

import * as omelette from 'omelette';

const firstArgument = ({ reply }) => {
  reply([ 'beautiful', 'cruel', 'far' ])
}

const planet = ({ reply }) => {
  reply([ 'world', 'mars', 'pluto' ])
}

omelette`hello|hi ${firstArgument} ${planet}`.init()

Simple Event Based API ‚òïÔ∏è
It's based on a simple CLI template.

Let's think we have a executable file with the name githubber, in a global path.

In our program, the code will be:

import * as omelette from 'omelette';

// Write your CLI template.
const completion = omelette(`githubber|gh <action> <user> <repo>`);

// Bind events for every template part.
completion.on('action', ({ reply }) => {
  reply([ 'clone', 'update', 'push' ])
})

completion.on('user', ({ reply }) => {
  reply(fs.readdirSync('/Users/'))
})

completion.on('repo', ({ before, reply }) => {
  reply([
    `http://github.com/${before}/helloworld`,
    `http://github.com/${before}/blabla`
  ])
})

// Initialize the omelette.
completion.init()

// If you want to have a setup feature, you can use `omeletteInstance.setupShellInitFile()` function.
if (~process.argv.indexOf('--setup')) {
  completion.setupShellInitFile()
}

// Similarly, if you want to tear down autocompletion, use `omeletteInstance.cleanupShellInitFile()`
if (~process.argv.indexOf('--cleanup')) {
  completion.cleanupShellInitFile()
}

// Rest is yours
console.log("Your program's default workflow.")
console.log(process.argv)
complete.reply is the completion replier. You must pass the options into that method.

ES6 Template Literal API üöÄ
You can use Template Literals to define your completion with a simpler (super easy) API.

import * as omelette from 'omelette';

// Just pass a template literal to use super easy API.
omelette`hello ${[ 'cruel', 'nice' ]} ${[ 'world', 'mars' ]}`.init()
Let's make the example above with ES6 TL:

import * as omelette from 'omelette'

// Write your CLI template.
omelette`
  githubber|gh

  ${[ 'clone', 'update', 'push' ]}
  ${() => fs.readdirSync('/Users/')}
  ${({ before }) => [
    `http://github.com/${before}/helloworld`,
    `http://github.com/${before}/blabla`,
  ]}
`.init()
Also you can still use lambda functions to make more complex template literals:

Advanced Template Literals
import * as omelette from 'omelette';

omelette`
  githubber|gh
      ${['pull', 'push', 'star'] /* Direct command list */}
      ${require('some/other/commands') /* Import from another file */}
      ${getFromRemote('http://api.example.com/commands') /* Remote call at the beginning */}
      ${({ reply }) => fetch('http://api.example.com/lazy-commands').then(reply) /* Fetch when argument <tab>bed */}
      ${() => fs.readdirSync("/Users/") /* Access filesystem via Node */}
      ${({ before }) => [ /* Use parameters like `before`, `line`, `fragment` or `reply` */
        `${before}/helloworld`,
        `${before}/blabla`
      ]}
  `.init()

// No extra configuration required.

console.log("Your program's default workflow.")
console.log(process.argv)
Async API ‚è©
Omelette allows you to use async functions. You have to use onAsync and to pass Promise object to the reply function.

complete.onAsync('user', async ({ reply }) => {
  reply(new Promise((resolve) => {
    fs.readdir('/Users/', (err, users) => {
      resolve(users)
    })
  }))
})
‚ö†Ô∏è A note about async handlers
If you are using async handlers, you have to use complete.next method to continue running your main workflow.

// ...

complete.onAsync('user', async ({ reply }) => {
  reply(new Promise((resolve) => {
    fs.readdir('/Users/', (err, users) => {
      resolve(users)
    })
  }))
})

// Instead of running directly, you need to set an handler to run your main workflow.
complete.next(()=> {
  console.log("Your program's default workflow.")
  console.log(process.argv)
})

// .init must be called after defining .next
complete.init()
// ...
Using util.promisify will make your async handlers easier.

import promisify from 'util';

complete.onAsync('user', async ({ reply }) => {
  reply(await promisify(fs.readdir)('/Users'))
})
Tree API üå≤
You can use simple objects as autocompletion definitions:

omelette('hello').tree({
  cruel: ['world', 'moon'],
  beautiful: ['mars', 'pluto']
}).init();
Install
Automated Install
‚ö†Ô∏è Not available for Deno runtime. You can make your users to put yourprogram --completion | source or yourprogram --completion-fish | source args explicitly to their shell config file.

Installing and making your users install the autocompletion feature is very simple.

You can use simply use setupShellInitFile function.

try {
  // Pick shell init file automatically
  complete.setupShellInitFile()

  // Or use a manually defined init file
  complete.setupShellInitFile('~/.my_bash_profile')

} catch (err) {
  // setupShellInitFile() throws if the used shell is not supported
}
If you use Bash, it will create a file at ~/.<program-name>/completion.sh and append a loader code to ~/.bash_profile file.

If you use Zsh, it appends a loader code to ~/.zshrc file.

If you use Fish, it appends a loader code to ~/.config/fish/config.fish file.

TL;DR: It does the Manual Install part, basically.

Automated Uninstallation
‚ö†Ô∏è Not available for Deno runtime. Your users need to remove the autocompletion setup script from their shell config files.

Similarly to installation, you can use cleanupShellInitFile to undo changes done by setupShellInitFile.

complete.cleanupShellInitFile()
As with setupShellInitFile(), wrap this in a try/catch block to handle unsupported shells.

Manual Installation
Instructions for your README files:
(You should add these instructions to your project's README, don't forget to replace myprogram string with your own executable name)

In zsh, you should write these:

echo '. <(myprogram --completion)' >> ~/.zshrc
In bash:

On macOS, you may need to install bash-completion using brew install bash-completion.

myprogram --completion >> ~/.config/hello.completion.sh
echo 'source ~/.config/hello.completion.sh' >> ~/.bash_profile
In fish:

echo 'myprogram --completion-fish | source' >> ~/.config/fish/config.fish
That's all!

Now you have an autocompletion system for your CLI tool.

Additions
There are some useful additions to omelette.

Parameters
Callbacks have two parameters:

The fragment name (e.g.command of <command> template) (only in global event)
The meta data
fragment: The number of fragment.
before: The previous word.
line: The whole command line buffer allow you to parse and reply as you wish.
reply: This is the reply function to use this-less API.
Global Event
You can also listen to all fragments by "complete" event.

complete.on('complete', (fragment, { reply }) => reply(["hello", "world"]));
Numbered Arguments
You can also listen to events in order.

complete.on('$1', ({ reply }) => reply(["hello", "world"]))
Autocompletion Tree
You can create a completion tree to more complex autocompletions.

omelette('hello').tree({
  how: {
    much: {
      is: {
        this: ['car'],
        that: ['house'],
      }
    },
    are: ['you'],
    many: ['cars', 'houses'],
  },
  where: {
    are: {
      you: ['from'],
      the: ['houses', 'cars'],
    },
    is: {
      // You can also add some logic with defining functions:
      your() {
        return ['house', 'car'];
      },
    }
  },
}).init()
Now, you will be able to use your completion as tree.

Advanced Tree Implementations
You can seperate your autocompletion by importing objects from another file:

omelette('hello').tree(require('./autocompletion-tree.js')).init();
Short Names
You can set a short name for an executable:

In this example, githubber is long and gh is short.

omelette('githubber|gh <module> <command> <suboption>');
Test
Now you can try it in your shell.

git clone https://github.com/f/omelette
cd omelette/example
alias githubber="./githubber" # The app should be global, completion will search it on global level.
./githubber --setup --debug # --setup is not provided by omelette, you should proxy it.
# (reload bash, or source ~/.bash_profile or ~/.config/fish/config.fish)
omelette-debug-githubber # See Debugging section
githubber<tab>
ghb<tab> # short alias
gh<tab> # short alias
Debugging
--debug option generates a function called omelette-debug-<programname>. (omelette-debug-githubber in this example).

When you run omelette-debug-<programname>, it will create aliases for your application. (githubber and gh in this example).

A long name:

$ githubber<tab>
clone update push
Or short name:

$ gh<tab>
clone update push
Then you can start easily.

$ ./githubber<tab>
clone update push
$ ./githubber cl<tab>
$ ./githubber clone<tab>
Guest fka
$ ./githubber clone fka<tab>
$ ./githubber clone fka http://github.com/fka/<tab>
http://github.com/fka/helloworld
http://github.com/fka/blabla
Using with Deno
Omelette now supports and is useful with Deno. You can make your Deno based CLI tools autocomplete powered using Omelette. It's fully featured but setupShellInitFile and cleanupShellInitFile methods does not exist for now (to prevent requirement of allow-env, allow-read and allow-write permissions).

Instructions to use Omelette in your Deno projects:
Assume we have a hello.js:

import omelette from "https://raw.githubusercontent.com/f/omelette/master/deno/omelette.ts";

const complete = omelette("hello <action>");

complete.on("action", function ({ reply }) {
  reply(["world", "mars", "jupiter"]);
});

complete.init();

// your CLI program
Install your program using deno install:

deno install hello.js
hello --completion | source # bash and zsh installation
hello --completion-fish | source # fish shell installation
That's all! Now you have autocompletion feature!

hello <tab><tab>
Users?
Office 365 CLI uses Omelette to support autocompletion in office365-cli.
Visual Studio App Center CLI uses Omelette to support autocompletion in appcenter-cli.
Contribute
I need your contributions to make that work better!

License
This project licensed under MIT.



Cross-Env.

cross-env üîÄ
Run scripts that set and use environment variables across platforms

üö® NOTICE: cross-env still works well, but is in maintenance mode. No new features will be added, only serious and common-case bugs will be fixed, and it will only be kept up-to-date with Node.js over time. Learn more

Build Status Code Coverage version downloads MIT License [All Contributors][all-contributors-badge] PRs Welcome Code of Conduct

The problem
Most Windows command prompts will choke when you set environment variables with NODE_ENV=production like that. (The exception is Bash on Windows, which uses native Bash.) Similarly, there's a difference in how windows and POSIX commands utilize environment variables. With POSIX, you use: $ENV_VAR and on windows you use %ENV_VAR%.

This solution
cross-env makes it so you can have a single command without worrying about setting or using the environment variable properly for the platform. Just set it like you would if it's running on a POSIX system, and cross-env will take care of setting it properly.

Installation
Usage
cross-env vs cross-env-shell
Windows Issues
Inspiration
Other Solutions
Contributors
LICENSE
Installation
This module is distributed via npm which is bundled with node and should be installed as one of your project's devDependencies:

npm install --save-dev cross-env
WARNING! Make sure that when you're installing packages that you spell things correctly to avoid mistakenly installing malware

NOTE : Version 7 of cross-env only supports Node.js 10 and higher, to use it on Node.js 8 or lower install version 6 npm install --save-dev cross-env@6

Usage
I use this in my npm scripts:

{
  "scripts": {
    "build": "cross-env NODE_ENV=production webpack --config build/webpack.config.js"
  }
}
Ultimately, the command that is executed (using cross-spawn) is:

webpack --config build/webpack.config.js
The NODE_ENV environment variable will be set by cross-env

You can set multiple environment variables at a time:

{
  "scripts": {
    "build": "cross-env FIRST_ENV=one SECOND_ENV=two node ./my-program"
  }
}
You can also split a command into several ones, or separate the environment variables declaration from the actual command execution. You can do it this way:

{
  "scripts": {
    "parentScript": "cross-env GREET=\"Joe\" npm run childScript",
    "childScript": "cross-env-shell \"echo Hello $GREET\""
  }
}
Where childScript holds the actual command to execute and parentScript sets the environment variables to use. Then instead of run the childScript you run the parent. This is quite useful for launching the same command with different env variables or when the environment variables are too long to have everything in one line. It also means that you can use $GREET env var syntax even on Windows which would usually require it to be %GREET%.

If you precede a dollar sign with an odd number of backslashes the expression statement will not be replaced. Note that this means backslashes after the JSON string escaping took place. "FOO=\\$BAR" will not be replaced. "FOO=\\\\$BAR" will be replaced though.

Lastly, if you want to pass a JSON string (e.g., when using ts-loader), you can do as follows:

{
  "scripts": {
    "test": "cross-env TS_NODE_COMPILER_OPTIONS={\\\"module\\\":\\\"commonjs\\\"} node some_file.test.ts"
  }
}
Pay special attention to the triple backslash (\\\) before the double quotes (") and the absence of single quotes ('). Both of these conditions have to be met in order to work both on Windows and UNIX.

cross-env vs cross-env-shell
The cross-env module exposes two bins: cross-env and cross-env-shell. The first one executes commands using cross-spawn, while the second one uses the shell option from Node's spawn.

The main use case for cross-env-shell is when you need an environment variable to be set across an entire inline shell script, rather than just one command.

For example, if you want to have the environment variable apply to several commands in series then you will need to wrap those in quotes and use cross-env-shell instead of cross-env.

{
  "scripts": {
    "greet": "cross-env-shell GREETING=Hi NAME=Joe \"echo $GREETING && echo $NAME\""
  }
}
The rule of thumb is: if you want to pass to cross-env a command that contains special shell characters that you want interpreted, then use cross-env-shell. Otherwise stick to cross-env.

On Windows you need to use cross-env-shell, if you want to handle signal events inside of your program. A common case for that is when you want to capture a SIGINT event invoked by pressing Ctrl + C on the command-line interface.

Windows Issues
Please note that npm uses cmd by default and that doesn't support command substitution, so if you want to leverage that, then you need to update your .npmrc to set the script-shell to powershell. Learn more here.

Inspiration
I originally created this to solve a problem I was having with my npm scripts in angular-formly. This made contributing to the project much easier for Windows users.

Other Solutions
env-cmd - Reads environment variables from a file instead
@naholyr/cross-env - cross-env with support for setting default values
Issues
Looking to contribute? Look for the Good First Issue label.

üêõ Bugs
Please file an issue for bugs, missing documentation, or unexpected behavior.

See Bugs

üí° Feature Requests
This project is in maintenance mode and no new feature requests will be considered.

Learn more

Contributors ‚ú®
Thanks goes to these people (emoji key):


Kent C. Dodds
üíª üìñ üöá ‚ö†Ô∏è 
Ya Zhuang
üîå üìñ 
James Harris
üìñ 
compumike08
üêõ üìñ ‚ö†Ô∏è 
Daniel Rodr√≠guez Rivero
üêõ üíª üìñ 
Jonas Keinholz
üêõ üíª ‚ö†Ô∏è 
Hugo Wood
üêõ üíª ‚ö†Ô∏è

Thiebaud Thomas
üêõ üíª ‚ö†Ô∏è 
Daniel Rey L√≥pez
üíª ‚ö†Ô∏è 
Amila Welihinda
üöá 
Paul Betts
üêõ üíª 
Turner Hayes
üêõ üíª ‚ö†Ô∏è 
Suhas Karanth
üíª ‚ö†Ô∏è 
Sven
üíª üìñ üí° ‚ö†Ô∏è

D. Nicol√°s Lopez Zelaya
üíª 
Johan Hernandez
üíª 
Jordan Nielson
üêõ üíª ‚ö†Ô∏è 
Jason Cooke
üìñ 
bibo5088
üíª 
Eric Berry
üîç 
Micha√´l De Boey
üíª

Lauri Eskola
üìñ 
devuxer
üìñ 
Daniel
üìñ
This project follows the all-contributors specification. Contributions of any kind welcome!

Note: this was added late into the project. If you've contributed to this project in any way, please make a pull request to add yourself to the list by following the instructions in the CONTRIBUTING.md

LICENSE
MIT.



Shelljs.

ShellJS - Unix shell commands for Node.js
GitHub Actions Codecov npm version npm downloads

ShellJS is a portable (Windows/Linux/macOS) implementation of Unix shell commands on top of the Node.js API. You can use it to eliminate your shell script's dependency on Unix while still keeping its familiar and powerful commands. You can also install it globally so you can run it from outside Node projects - say goodbye to those gnarly Bash scripts!

ShellJS is proudly tested on every LTS node release since v18!

The project is unit-tested and battle-tested in projects like:

Firebug - Firefox's infamous debugger
JSHint & ESLint - popular JavaScript linters
Zepto - jQuery-compatible JavaScript library for modern browsers
Yeoman - Web application stack and development tool
Deployd.com - Open source PaaS for quick API backend generation
And many more.
If you have feedback, suggestions, or need help, feel free to post in our issue tracker.

Think ShellJS is cool. Check out some related projects in our Wiki page!

Upgrading from an older version? Check out our breaking changes page to see what changes to watch out for while upgrading.

Command line use
If you just want cross platform UNIX commands, checkout our new project shelljs/shx, a utility to expose shelljs to the command line.

For example:

$ shx mkdir -p foo
$ shx touch foo/bar.txt
$ shx rm -rf foo
Plugin API
ShellJS now supports third-party plugins! You can learn more about using plugins and writing your own ShellJS commands in the wiki.

A quick note about the docs
For documentation on all the latest features, check out our README. To read docs that are consistent with the latest release, check out the npm page.

Installing
Via npm:

$ npm install [-g] shelljs
Examples
var shell = require('shelljs');

if (!shell.which('git')) {
  shell.echo('Sorry, this script requires git');
  shell.exit(1);
}

// Copy files to release dir
shell.rm('-rf', 'out/Release');
shell.cp('-R', 'stuff/', 'out/Release');

// Replace macros in each .js file
shell.cd('lib');
shell.ls('*.js').forEach(function (file) {
  shell.sed('-i', 'BUILD_VERSION', 'v0.1.2', file);
  shell.sed('-i', /^.*REMOVE_THIS_LINE.*$/, '', file);
  shell.sed('-i', /.*REPLACE_LINE_WITH_MACRO.*\n/, shell.cat('macro.js'), file);
});
shell.cd('..');

// Run external tool synchronously
if (shell.exec('git commit -am "Auto-commit"').code !== 0) {
  shell.echo('Error: Git commit failed');
  shell.exit(1);
}
Exclude options
If you need to pass a parameter that looks like an option, you can do so like:

shell.grep('--', '-v', 'path/to/file'); // Search for "-v", no grep options

shell.cp('-R', '-dir', 'outdir'); // If already using an option, you're done
Global vs. Local
We no longer recommend using a global-import for ShellJS (i.e. require('shelljs/global')). While still supported for convenience, this pollutes the global namespace, and should therefore only be used with caution.

Instead, we recommend a local import (standard for npm packages):

var shell = require('shelljs');
shell.echo('hello world');
Alternatively, we also support importing as a module with:

import shell from 'shelljs';
shell.echo('hello world');
Command reference
All commands run synchronously, unless otherwise stated. All commands accept standard bash globbing characters (*, ?, etc.), compatible with fast-glob.

For less-commonly used commands and features, please check out our wiki page.

cat([options,] file [, file ...])
cat([options,] file_array)
Available options:

-n: number all output lines
Examples:

var str = cat('file*.txt');
var str = cat('file1', 'file2');
var str = cat(['file1', 'file2']); // same as above
Returns a ShellString containing the given file, or a concatenated string containing the files if more than one file is given (a new line character is introduced between each file).

cd([dir])
Changes to directory dir for the duration of the script. Changes to home directory if no argument is supplied. Returns a ShellString to indicate success or failure.

chmod([options,] octal_mode || octal_string, file)
chmod([options,] symbolic_mode, file)
Available options:

-v: output a diagnostic for every file processed
-c: like verbose, but report only when a change is made
-R: change files and directories recursively
Examples:

chmod(755, '/Users/brandon');
chmod('755', '/Users/brandon'); // same as above
chmod('u+x', '/Users/brandon');
chmod('-R', 'a-w', '/Users/brandon');
Alters the permissions of a file or directory by either specifying the absolute permissions in octal form or expressing the changes in symbols. This command tries to mimic the POSIX behavior as much as possible. Notable exceptions:

In symbolic modes, a-r and -r are identical. No consideration is given to the umask.
There is no "quiet" option, since default behavior is to run silent.
Windows OS uses a very different permission model than POSIX. chmod() does its best on Windows, but there are limits to how file permissions can be set. Note that WSL (Windows subsystem for Linux) does follow POSIX, so cross-platform compatibility should not be a concern there.
Returns a ShellString indicating success or failure.

cmd(arg1[, arg2, ...] [, options])
Available options:

cwd: directoryPath: change the current working directory only for this cmd() invocation.
maxBuffer: num: Raise or decrease the default buffer size for stdout/stderr.
timeout: Change the default timeout.
Examples:

var version = cmd('node', '--version').stdout;
cmd('git', 'commit', '-am', `Add suport for node ${version}`);
console.log(cmd('echo', '1st arg', '2nd arg', '3rd arg').stdout)
console.log(cmd('echo', 'this handles ;, |, &, etc. as literal characters').stdout)
Executes the given command synchronously. This is intended as an easier alternative for exec(), with better security around globbing, comamnd injection, and variable expansion. This is guaranteed to only run one external command, and won't give special treatment for any shell characters (ex. this treats | as a literal character, not as a shell pipeline). This returns a ShellString.

By default, this performs globbing on all platforms, but you can disable this with set('-f').

This does not support asynchronous mode. If you need asynchronous command execution, check out execa or the node builtin child_process.execFile() instead.

cp([options,] source [, source ...], dest)
cp([options,] source_array, dest)
Available options:

-f: force (default behavior)
-n: no-clobber
-u: only copy if source is newer than dest
-r, -R: recursive
-L: follow symlinks
-P: don't follow symlinks
-p: preserve file mode, ownership, and timestamps
Examples:

cp('file1', 'dir1');
cp('-R', 'path/to/dir/', '~/newCopy/');
cp('-Rf', '/tmp/*', '/usr/local/*', '/home/tmp');
cp('-Rf', ['/tmp/*', '/usr/local/*'], '/home/tmp'); // same as above
Copies files. Returns a ShellString indicating success or failure.

pushd([options,] [dir | '-N' | '+N'])
Available options:

-n: Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.
-q: Suppresses output to the console.
Arguments:

dir: Sets the current working directory to the top of the stack, then executes the equivalent of cd dir.
+N: Brings the Nth directory (counting from the left of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.
-N: Brings the Nth directory (counting from the right of the list printed by dirs, starting with zero) to the top of the list by rotating the stack.
Examples:

// process.cwd() === '/usr'
pushd('/etc'); // Returns /etc /usr
pushd('+1'); // Returns /usr /etc
Save the current directory on the top of the directory stack and then cd to dir. With no arguments, pushd exchanges the top two directories. Returns an array of paths in the stack.

popd([options,] ['-N' | '+N'])
Available options:

-n: Suppress the normal directory change when removing directories from the stack, so that only the stack is manipulated.
-q: Suppresses output to the console.
Arguments:

+N: Removes the Nth directory (counting from the left of the list printed by dirs), starting with zero.
-N: Removes the Nth directory (counting from the right of the list printed by dirs), starting with zero.
Examples:

echo(process.cwd()); // '/usr'
pushd('/etc'); // '/etc /usr'
echo(process.cwd()); // '/etc'
popd(); // '/usr'
echo(process.cwd()); // '/usr'
When no arguments are given, popd removes the top directory from the stack and performs a cd to the new top directory. The elements are numbered from 0, starting at the first directory listed with dirs (i.e., popd is equivalent to popd +0). Returns an array of paths in the stack.

dirs([options | '+N' | '-N'])
Available options:

-c: Clears the directory stack by deleting all of the elements.
-q: Suppresses output to the console.
Arguments:

+N: Displays the Nth directory (counting from the left of the list printed by dirs when invoked without options), starting with zero.
-N: Displays the Nth directory (counting from the right of the list printed by dirs when invoked without options), starting with zero.
Display the list of currently remembered directories. Returns an array of paths in the stack, or a single path if +N or -N was specified.

See also: pushd, popd

echo([options,] string [, string ...])
Available options:

-e: interpret backslash escapes (default)
-n: remove trailing newline from output
Examples:

echo('hello world');
var str = echo('hello world');
echo('-n', 'no newline at end');
Prints string to stdout, and returns a ShellString.

exec(command [, options] [, callback])
Available options:

async: Asynchronous execution. If a callback is provided, it will be set to true, regardless of the passed value (default: false).
fatal: Exit upon error (default: false).
silent: Do not echo program output to console (default: false).
encoding: Character encoding to use. Affects the values returned to stdout and stderr, and what is written to stdout and stderr when not in silent mode (default: 'utf8').
and any option available to Node.js's child_process.exec()
Examples:

var version = exec('node --version', {silent:true}).stdout;

var child = exec('some_long_running_process', {async:true});
child.stdout.on('data', function(data) {
  /* ... do something with data ... */
});

exec('some_long_running_process', function(code, stdout, stderr) {
  console.log('Exit code:', code);
  console.log('Program output:', stdout);
  console.log('Program stderr:', stderr);
});
Executes the given command synchronously, unless otherwise specified. When in synchronous mode, this returns a ShellString. Otherwise, this returns the child process object, and the callback receives the arguments (code, stdout, stderr).

Not seeing the behavior you want? exec() runs everything through sh by default (or cmd.exe on Windows), which differs from bash. If you need bash-specific behavior, try out the {shell: 'path/to/bash'} option.

Security note: as shell.exec() executes an arbitrary string in the system shell, it is critical to properly sanitize user input to avoid command injection. For more context, consult the Security Guidelines.

find(path [, path ...])
find(path_array)
Examples:

find('src', 'lib');
find(['src', 'lib']); // same as above
find('.').filter(function(file) { return file.match(/\.js$/); });
Returns a ShellString (with array-like properties) of all files (however deep) in the given paths.

The main difference from ls('-R', path) is that the resulting file names include the base directories (e.g., lib/resources/file1 instead of just file1).

grep([options,] regex_filter, file [, file ...])
grep([options,] regex_filter, file_array)
Available options:

-v: Invert regex_filter (only print non-matching lines).
-l: Print only filenames of matching files.
-i: Ignore case.
-n: Print line numbers.
-B <num>: Show <num> lines before each result.
-A <num>: Show <num> lines after each result.
-C <num>: Show <num> lines before and after each result. -B and -A override this option.
Examples:

grep('-v', 'GLOBAL_VARIABLE', '*.js');
grep('GLOBAL_VARIABLE', '*.js');
grep('-B', 3, 'GLOBAL_VARIABLE', '*.js');
grep({ '-B': 3 }, 'GLOBAL_VARIABLE', '*.js');
grep({ '-B': 3, '-C': 2 }, 'GLOBAL_VARIABLE', '*.js');
Reads input string from given files and returns a ShellString containing all lines of the @ file that match the given regex_filter.

head([{'-n': <num>},] file [, file ...])
head([{'-n': <num>},] file_array)
Available options:

-n <num>: Show the first <num> lines of the files
Examples:

var str = head({'-n': 1}, 'file*.txt');
var str = head('file1', 'file2');
var str = head(['file1', 'file2']); // same as above
Read the start of a file. Returns a ShellString.

ln([options,] source, dest)
Available options:

-s: symlink
-f: force
Examples:

ln('file', 'newlink');
ln('-sf', 'file', 'existing');
Links source to dest. Use -f to force the link, should dest already exist. Returns a ShellString indicating success or failure.

ls([options,] [path, ...])
ls([options,] path_array)
Available options:

-R: recursive
-A: all files (include files beginning with ., except for . and ..)
-L: follow symlinks
-d: list directories themselves, not their contents
-l: provides more details for each file. Specifically, each file is represented by a structured object with separate fields for file metadata (see fs.Stats). The return value also overrides .toString() to resemble ls -l's output format for human readability, but programmatic usage should depend on the stable object format rather than the .toString() representation.
Examples:

ls('projs/*.js');
ls('projs/**/*.js'); // Find all js files recursively in projs
ls('-R', '/users/me', '/tmp');
ls('-R', ['/users/me', '/tmp']); // same as above
ls('-l', 'file.txt'); // { name: 'file.txt', mode: 33188, nlink: 1, ...}
Returns a ShellString (with array-like properties) of all the files in the given path, or files in the current directory if no path is provided.

mkdir([options,] dir [, dir ...])
mkdir([options,] dir_array)
Available options:

-p: full path (and create intermediate directories, if necessary)
Examples:

mkdir('-p', '/tmp/a/b/c/d', '/tmp/e/f/g');
mkdir('-p', ['/tmp/a/b/c/d', '/tmp/e/f/g']); // same as above
Creates directories. Returns a ShellString indicating success or failure.

mv([options ,] source [, source ...], dest')
mv([options ,] source_array, dest')
Available options:

-f: force (default behavior)
-n: no-clobber
Examples:

mv('-n', 'file', 'dir/');
mv('file1', 'file2', 'dir/');
mv(['file1', 'file2'], 'dir/'); // same as above
Moves source file(s) to dest. Returns a ShellString indicating success or failure.

pwd()
Returns the current directory as a ShellString.

rm([options,] file [, file ...])
rm([options,] file_array)
Available options:

-f: force
-r, -R: recursive
Examples:

rm('-rf', '/tmp/*');
rm('some_file.txt', 'another_file.txt');
rm(['some_file.txt', 'another_file.txt']); // same as above
Removes files. Returns a ShellString indicating success or failure.

sed([options,] search_regex, replacement, file [, file ...])
sed([options,] search_regex, replacement, file_array)
Available options:

-i: Replace contents of file in-place. Note that no backups will be created!
Examples:

sed('-i', 'PROGRAM_VERSION', 'v0.1.3', 'source.js');
Reads an input string from files, line by line, and performs a JavaScript replace() on each of the lines from the input string using the given search_regex and replacement string or function. Returns the new ShellString after replacement.

Note:

Like unix sed, ShellJS sed supports capture groups. Capture groups are specified using the $n syntax:

sed(/(\w+)\s(\w+)/, '$2, $1', 'file.txt');
Also, like unix sed, ShellJS sed runs replacements on each line from the input file (split by '\n') separately, so search_regexes that span more than one line (or include '\n') will not match anything and nothing will be replaced.

set(options)
Available options:

+/-e: exit upon error (config.fatal)
+/-v: verbose: show all commands (config.verbose)
+/-f: disable filename expansion (globbing)
Examples:

set('-e'); // exit upon first error
set('+e'); // this undoes a "set('-e')"
Sets global configuration variables.

sort([options,] file [, file ...])
sort([options,] file_array)
Available options:

-r: Reverse the results
-n: Compare according to numerical value
Examples:

sort('foo.txt', 'bar.txt');
sort('-r', 'foo.txt');
Return the contents of the files, sorted line-by-line as a ShellString. Sorting multiple files mixes their content (just as unix sort does).

tail([{'-n': <num>},] file [, file ...])
tail([{'-n': <num>},] file_array)
Available options:

-n <num>: Show the last <num> lines of files
Examples:

var str = tail({'-n': 1}, 'file*.txt');
var str = tail('file1', 'file2');
var str = tail(['file1', 'file2']); // same as above
Read the end of a file. Returns a ShellString.

tempdir()
Examples:

var tmp = tempdir(); // "/tmp" for most *nix platforms
Searches and returns string containing a writeable, platform-dependent temporary directory. Follows Python's tempfile algorithm.

test(expression)
Available expression primaries:

'-b', 'path': true if path is a block device
'-c', 'path': true if path is a character device
'-d', 'path': true if path is a directory
'-e', 'path': true if path exists
'-f', 'path': true if path is a regular file
'-L', 'path': true if path is a symbolic link
'-p', 'path': true if path is a pipe (FIFO)
'-S', 'path': true if path is a socket
Examples:

if (test('-d', path)) { /* do something with dir */ };
if (!test('-f', path)) continue; // skip if it's not a regular file
Evaluates expression using the available primaries and returns corresponding boolean value.

ShellString.prototype.to(file)
Examples:

cat('input.txt').to('output.txt');
Analogous to the redirection operator > in Unix, but works with ShellStrings (such as those returned by cat, grep, etc.). Like Unix redirections, to() will overwrite any existing file! Returns the same ShellString this operated on, to support chaining.

ShellString.prototype.toEnd(file)
Examples:

cat('input.txt').toEnd('output.txt');
Analogous to the redirect-and-append operator >> in Unix, but works with ShellStrings (such as those returned by cat, grep, etc.). Returns the same ShellString this operated on, to support chaining.

touch([options,] file [, file ...])
touch([options,] file_array)
Available options:

-a: Change only the access time
-c: Do not create any files
-m: Change only the modification time
{'-d': someDate}, {date: someDate}: Use a Date instance (ex. someDate) instead of current time
{'-r': file}, {reference: file}: Use file's times instead of current time
Examples:

touch('source.js');
touch('-c', 'path/to/file.js');
touch({ '-r': 'referenceFile.txt' }, 'path/to/file.js');
touch({ '-d': new Date('December 17, 1995 03:24:00'), '-m': true }, 'path/to/file.js');
touch({ date: new Date('December 17, 1995 03:24:00') }, 'path/to/file.js');
Update the access and modification times of each file to the current time. A file argument that does not exist is created empty, unless -c is supplied. This is a partial implementation of touch(1). Returns a ShellString indicating success or failure.

uniq([options,] [input, [output]])
Available options:

-i: Ignore case while comparing
-c: Prefix lines by the number of occurrences
-d: Only print duplicate lines, one for each group of identical lines
Examples:

uniq('foo.txt');
uniq('-i', 'foo.txt');
uniq('-cd', 'foo.txt', 'bar.txt');
Filter adjacent matching lines from input. Returns a ShellString.

which(command)
Examples:

var nodeExec = which('node');
Searches for command in the system's PATH. On Windows, this uses the PATHEXT variable to append the extension if it's not already executable. Returns a ShellString containing the absolute path to command.

exit(code)
Exits the current process with the given exit code.

error()
Tests if error occurred in the last command. Returns a truthy value if an error returned, or a falsy value otherwise.

Note: do not rely on the return value to be an error message. If you need the last error message, use the .stderr attribute from the last command's return value instead.

errorCode()
Returns the error code from the last command.

ShellString(str)
Examples:

var foo = new ShellString('hello world');
This is a dedicated type returned by most ShellJS methods, which wraps a string (or array) value. This has all the string (or array) methods, but also exposes extra methods: .to(), .toEnd(), and all the pipe-able methods (ex. .cat(), .grep(), etc.). This can be easily converted into a string by calling .toString().

This type also exposes the corresponding command's stdout, stderr, and return status code via the .stdout (string), .stderr (string), and .code (number) properties respectively.

env['VAR_NAME']
Object containing environment variables (both getter and setter). Shortcut to process.env.

Pipes
Examples:

grep('foo', 'file1.txt', 'file2.txt').sed(/o/g, 'a').to('output.txt');
echo("files with o's in the name:\n" + ls().grep('o'));
cat('test.js').exec('node'); // pipe to exec() call
Commands can send their output to another command in a pipe-like fashion. sed, grep, cat, exec, to, and toEnd can appear on the right-hand side of a pipe. Pipes can be chained.

Configuration
config.silent
Example:

var sh = require('shelljs');
var silentState = sh.config.silent; // save old silent state
sh.config.silent = true;
/* ... */
sh.config.silent = silentState; // restore old silent state
Suppresses all command output if true, except for echo() calls. Default is false.

config.fatal
Example:

require('shelljs/global');
config.fatal = true; // or set('-e');
cp('this_file_does_not_exist', '/dev/null'); // throws Error here
/* more commands... */
If true, the script will throw a Javascript error when any shell.js command encounters an error. Default is false. This is analogous to Bash's set -e.

config.verbose
Example:

config.verbose = true; // or set('-v');
cd('dir/');
rm('-rf', 'foo.txt', 'bar.txt');
exec('echo hello');
Will print each command as follows:

cd dir/
rm -rf foo.txt bar.txt
exec echo hello
config.globOptions (deprecated)
Deprecated: we recommend that you do not edit config.globOptions. Support for this configuration option may be changed or removed in a future ShellJS release.

Breaking change: ShellJS v0.8.x uses node-glob. Starting with ShellJS v0.9.x, config.globOptions is compatible with fast-glob.

Example:

config.globOptions = {nodir: true};
config.globOptions changes how ShellJS expands glob (wildcard) expressions. See fast-glob for available options. Be aware that modifying config.globOptions may break ShellJS functionality.

config.reset()
Example:

var shell = require('shelljs');
// Make changes to shell.config, and do stuff...
/* ... */
shell.config.reset(); // reset to original state
// Do more stuff, but with original settings
/* ... */
Reset shell.config to the defaults:

{
  fatal: false,
  globOptions: {},
  maxdepth: 255,
  noglob: false,
  silent: false,
  verbose: false,
}
Team
Nate Fischer
Nate Fischer


Sudo-Block.

sudo-block
Block users from running your app with root permissions

Install
npm install sudo-block
Usage
import sudoBlock from 'sudo-block';

sudoBlock();
API
sudoBlock(message?)
When a file containing this function is run with root permissions it will exit and show an error message telling the user how to fix the problem, so they don't have to run it with sudo.

message
Type: string

A custom message.


Sparkly.

sparkly
Generate sparklines ‚ñÅ‚ñÇ‚ñÉ‚ñÖ‚ñÇ‚ñá

JavaScript port of spark.sh.

Some cool use-cases.

Install
npm install sparkly
Usage
import sparkly from 'sparkly';

sparkly([0, 3, 5, 8, 4, 3, 4, 10]);
//=> '‚ñÅ‚ñÉ‚ñÑ‚ñá‚ñÑ‚ñÉ‚ñÑ‚ñà'

// Specifying anything other than finite numbers will cause holes
sparkly([0, 3, 5, '', 4, 3, 4, 10]);
//=> '‚ñÅ‚ñÉ‚ñÑ ‚ñÑ‚ñÉ‚ñÑ‚ñà'

// Specifying an object with minimum and maximum options will change the sparkline range
sparkly([1, 2, 3, 4, 5], {minimum: 0, maximum: 10});
//=> '‚ñÅ‚ñÇ‚ñÉ‚ñÑ‚ñÑ'

// Specifying a style option will change the sparkline color
sparkly([1, 2, 3, 4, 5, 6, 7, 8], {style: 'fire'});
// ‚Üì

API
sparkly(numbers, options?)
numbers
Type: number[]

The numbers to create the sparkline from.

options
Type: object

minimum
Type: number

Minimum range.

maximum
Type: number

Maximum range.

style
Type: string
Values: 'fire'

Style for the sparklines.

Related
sparkly-cli - CLI for this module.



Bit.

Website | Docs | Community | Bit Cloud

apache prs Circle Status Styled with Prettier Join Slack

Bit is the AI-powered development workspace with reusable components and zero overhead for the era of AI. Bit organizes source code into composable components, empowering to build reliable, scalable and consistent applications. It supports local AI agents via MCP for creating and composing reusable components at ease.

‚ö° Features

Shell applications. Compose reusable components and features into application shells.
Reusable components. Create reusable UI components and modules to reuse across your software.
Standard building blocks. Define the blueprints templates for creating components for devs and AI as one.
Atmoic and safe deployments. Ensure simple, safe and optimized deployments of apps and services for testing and production.
Bit supports all tooling in the JS ecosystem and comes out of the box with official dev environments for NodeJS, React, Angular, Vue, React Native, NextJS and far more. All are native to TypeScript and ESM and equipped with the best dev tooling.

Bit is a fit to every codebase structure. You can use Bit components in a monorepo, polyrepo, or even without repositories at all.

Getting started
Install Bit
Use the Bit installer to install Bit to be available on your PATH.

npx @teambit/bvm install
Initialize Bit on a new folder or in an existing project by running the following command:

bit init --default-scope my-org.my-project
Make sure to create your scope on the Bit platform and use the right org and project name. After running the command, Bit is initialized on the chosen directory, and ready to be used via Bit commands, AI agent, your editor or the Bit UI!

Create shell application
Create the application shell to run, compose and deploy your application:

bit create react-app corporate-website
Run the platform:

bit run corporate-website
Head to http://localhost:3000 to view your application shell. You can start composing the application layout and specific pages to build your application. Learn more on building shell applications.

Compose components
Create the components to compose into the feature. Run the following command to create a new React UI component for the application login route:

bit create react pages/login
Find simple guides for creating NodeJS modules, UI components and apps, backend services and more on the Create Component docs.

Compose the component into the application shell:

import { Login } from '@my-org/users.pages.login';
import { Routes, Route } from 'react-router-dom';

export function CorporateWebsite() {
  return (
    <AcmeTheme>
      <NavigationProvider>
        <Routes>
          <Route path="/" element={<div>Hello world</div>} />
          <Route path="/login" element={<Login />} />
        </Routes>
      </NavigationProvider>
    </AcmeTheme>
  );
}

Head to http://localhost:3000/login to view your new login page. You can use bit templates to list official templates or find guides for creating React hooks, backend services, NodeJS modules, UI components and more on our create components docs. Optionally, use bit start to run the Bit UI to preview components in isolation.

Release and deploy
You can either use hosted scopes on Bit Cloud or by hosting scopes on your own. Use the following command to create your Bit Cloud account and your first scope.

bit login
Use semantic versioning to version your components:

bit tag --message "my first release" --major
By default, Bit uses Ripple CI to build components. You can use the --build flag to build the components on the local machine. To tag and export from your CI of choice to automate the release process or use our official CI scripts.

After versioning, you can proceed to release your components:

bit export
Modernize existing projects
Head over to your bit.cloud account to see your components build progress. Once the build process is completed, the components will be available for use using standard package managers:

npm install @my-org/users.pages.login
Next steps
Create more components
Setup your editor
Configure CI of choice
Start from an existing project
Contributors
Bit is entirely built with Bit and you can find all its components on Bit Cloud.

License
Apache License, Version 2.0


Gradient-String.

gradient-string
Build Status Version Codecov Downloads code style: prettier Mentioned in Awesome Node.js

Beautiful color gradients in terminal output

gradient-string

Install
$ npm i gradient-string
Usage
import gradient from 'gradient-string';

console.log(gradient(['cyan', 'pink'])('Hello world!'));
Initialize a gradient
// Provide an array of colors
const coolGradient = gradient(['#FF0000', '#00FF00', '#0000FF']);
The colors are parsed with TinyColor, multiple formats are accepted.

const coolGradient = gradient([
  tinycolor('#FFBB65'), // tinycolor object
  { r: 0, g: 255, b: 0 }, // RGB object
  { h: 240, s: 1, v: 1, a: 1 }, // HSVa object
  'rgb(120, 120, 0)', // RGB CSS string
  'gold', // named color
]);
Use a gradient
const coolString = coolGradient('This is a fancy string!');
console.log(coolString);
Built-in gradients
Usage
import { rainbow, pastel } from 'gradient-string';

// Use the pastel built-in gradient
console.log(pastel('I love gradient-string!'));

// Use the rainbow built-in gradient
console.log(rainbow('It is so pretty! üåà'));
Available built-in gradients
Built-in gradients

Multi line gradients
In some cases, you may want to apply the same horizontal gradient on each line of a long text (or a piece of ASCII art).

You can use the multiline() method of a gradient to ensure that the colors are vertically aligned.

import gradient, { rainbow } from 'gradient-string';

// Use the same gradient on every line
const duck = gradient(['green', 'yellow']).multiline(`
  __
<(o )___
 ( ._> /
   ---
`);
console.log(duck);

// Works with aliases
rainbow.multiline('Multi line\nstring');

// Works with advanced options (read below)
gradient(['cyan', 'pink'], { interpolation: 'hsv' }).multiline('Multi line\nstring');
Advanced gradients
There are also more advanced options for gradient customization, such as custom color stops, or choice of color interpolation

Custom color stops
By default, the gradient color stops are distributed equidistantly.

You can specify the position of each color stop (between 0 and 1), using the following syntax:

let coolGradient = gradient([
  { color: '#d8e0de', pos: 0 },
  { color: '#255B53', pos: 0.8 },
  { color: '#000000', pos: 1 },
]);
Color interpolation
When creating a gradient, you can provide a second parameter to choose how the colors will be generated.

Here is the full gradient API:

gradient([colors], options?)(text)
colors
Type: Array<Color>
Colors of the gradient. Multiple formats are accepted.

text
Type: String
String you want to color.

options
Type: Object (optional)

interpolation
Type: string
The gradient can be generated using RGB or HSV interpolation. HSV usually produces brighter colors. interpolation can be set to rgb for RGB interpolation, orhsv for HSV interpolation.
Defaults to rgb. Case-insensitive

hsvSpin
Type: string
Used only in the case of HSV interpolation.
Because hue can be considered as a circle, there are two ways to go from a color to another color.
hsvSpin can be either short or long, depending on if you want to take the shortest or the longest way between two colors.
Defaults to short. Case-insensitive

Example
Code
const str = '‚ñ†'.repeat(48);

// Standard RGB gradient
const standardRGBGradient = gradient(['red', 'green']);

// Short HSV gradient: red -> yellow -> green
const shortHSVGradient = gradient(['red', 'green'], { interpolation: 'hsv' });

// Long HSV gradient: red -> magenta -> blue -> cyan -> green
const longHSVGradient = gradient(['red', 'green'], { interpolation: 'hsv', hsvSpin: 'long' });

console.log(standardRGBGradient(str));
console.log(shortHSVGradient(str));
console.log(longHSVGradient(str));
Result
Example result

Dependencies
chalk - Output colored text to terminal
tinygradient - Generate gradients
Who uses gradient-string?
Shopify in Shopify CLI
Turoborepo in @turbo/workspaces and @turbo/codemod
Tencent in CloudBase Framework
Microsoft in @lage-run/reporters
Fireship in this YouTube video, where he shows how he built javascript-millionaire
Magic UI in Magic UI CLI
Myself in chalk-animation, the animated version of gradient-string
Sindre Sorhus in ink-gradient, the Ink version of gradient-string
And many more in open-source projects, who downloaded gradient-string more than many times!
License
MIT ¬© Boris K.


Oclif.

oclif CLI
Version Downloads/week License

oclif CLI
üóí Description
üöÄ Getting Started Tutorial
üìå Requirements
üìå Migrating from V1
üèó Usage
üìö Examples
üî® Commands
Command Topics
üöÄ Contributing
üè≠ Related Repositories
ü¶î Learn More
üóí Description
This is the oclif CLI for the Open CLI Framework, that supports the development of oclif plugins and CLIs.

See the docs for more information.

üöÄ Getting Started Tutorial
The Getting Started tutorial is a step-by-step guide to introduce you to oclif. If you have not developed anything in a command line before, this tutorial is a great place to get started.

See Usage below for an overview of the oclif CLI.

üìå Requirements
Currently, Node 18+ is supported. We support the LTS versions of Node. You can add the node package to your CLI to ensure users are running a specific version of Node.

üìå Migrating from V1
If you have been using version 1 of the oclif CLI there are some important differences to note when using the latest version.

Breaking Changes
oclif multi, oclif plugin, and oclif single have all been removed in favor of oclif generate, which generates an oclif based CLI using the hello-world example repo.
The reason is that there's not enough of a meaningful difference between a "multi command cli", a "single command cli", and a "plugin" to justify the maintenance cost. The generated CLI can be easily used for any of those use cases.
oclif hook is now oclif generate:hook
oclif command is now oclif generate:command
New Commands
Version 2 now includes all the commands from the oclif-dev CLI. This means that you can now use a single CLI for all your oclif needs. These commands include:

oclif manifest
oclif pack
oclif pack:deb
oclif pack:macos
oclif pack:win
oclif upload (formerly known as oclif-dev publish)
oclif upload:deb (formerly known as oclif-dev publish:deb)
oclif upload:macos (formerly known as oclif-dev publish:macos)
oclif upload:win (formerly known as oclif-dev publish:win)
oclif readme
üèó Usage
Creating a CLI:

$ npx oclif generate mynewcli
? npm package name (mynewcli): mynewcli
$ cd mynewcli
$ ./bin/run.js --version
mynewcli/0.0.0 darwin-x64 node-v9.5.0
$ ./bin/run.js --help
USAGE
  $ mynewcli [COMMAND]

COMMANDS
  hello
  help display help for mynewcli

$ ./bin/run.js hello world
hello world! (./src/commands/hello/world.ts)
üìö Examples
Hello-World
Salesforce CLI
Heroku CLI
üî® Commands
Command Topics
oclif generate - Generate a new CLI
oclif help - Display help for oclif.
oclif init - Initialize a new oclif CLI
oclif manifest - Generates plugin manifest json (oclif.manifest.json).
oclif pack - Package an oclif CLI into installable artifacts.
oclif promote - Promote CLI builds to a S3 release channel.
oclif readme - Adds commands to README.md in current directory.
oclif upload - Upload installable CLI artifacts to AWS S3.
üöÄ Contributing
See the contributing guide.

üè≠ Related Repositories
@oclif/core - Base library for oclif. This can be used directly without the generator.
@oclif/test - Test helper for oclif.
ü¶î Learn More
Salesforce Release Announcement
Heroku Release Announcement.


Term-Size.

terminal-size
Reliably get the terminal window size

Because process.stdout.columns doesn't exist when run non-interactively, for example, in a child process or when piped. This module even works when all the TTY file descriptors are redirected!

Confirmed working on macOS, Linux, and Windows.

Install
npm install terminal-size
Usage
import terminalSize from 'terminal-size';

terminalSize();
//=> {columns: 143, rows: 24}
API
terminalSize()
Returns an object with columns and rows properties.

Related
terminal-size-cli - CLI for this module



Cliffy.

Cliffy - A Framework For Interactive CLIs

Cliffy is a simple, powerful utility for making interactive command line interfaces.

Cliffy is run as a REPL. This allows you to accept multiple commands with one running node process. Cliffy is NOT an argv parser.

Features:

REPL Style interface
Simple API
Can parse negative numbers
Typed parameters
Git Style Sub-Commands
Optional parameters (New in v2)
Rest parameters (New in v2)
Options
Auto generated help
Typescript Support
Gotchas:

Options are specified with an @ symbol. Not - or --. This is what allows Cliffy to parse negatives.
Requires node v6+
Quickstart
Installation:

npm i cliffy # --save if using npm < v5
Usage

import { CLI } from "cliffy";

const cli = new CLI()
    .setDelimiter("-->")
    .addCommand("run", {
        description: "Run somewhere",
        options: [{ label: "quickly", description: "Run quickly" }],
        parameters: ["destination"],
        action: (params, options) => {
            if (options.quickly) {
                console.log(`I ran to ${params.destination} quickly`)
                return;
            }

            console.log(`I ran to ${params.destination}`)
        },
        subcommands: {
            to: {
                description: "Run to a destination",
                parameters: ["destination"],
                action: params => console.log(`I ran to ${params.destination}`)
            },
            from: {
                description: "Run from a destination",
                parameters: ["location"],
                action: params => console.log(`I ran from ${params.location}`)
            }
        }
    })
    .show();
Result:

--> run to nevada
I ran to nevada
--> help

Available commands:

    run [options] <destination> Run somewhere

--> help run

Run somewhere

Usage:

    run [options] <destination>

Options:

   @quickly Run quickly

Sub-Commands:

    to [options] <destination> Run to a destination
    from [options] <destination> Run from a destination
Quoted parameters
Parameters may be quoted using either ' (single) or " (double) quotes. For example the command could be

say "Hello World" 'Lovely Weather'
This would give two parameters of Hello World and Lovely Weather. When inside the quoted parameter, the other type of quotes can be used. This lets JSON be entered for example.

say '{"text": "This is the weather"}'
Will give a parameter of the string, {"text": "This is the weather"} that can then be parsed as JSON.

Autogenerated Help Menu
Cliffy automatically generates a help menu for each command.

To get an overview of all the commands simply type:

help
To get help with a specific command, type help followed by the command.

help ls
This works with subcommands as well

help git pull
Build instructions
Clone this repo
CD into the repo
npm install
npm run build
API
new CLI()
Interface:

class CLI {
    constructor(opts: {
        input?: NodeJS.ReadableStream,
        output?: NodeJS.WritableStream,
         /** Set to true to prevent cliffy from displaying help text after entering a blank line. Defaults to false */
        quietBlank?: boolean
    } = {})
}
Usage:

const cli = new CLI(opts)
cli.addCommand(name: string, command: Command): this
Register a command

Takes a name and a command object.

The command name is what the user will enter to execute the command.

The command interface is defined as follows:

interface Command {
    /**
     * The action to perform when its command is called.
     *
     * parameters is a key value store. Where the key is the parameter label,
     * and its value is the value entered by the user.
     *
     * options is a key value store. Key being the option, value being true if the user
     * specified the option, false otherwise.
     */
    action(parameters: any, options: { [key: string]: boolean }): void | Promise<void>;

    /** Optional description for documentation */
    description?: string;

    /** Aliases the command can be accessed from */
    aliases?: string[];

    /**
     * An array of options available to the user.
     * The user specifies an option with an @ symbol i.e. @force
     */
    options?: (Option | string)[];

    /**
     * All the parameters available to the user.
     * See the parameters interface.
     *
     * If a string is passed it is assumed to be string parameter
     */
    parameters?: (Parameter | string)[];

    /** Sub commands of the command. Follows the same interface as Command */
    subcommands?: Commands;
}

export interface Parameter {
    label: string;

    /** The type to convert the provided value to. Can be a custom converter. */
    type?: "boolean" | "number" | "string" | ((val: string) => any);

    /** The parameter is optional */
    optional?: boolean;

    /**
     * The parameter is a rest parameter.
     *
     * If true, the user can pass an indefinite amount of arguments
     * that are put in an array set in this parameter.
     **/
    rest?: boolean;

    /** Optional description for the help menu */
    description?: string;
}

export interface Option {
    label: string;
    description?: string;
}
Example Usage:

cli.addCommand("run", {
    description: "Run somewhere",
    options: [{ option: "fast", description: "Run fast" }],
    parameters: [{ label: "destination" }],
    action: (params, options) => {
        if (options.fast) return console.log(`I ran to ${params.destination} quickly`);
        console.log(`I ran to ${params.destination}`);
    },
    subcommands: {
        to: {
            parameters: [{ label: "destination" }],
            action: params => console.log(`I ran to ${params.destination}`),
        }
        from: {
            parameters: [{ label: "destination" }],
            action: params => console.log(`I ran to ${params.destination}),
        }
    }
});
cli.addCommand(name: string, opts: Action): this
Register a basic command.

This overload allows you to pass the action function directy. Useful for quick commands where parameters, options, and a description may not be needed.

Example usage:

cli.addCommand("speak", () => sayHello("World"));
cli.addCommands(commands: { [name: string]: Command | Action }): this
Register multiple commands at once.

Example usage:

cli.addCommands({
    run: {
        action(params, options) {
            console.log("Running");
        }
    },

    jog: {
        action(params, options) {
            console.log("Jogging");
        }
    },

    walk: {
        action(params, options) {
            console.log("Walking");
        }
    }
});
cli.setDelimiter(delimiter: string): this
Set the CLI delimiter

Defaults to: "$>"

cli.setInfo(info: string): this
Set the CLI info.

Info is meant to give an overview of what the CLI does and how to use it. If it is set it is shown directly under the CLI name.

Defaults to: none

cli.setName(name: string): this
Set the name of the CLI (Shown at the top of the help menu)

Defaults to: none

cli.setVersion(version: string): this
Set the CLI version. Shown beside the CLI name if set.

Defaults to: none

cli.show(): this
Show the CLI.
cli.hide(): this
Hide the cli.

cli.showHelp(): this
Show the main help menu.




